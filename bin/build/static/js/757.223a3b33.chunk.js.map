{"version":3,"file":"static/js/757.223a3b33.chunk.js","mappings":"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","sources":["utils/excel.ts","services/dashboard.ts","utils/filter-utils.ts","components/Observer/observer.tsx","features/Dashboard/DashboardLevel4/DashboardLevel4Pressure.tsx"],"sourcesContent":["import { format } from \"date-fns\"\nimport ExcelJS from \"exceljs\"\n\n/**\n * @typedef {Object} ExcelUtils\n * @property {Method} export - Export to excel from column (Array of String) and values (Object)\n * @property {Method} import - Import from excel returning Array of Sheet, with Sheet being Array of Object\n */\nclass ExcelUtils {\n    static export(export_name: string, column: string[], values: { [key: string]: string }[]) {\n        // Create a new workbook\n        const workbook = new ExcelJS.Workbook()\n        const worksheet = workbook.addWorksheet(export_name)\n\n        const numberToLetter = (number: number) => {\n            const letters = [\n                \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n                \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\",\n                \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\",\n                \"Y\", \"Z\",\n                \"AA\", \"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"AG\", \"AH\",\n                \"AI\", \"AJ\", \"AK\", \"AL\", \"AM\", \"AN\", \"AO\", \"AP\",\n                \"AQ\", \"AR\", \"AS\", \"AT\", \"AU\", \"AV\", \"AW\", \"AX\",\n                \"AY\", \"AZ\"\n            ]\n\n            if (number >= 0 && number <= 51) {\n                return letters[number]\n            }\n\n            return \"Invalid number\"\n        }\n\n        const startRow = 2\n        column.map((key, index) => {\n            worksheet.getColumn(`${numberToLetter(index)}`).width = 20\n            worksheet.getCell(`${numberToLetter(index)}${startRow - 1}`).value = String(key.toUpperCase())\n            worksheet.getCell(`${numberToLetter(index)}${startRow - 1}`).style = {\n                fill: {\n                    type: \"pattern\",\n                    pattern: \"solid\",\n                    fgColor: { argb: \"c8c8c8\" }, // Yellow background\n                },\n                font: {\n                    bold: true, // Bold font style\n                },\n                alignment: {\n                    vertical: \"middle\", // Align vertically at the middle\n                    horizontal: \"center\",\n                },\n                border: {\n                    top: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    left: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    right: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    bottom: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                },\n            }\n        })\n\n        // Add table data\n        values.map((val, index) => {\n            const row: string[] = []\n            column.map((key) => {\n                if (val[key] != null) {\n                    row.push(val[key])\n                } else {\n                    row.push('')\n                }\n            })\n            const dataRow = worksheet.addRow(row)\n            dataRow.eachCell((cell) => {\n                cell.style = {\n                    alignment: {\n                        vertical: \"middle\",\n                        horizontal: \"center\",\n                    },\n                    border: {\n                        top: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        left: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        right: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        bottom: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                    },\n                }\n            })\n        })\n\n        // Generate the Excel file\n        workbook.xlsx.writeBuffer().then((buffer) => {\n            // Create a Blob from the buffer\n            const blob = new Blob([buffer], {\n                type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            })\n\n            // Create a download link\n            const link = document.createElement(\"a\")\n            link.href = window.URL.createObjectURL(blob)\n            link.download = `${export_name}.xlsx`\n\n            // Simulate a click on the link to trigger the download\n            link.click()\n\n            // Clean up the URL object\n            window.URL.revokeObjectURL(link.href)\n        })\n    }\n\n    static async import(data: ArrayBuffer): Promise<{ [key: string]: string }[]> {\n        // Create a new workbook\n        const workbook = new ExcelJS.Workbook()\n        await workbook.xlsx.load(data)\n        const book: { [key: string | number]: any }[][] = []\n        workbook.eachSheet((worksheet) => {\n            const sheet: { [key: string | number]: any }[] = []\n            worksheet.eachRow((row) => {\n                sheet.push(row.values)\n            })\n            book.push(sheet)\n        })\n        // we only read sheet number 1\n        if (book.length > 0) {\n            const sheet = book[0]\n            const result: { [key: string]: string }[] = []\n            for (let i = 1; i < sheet.length; i++) {\n                const obj: { [key: string]: string } = {}\n                for (let j = 0; j < sheet[i].length; j++) {\n                    if (sheet[0][j] == null || typeof (sheet[0][j]) != 'string') continue\n                    if (sheet[i][j] instanceof Date) {\n                        obj[sheet[0][j].toLowerCase()] = format(sheet[i][j], \"yyyy-MM-dd HH:mm:ss\")\n                    } else {\n                        obj[sheet[0][j].toLowerCase()] = typeof (sheet[i][j]) == 'object' ? sheet[i][j].result : sheet[i][j] ?? ''\n                    }\n                }\n                result.push(obj)\n            }\n            return result\n        } else {\n            return []\n        }\n    }\n}\n\nexport default ExcelUtils","import { BASE_URL } from \"../constants\"\nimport { DashboardLevel1Entity, DashboardLevel2Entity, DashboardLevel3Entity, DashboardV4PressureEntity, DashboardV4VibrationEntity } from \"../entities/DashboardEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\nclass DashboardService {\n    static async GetDashboardLevel1(start_date: string, end_date: string): Promise<DashboardLevel1Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l1?start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel1Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n            \n            result.push({\n                business_unit_id: row.business_unit_id,\n                business_unit: row.business_unit,\n                business_unit_warn: row.business_unit_warn,\n                business_unit_alarm: row.business_unit_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel2(business_unit_id: number, start_date: string, end_date: string): Promise<DashboardLevel2Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l2?business_unit_id=${encodeURIComponent(business_unit_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel2Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            result.push({\n                link_up_id: row.link_up_id,\n                link_up: row.link_up,\n                link_up_warn: row.link_up_warn,\n                link_up_alarm: row.link_up_alarm,\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel3(link_up_id: number, start_date: string, end_date: string): Promise<DashboardLevel3Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l3?link_up_id=${encodeURIComponent(link_up_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel3Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            result.push({\n                machine_id: row.machine_id,\n                machine: row.machine,\n                machine_warn: row.machine_warn,\n                machine_alarm: row.machine_alarm,\n                machine_type: row.machine_type,\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel4Pressure(machine_id: number, start_date: string, end_date: string): Promise<DashboardV4PressureEntity[]> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/pressure/l4?machine_id=${encodeURIComponent(machine_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const rawData = Array.isArray(resp.data) ? resp.data : []\n        const data: DashboardV4PressureEntity[] = []\n\n        for (let i = 0; i < rawData.length; i++) {\n            data.push({\n                pressure: rawData[i].pressure,\n                pressure_max_alarm: rawData[i].pressure_max_alarm,\n                pressure_max_warn: rawData[i].pressure_max_warn,\n                pressure_min_alarm: rawData[i].pressure_min_alarm,\n                pressure_min_warn: rawData[i].pressure_min_warn,\n                timestamp: rawData[i].timestamp,\n            })\n        }\n\n        return data\n    }\n    \n    static async GetDashboardLevel4Vibration(machine_id: number, start_date: string, end_date: string): Promise<DashboardV4VibrationEntity[]> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/vibration/l4?machine_id=${encodeURIComponent(machine_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const rawData = Array.isArray(resp.data) ? resp.data : []\n        const data: DashboardV4VibrationEntity[] = []\n\n        for (let i = 0; i < rawData.length; i++) {\n            data.push({\n                x: rawData[i].x,\n                x_base: rawData[i].x_base,\n                x_warn: rawData[i].x_warn,\n                x_alarm: rawData[i].x_alarm,\n                z: rawData[i].z,\n                z_base: rawData[i].z_base,\n                z_warn: rawData[i].z_warn,\n                z_alarm: rawData[i].z_alarm,\n                x_acc: rawData[i].x_acc,\n                x_acc_base: rawData[i].x_acc_base,\n                x_acc_warn: rawData[i].x_acc_warn,\n                x_acc_alarm: rawData[i].x_acc_alarm,\n                z_acc: rawData[i].z_acc,\n                z_acc_base: rawData[i].z_acc_base,\n                z_acc_warn: rawData[i].z_acc_warn,\n                z_acc_alarm: rawData[i].z_acc_alarm,\n                temp: rawData[i].temp,\n                temp_warn: rawData[i].temp_warn,\n                temp_alarm: rawData[i].temp_alarm,\n                timestamp: rawData[i].timestamp,\n            })\n        }\n\n        return data\n    }\n}\n\nclass DashboardRealtimeService {\n    static async GetDashboardLevel1(): Promise<DashboardLevel1Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l1`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel1Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            const mergedArray = row.machine_ool_pressure.concat(row.machine_ool_vibration)\n            const mergedSet = Array.from(new Set(mergedArray))\n\n            result.push({\n                business_unit_id: row.business_unit_id,\n                business_unit: row.business_unit,\n                business_unit_warn: row.business_unit_warn,\n                business_unit_alarm: row.business_unit_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n                \n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel2(business_unit_id: number): Promise<DashboardLevel2Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l2?business_unit_id=${encodeURIComponent(business_unit_id)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel2Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            result.push({\n                link_up_id: row.link_up_id,\n                link_up: row.link_up,\n                link_up_warn: row.link_up_warn,\n                link_up_alarm: row.link_up_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel3(link_up_id: number,): Promise<DashboardLevel3Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l3?link_up_id=${encodeURIComponent(link_up_id)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel3Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            result.push({\n                machine_id: row.machine_id,\n                machine: row.machine,\n                machine_type: row.machine_type,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_warn: row.machine_warn,\n                machine_alarm: row.machine_alarm,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n            })\n        }\n\n        return result\n    }\n}\n\nexport { DashboardService, DashboardRealtimeService }","class FilterUtils {\n    static FilterTable = (row: any, tableDataFilter: { [key: string]: string }) => {\n        let keys = Object.keys(row)\n        for (let indexKey = 0; indexKey < keys.length; indexKey++) {\n            const key = keys[indexKey]\n            if (tableDataFilter[key]) {\n                if (row != undefined && row[key] != null) {\n                    if (tableDataFilter[key] !== \"\") {\n                        if (\n                            row[key]\n                                .toString()\n                                .toLowerCase()\n                                .includes(tableDataFilter[key].toString().toLowerCase()) == false\n                        ) {\n                            return false\n                        }\n                    }\n                } else {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    static SortingTable = (a: any, b: any, sortChoosed: string) => {\n        if (sortChoosed != null && sortChoosed != undefined) {\n            if (a[sortChoosed] !== undefined && b[sortChoosed] !== undefined) {\n                if (typeof a[sortChoosed] === 'string' && typeof b[sortChoosed] === 'string') {\n                    return a[sortChoosed].localeCompare(b[sortChoosed])\n                } else if (typeof a[sortChoosed] === 'number' && typeof b[sortChoosed] === 'number') {\n                    return a[sortChoosed] - b[sortChoosed]\n                }\n            }\n        }\n        return 0\n    }\n\n    static FastIsEmpty = (arr: any[]) => {\n        for (const _ in arr) {\n            return false\n        }\n        return true\n    }\n}\n\nexport default FilterUtils","import { useEffect, useMemo, useState } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\n\nfunction MultipleObserver(props: { content: React.JSX.Element; onVisible: () => any, }) {\n    const { onVisible, content } = props;\n\n    const { ref } = useInView({\n        threshold: 0.1, triggerOnce: false, initialInView: false,\n        onChange: (inView, entry) => { if (inView) { onVisible() } }\n    });\n\n    return <tr ref={ref}>\n        {content}\n    </tr>\n}\n\ninterface TableObservedProps {\n    tableData: any[],\n    rowFunction: (index: number, row: any) => JSX.Element,\n    onRowClick?: (row: any) => void\n    rowsCount: number,\n    rowsIncrement: number,\n}\n\nexport default function TableObserved(props: TableObservedProps) {\n    const { tableData, rowFunction, onRowClick, rowsCount, rowsIncrement } = props;\n\n    const ROWS_MAX_COUNT = rowsCount\n    const ROWS_INCREMENT = rowsIncrement\n\n    const [limit, setLimit] = useState(ROWS_MAX_COUNT)\n\n    const data = useMemo((() => {\n        const elements = []\n        for (let index = 0; index < tableData.length; index++) {\n            if (index < limit - ROWS_MAX_COUNT || index > limit) {\n                continue\n            }\n\n            const row = tableData[index]\n            elements.push(<>\n                {index == limit\n                    ? <MultipleObserver\n                        content={<></>}\n                        onVisible={function () {\n                            setLimit((prev) => prev + ROWS_INCREMENT)\n                            // non react way but fuck it\n                            setTimeout(() => { document.getElementById(`rows_${index}`)?.scrollIntoView() })\n                        }} />\n                    : <></>\n                }\n                {index == limit - ROWS_MAX_COUNT && index != 0\n                    ? <MultipleObserver\n                        content={<></>}\n                        onVisible={function () {\n                            setLimit((prev) => {\n                                return prev - ROWS_INCREMENT < ROWS_MAX_COUNT ? ROWS_MAX_COUNT : prev - ROWS_INCREMENT\n                            })\n                            // non react way but fuck it\n                            setTimeout(() => { document.getElementById(`rows_${index}`)?.scrollIntoView() })\n                        }} />\n                    : <></>\n                }\n                <tr id={`rows_${index}`} style={{ whiteSpace: \"nowrap\" }} onClick={() => { if (onRowClick != null) { onRowClick(row) } }}>\n                    {rowFunction(index, row)}\n                </tr>\n                {index == tableData.length - 1\n                    ? <tr><td colSpan={1000}>END OF DATA</td></tr>\n                    : <></>}\n            </>)\n        }\n        return elements\n    }), [limit, tableData])\n\n    useEffect(() => {\n        setLimit(ROWS_MAX_COUNT)\n    }, [tableData])\n\n    return data.map((val) => { return val })\n}","import { useContext, useEffect, useMemo, useRef, useState } from \"react\"\nimport styles from './DashboardLevel4.module.css'\nimport { DashboardV4PressureEntity } from \"../../../entities/DashboardEntity\"\nimport { BASE_URL } from \"../../../constants\"\nimport { format, formatDate } from \"date-fns\"\nimport AppContext from \"../../../context\"\nimport filterUtils from \"../../../utils/filter-utils\"\nimport { AlertEntity } from \"../../../layouts/Alert/AlertEntity\"\nimport { FaAngleDoubleLeft, FaAngleDoubleRight, FaAngleLeft, FaAngleRight, FaArrowCircleLeft, FaChartLine, FaSortDown, FaSortUp, FaTable } from \"react-icons/fa\"\nimport { DashboardService } from \"../../../services/dashboard\"\nimport { useLocation, useParams } from \"react-router-dom\"\nimport TableObserved from \"../../../components/Observer/observer\"\nimport { GrLineChart } from \"react-icons/gr\"\nimport { TbTable } from \"react-icons/tb\"\n\n// ========================================= CHART IMPORT =========================================  //\nimport {\n    Chart as ChartJS,\n    LineElement,\n    PointElement,\n    LinearScale,\n    Title,\n    CategoryScale,\n    Tooltip,\n    Legend,\n    ChartData,\n    ChartOptions,\n    defaults\n} from 'chart.js'\n\nimport { Plugin } from 'chart.js'\nimport { Line } from 'react-chartjs-2'\nimport ExcelUtils from \"../../../utils/excel\"\n\nChartJS.register(\n    LineElement,\n    PointElement,\n    LinearScale,\n    Title,\n    CategoryScale,\n    Tooltip,\n    Legend\n)\n\ndefaults.maintainAspectRatio = false\ndefaults.responsive = true\n// ========================================= CHART IMPORT =========================================  //\n\n\ninterface PressurePageProps {\n    realtime: boolean\n    setRealtime: (value: boolean) => void\n    refresh: number\n    start_date: Date\n    end_date: Date\n    setHandleGenerateExcel: (fn: (() => void) | null) => void\n}\n\n\nconst PressurePage: React.FC<PressurePageProps> = ({ realtime, setRealtime, refresh, start_date, end_date, setHandleGenerateExcel }) => {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n\n    const { machineId } = useParams()\n\n    const CHART_COLORS = {\n        chartLine: '#fb8500',\n        graphicGood: 'rgba(41, 191, 18, 0.21)',\n        graphicWarn: 'rgba(244, 188, 20, 0.28)',\n        graphicAlarm: 'rgba(213, 14, 81, 0.2)',\n    }\n\n    const [activeHourIndex, setActiveHourIndex] = useState(new Date())\n    const [isAuto, setIsAuto] = useState(true)\n    const [chartSplit, setChartSplit] = useState<\"hour\" | \"minutes_10\" | \"all\">(\"minutes_10\")\n    const [viewMode, setViewMode] = useState<'chart' | 'table' | 'table-ool'>('chart')\n    const [sortedCols, setSortedCols] = useState<keyof DashboardV4PressureEntity | null>(null)\n    const [sortedColsType, setSortedColsType] = useState<\"ascending\" | \"descending\">(\"ascending\")\n\n\n    // ========================================= STATE PRESSURE BY DATE =========================================  //\n    const [tableData, setTableData] = useState<DashboardV4PressureEntity[]>([])\n    const [tableDataCache, setTableDataCache] = useState<DashboardV4PressureEntity[]>([])\n    const mappedDataRef = useRef<{ [key: string]: DashboardV4PressureEntity[] }>({})\n\n    const [tableDataFilter, setTableDataFilter] = useState<{ [key: string]: string }>({})\n\n    const [chartData, setChartData] = useState<ChartData<'line'>>({ labels: [], datasets: [] })\n    const [chartOptions, setChartOptions] = useState<ChartOptions<'line'>>({})\n\n    const firstData = useRef<DashboardV4PressureEntity | null>(null)\n    // ========================================= STATE PRESSURE BY DATE =========================================  //\n\n\n    // ========================================= STATE PRESSURE REALTIME =========================================  //\n    let pressureSocket: WebSocket | null = null\n    let reconnectPressure = true\n\n    const [tableDataRealtime, setTableDataRealtime] = useState<DashboardV4PressureEntity[]>([])\n    const [tableDataRealtimeCache, setTableDataRealtimeCache] = useState<DashboardV4PressureEntity[]>([])\n\n    const [tableDataRealtimeFilter, setTableDataRealtimeFilter] = useState<{ [key: string]: string }>({})\n\n    const [chartDataRealtime, setChartDataRealtime] = useState<ChartData<'line'>>({ labels: [], datasets: [], })\n    const [chartOptionsRealtime, setChartOptionsRealtime] = useState<ChartOptions<'line'>>({})\n\n    const firstDataRealtime = useRef<DashboardV4PressureEntity | null>(null)\n    // ========================================= STATE PRESSURE REALTIME =========================================  //\n\n\n    function splitDataToMap(data: DashboardV4PressureEntity[]) {\n        const map: { [key: string]: DashboardV4PressureEntity[] } = {}\n\n        if (chartSplit == \"all\") {\n            return { \"all\": [...data].toReversed() }\n        }\n\n        data.toReversed().forEach(item => {\n            const date = new Date(item.timestamp)\n            const rounded = new Date(date)\n            rounded.setMinutes(Math.floor(date.getMinutes() / 10) * 10)\n            rounded.setSeconds(0)\n            rounded.setMilliseconds(0)\n\n            let key = format(rounded, \"yyyy-MM-dd HH:00:00\")\n            switch (chartSplit) {\n                case \"hour\": {\n                    key = format(rounded, \"yyyy-MM-dd HH:00:00\")\n                    break\n                }\n                case 'minutes_10': {\n                    key = format(rounded, \"yyyy-MM-dd HH:mm:00\")\n                    break\n                }\n                default:\n                    break;\n            }\n\n            if (map[key] == undefined) {\n                map[key] = []\n            } else {\n                map[key].push(item)\n            }\n        })\n\n        return map\n    }\n\n\n    // ========================================= FUNCTIONS PRESSURE BY DATE =========================================  //\n    const statusArea: Plugin<'line'> = {\n        id: 'statusArea',\n        beforeDatasetsDraw(chart) {\n            const pressureData = firstData.current\n\n            const { ctx, chartArea, scales } = chart\n            if (\n                !chartArea ||\n                !scales.x ||\n                !scales.y ||\n                pressureData?.pressure_max_alarm == null ||\n                pressureData?.pressure_min_alarm == null ||\n                pressureData?.pressure_max_warn == null ||\n                pressureData?.pressure_min_warn == null\n            ) return\n\n            ctx.save()\n\n            // --- Area Alarm (Merah) ---\n            const startMinAlarm = scales.y.min\n            const endMinAlarm = pressureData?.pressure_min_alarm ?? 0\n\n            const startMinAlarmPixel = scales.y.getPixelForValue(startMinAlarm)\n            const endMinAlarmPixel = scales.y.getPixelForValue(endMinAlarm)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixel, endMinAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixel - endMinAlarmPixel)\n            )\n\n            const startMaxAlarm = pressureData?.pressure_max_alarm ?? 0\n            const endMaxAlarm = scales.y.max\n\n            const startMaxAlarmPixel = scales.y.getPixelForValue(startMaxAlarm)\n            const endMaxAlarmPixel = scales.y.getPixelForValue(endMaxAlarm)\n\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMaxAlarmPixel, endMaxAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMaxAlarmPixel - endMaxAlarmPixel)\n            )\n\n            // --- Area Normal (Green) ---\n            const startNormalArea = pressureData?.pressure_min_warn ?? 0\n            const endNormalArea = pressureData?.pressure_max_warn ?? 0\n\n            const startNormalAreaPixel = scales.y.getPixelForValue(startNormalArea)\n            const endNormalAreaPixel = scales.y.getPixelForValue(endNormalArea)\n\n            ctx.fillStyle = CHART_COLORS.graphicGood\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startNormalAreaPixel, endNormalAreaPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startNormalAreaPixel - endNormalAreaPixel)\n            )\n\n            // --- Area Warn (Kuning) ---\n            const startMinWarn = pressureData?.pressure_min_alarm ?? 0\n            const endMinWarn = pressureData?.pressure_min_warn ?? 0\n\n            const startMinWarnPixel = scales.y.getPixelForValue(startMinWarn)\n            const endMinWarnPixel = scales.y.getPixelForValue(endMinWarn)\n\n            ctx.fillStyle = CHART_COLORS.graphicWarn\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinWarnPixel, endMinWarnPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinWarnPixel - endMinWarnPixel)\n            )\n\n            const startMaxWarn = pressureData?.pressure_max_warn ?? 0\n            const endMaxWarn = pressureData?.pressure_max_alarm ?? 0\n\n            const startMaxWarnPixel = scales.y.getPixelForValue(startMaxWarn)\n            const endMaxWarnPixel = scales.y.getPixelForValue(endMaxWarn)\n\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMaxWarnPixel, endMaxWarnPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMaxWarnPixel - endMaxWarnPixel)\n            )\n\n            ctx.restore()\n        }\n    }\n    const updateChart = (mapData: { [key: string]: DashboardV4PressureEntity[] }, activeHourIndex: Date) => {\n        // Get Data by activeHourIndex\n        const flooredMinutes = `${Math.floor(activeHourIndex.getMinutes() / 10)}0`\n\n        let key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n        switch (chartSplit) {\n            case \"hour\": {\n                key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n                break\n            }\n            case 'minutes_10': {\n                key = format(activeHourIndex, `yyyy-MM-dd HH:${flooredMinutes}:00`)\n                break\n            }\n            case 'all': {\n                key = \"all\"\n                break\n            }\n            default:\n                break;\n        }\n\n        const groupData = mapData[key] ?? []\n\n        if (!groupData) {\n            return\n        }\n\n        // Get Labels & Data\n        const newLabels = groupData.map(msg => format(msg.timestamp, \"HH:mm:ss\"))\n        const newData = groupData.map(msg => msg.pressure)\n\n        // Get Area Warn, Alarm & Good\n        const reversedData = groupData.toReversed()\n        firstData.current = reversedData[0]\n\n        // Calculate min & max y\n        const dataMin = Math.min(...newData)\n        const dataMax = Math.max(...newData)\n        const range = dataMax - dataMin || 1\n        const padding = 0.2\n\n        const customMin = dataMin - range * padding\n        const customMax = dataMax + range * padding\n\n        setChartData({\n            labels: newLabels,\n            datasets: [\n                {\n                    label: \"Pressure Sensor\",\n                    data: newData,\n                    borderColor: CHART_COLORS.chartLine,\n                    pointBackgroundColor: CHART_COLORS.chartLine,\n                    pointBorderColor: '#ffffff',\n                    pointHoverBackgroundColor: '#ffffff',\n                    pointHoverBorderColor: CHART_COLORS.chartLine,\n\n                    borderWidth: 4,\n                    pointRadius: 0,\n                },\n            ],\n        })\n\n        setChartOptions({\n            responsive: true,\n            maintainAspectRatio: false,\n            animation: {\n                duration: 800,\n                easing: 'easeInOutCubic',\n            },\n            plugins: {\n                legend: {\n                    position: 'top',\n                    labels: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 14,\n                            weight: 500,\n                            family: \"'Inter', 'Segoe UI', sans-serif\",\n                        },\n                        usePointStyle: true,\n                        pointStyle: 'rectRounded',\n                    },\n                },\n                tooltip: {\n                    backgroundColor: '#1f2937',\n                    titleColor: '#f8fafc',\n                    bodyColor: '#cbd5e1',\n                    padding: 12,\n                    borderColor: '#0077b6',\n                    borderWidth: 1,\n                    cornerRadius: 8,\n                    titleFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 14,\n                        weight: 600,\n                    },\n                    bodyFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 13,\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        maxRotation: 45,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        padding: 8,\n                    },\n                    min: customMin,\n                    max: customMax,\n                },\n            },\n            layout: {\n                padding: {\n                    top: 10,\n                    bottom: 10,\n                    left: 10,\n                    right: 10,\n                },\n            },\n            elements: {\n                line: {\n                    borderJoinStyle: 'round',\n                },\n                point: {\n                    pointStyle: 'circle',\n                },\n            },\n        })\n    }\n\n    const handleFilterAndSort = () => {\n        const table_filtered = tableDataCache.filter((row) => {\n            return filterUtils.FilterTable(row, tableDataFilter)\n        }).sort((a, b) => {\n            if (!sortedCols) { return 0 }\n            if (sortedColsType == \"ascending\") {\n                return filterUtils.SortingTable(a, b, sortedCols)\n            } else {\n                return filterUtils.SortingTable(b, a, sortedCols)\n            }\n        })\n        setTableData(table_filtered)\n    }\n    const filterTable = (column: keyof DashboardV4PressureEntity, columnnName?: string) => {\n        return <div>\n            <input style={{ fontSize: \"12px\", marginTop: \"0.5dvh\", width: \"150px\" }} type=\"text\" value={tableDataFilter[column] ?? \"\"}\n                placeholder={`${columnnName ?? column} ...`}\n                onChange={(event) => {\n                    setTableDataFilter((prev) => {\n                        const newData = { ...prev }\n                        newData[column] = event.target.value\n                        return newData\n                    })\n                }}\n            />\n        </div>\n    }\n    const headerTable = (column: keyof DashboardV4PressureEntity, columnName?: string) => {\n        return <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", gap: \"3px\", whiteSpace: \"nowrap\", cursor: \"pointer\" }}\n            onClick={() => {\n                setSortedCols(column)\n                if (sortedColsType === \"ascending\") {\n                    setSortedColsType(\"descending\")\n                } else {\n                    setSortedColsType(\"ascending\")\n                }\n            }}\n        >\n            <div>{columnName ?? column}</div>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0\", alignItems: \"center\", justifyItems: \"center\" }}>\n                <FaSortUp style={{ color: ((sortedCols == column && sortedColsType == \"descending\") ? \"var(--secondary-color)\" : \"silver\"), margin: 0, padding: 0, height: '18px' }} />\n                <FaSortDown style={{ color: ((sortedCols == column && sortedColsType == \"ascending\") ? \"var(--secondary-color)\" : \"silver\"), margin: \"-18px\", padding: 0, height: '18px' }} />\n            </div>\n        </div>\n    }\n\n    const generateData = async (withLoading: boolean) => {\n        if (withLoading) {\n            contextShowLoadingFunc(true)\n        }\n\n        try {\n            const resp = await DashboardService.GetDashboardLevel4Pressure(\n                Number(machineId),\n                formatDate(start_date, 'yyyy-MM-dd'),\n                formatDate(end_date, 'yyyy-MM-dd')\n            )\n            setTableData(resp)\n            setTableDataCache(resp)\n\n            const map = splitDataToMap(resp)\n            mappedDataRef.current = map\n\n            const keys = Object.keys(map)\n            if (keys.length > 0 && chartSplit != \"all\") {\n                const newDate = new Date(keys[keys.length - 1])\n                setActiveHourIndex(newDate)\n                updateChart(mappedDataRef.current, newDate)\n            } else {\n                updateChart(mappedDataRef.current, activeHourIndex)\n            }\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({\n                message: error instanceof Error ? error.message : error.toString(),\n                level: 3\n            }))\n        } finally {\n            contextShowLoadingFunc(false)\n        }\n    }\n    const pressureDataRows = (index: number, row: DashboardV4PressureEntity) => {\n        let valueColor = 'black'\n        let valueWeight = '400'\n\n        const { pressure, pressure_max_warn, pressure_min_warn, pressure_max_alarm, pressure_min_alarm } = row\n\n        if (\n            pressure_max_warn !== undefined &&\n            pressure_min_warn !== undefined &&\n            pressure < pressure_max_warn &&\n            pressure > pressure_min_warn\n        ) {\n            valueColor = 'green'\n            valueWeight = 'bold'\n        }\n\n        if (\n            pressure_max_warn !== undefined &&\n            pressure_min_warn !== undefined &&\n            (pressure >= pressure_max_warn || pressure <= pressure_min_warn)\n        ) {\n            valueColor = 'orange'\n            valueWeight = 'bold'\n        }\n\n        if (\n            pressure_max_alarm !== undefined &&\n            pressure_min_alarm !== undefined &&\n            (pressure >= pressure_max_alarm || pressure <= pressure_min_alarm)\n        ) {\n            valueColor = 'red'\n            valueWeight = 'bold'\n        }\n\n        return <>\n            <td>{index + 1}</td>\n            <td>{format(row.timestamp, `yyyy-MM-dd HH:mm:ss`)}</td>\n            <td>{row.pressure}</td>\n            <td>{row.pressure_max_alarm}</td>\n            <td>{row.pressure_max_warn}</td>\n            <td>{row.pressure_min_alarm}</td>\n            <td>{row.pressure_min_warn}</td>\n        </>\n    }\n\n    useEffect(() => {\n        handleFilterAndSort()\n    }, [tableDataFilter, sortedCols, sortedColsType])\n\n    useEffect(() => {\n        // no loading on first open\n        generateData(refresh != 0)\n    }, [refresh])\n    // ========================================= FUNCTIONS PRESSURE BY DATE =========================================  //\n\n\n    // ========================================= FUNCTIONS PRESSURE REALTIME =========================================  //\n    const statusAreaRealtime: Plugin<'line'> = {\n        id: 'statusAreaRealtime',\n        beforeDatasetsDraw(chart) {\n            const pressureData = firstDataRealtime.current\n\n            const { ctx, chartArea, scales } = chart\n            if (!chartArea || !scales.x || !scales.y) {\n                return\n            }\n\n            if (!pressureData ||\n                (pressureData.pressure_min_warn === 0 || pressureData.pressure_min_warn == null) &&\n                (pressureData.pressure_max_warn === 0 || pressureData.pressure_max_warn == null) &&\n                (pressureData.pressure_min_alarm === 0 || pressureData.pressure_min_alarm == null) &&\n                (pressureData.pressure_max_alarm === 0 || pressureData.pressure_max_alarm == null)\n            ) {\n                return\n            }\n\n            ctx.save()\n\n            // --- Area MIN Alarm (Merah) ---\n            const startMinAlarm = scales.y.min\n            const endMinAlarm = pressureData?.pressure_min_alarm ?? 0\n\n            const startMinAlarmPixel = scales.y.getPixelForValue(startMinAlarm)\n            const endMinAlarmPixel = scales.y.getPixelForValue(endMinAlarm)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixel, endMinAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixel - endMinAlarmPixel)\n            )\n\n            // --- Area MAX Alarm (Merah) ---\n            const startMaxAlarm = pressureData?.pressure_max_alarm ?? 0\n            const endMaxAlarm = scales.y.max\n\n            const startMaxAlarmPixel = scales.y.getPixelForValue(startMaxAlarm)\n            const endMaxAlarmPixel = scales.y.getPixelForValue(endMaxAlarm)\n\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMaxAlarmPixel, endMaxAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMaxAlarmPixel - endMaxAlarmPixel)\n            )\n\n            // --- Area Normal (Green) ---\n            const startNormalArea = pressureData?.pressure_min_warn ?? 0\n            const endNormalArea = pressureData?.pressure_max_warn ?? 0\n\n            const startNormalAreaPixel = scales.y.getPixelForValue(startNormalArea)\n            const endNormalAreaPixel = scales.y.getPixelForValue(endNormalArea)\n\n            ctx.fillStyle = CHART_COLORS.graphicGood\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startNormalAreaPixel, endNormalAreaPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startNormalAreaPixel - endNormalAreaPixel)\n            )\n\n            // --- Area MIN Warn (Kuning) ---\n            const startMinWarn = pressureData?.pressure_min_alarm ?? 0\n            const endMinWarn = pressureData?.pressure_min_warn ?? 0\n\n            const startMinWarnPixel = scales.y.getPixelForValue(startMinWarn)\n            const endMinWarnPixel = scales.y.getPixelForValue(endMinWarn)\n\n            ctx.fillStyle = CHART_COLORS.graphicWarn\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinWarnPixel, endMinWarnPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinWarnPixel - endMinWarnPixel)\n            )\n\n            // --- Area MAX Warn (Kuning) ---\n            const startMaxWarn = pressureData?.pressure_max_warn ?? 0\n            const endMaxWarn = pressureData?.pressure_max_alarm ?? 0\n\n            const startMaxWarnPixel = scales.y.getPixelForValue(startMaxWarn)\n            const endMaxWarnPixel = scales.y.getPixelForValue(endMaxWarn)\n\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMaxWarnPixel, endMaxWarnPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMaxWarnPixel - endMaxWarnPixel)\n            )\n\n            ctx.restore()\n        }\n    }\n    const updateChartRealtime = (mapData: { [key: string]: DashboardV4PressureEntity[] }, activeHourIndex: Date) => {\n        // Get Data by activeHourIndex\n        const flooredMinutes = `${Math.floor(activeHourIndex.getMinutes() / 10)}0`\n\n        let key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n        switch (chartSplit) {\n            case \"hour\": {\n                key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n                break\n            }\n            case 'minutes_10': {\n                key = format(activeHourIndex, `yyyy-MM-dd HH:${flooredMinutes}:00`)\n                break\n            }\n            case 'all': {\n                key = \"all\"\n                break\n            }\n            default:\n                break;\n        }\n\n        const groupData = mapData[key] ?? []\n\n        if (!groupData) {\n            return\n        }\n\n        // Get Labels & Data\n        const newLabels = groupData.map(msg => format(msg.timestamp, \"HH:mm:ss\"))\n        const newData = groupData.map(msg => msg.pressure)\n\n        // Get Area Warn, Alarm & Good\n        const firstData = groupData[0]\n        firstDataRealtime.current = firstData\n\n        // Calculate min & max y\n        const dataMin = Math.min(...newData)\n        const dataMax = Math.max(...newData)\n        const range = dataMax - dataMin || 1\n        const padding = 0.2\n\n        const customMin = dataMin - range * padding\n        const customMax = dataMax + range * padding\n\n\n        setChartDataRealtime({\n            labels: newLabels,\n            datasets: [\n                {\n                    label: \"Pressure Sensor\",\n                    data: newData,\n                    borderColor: CHART_COLORS.chartLine,\n                    pointBackgroundColor: CHART_COLORS.chartLine,\n                    pointBorderColor: '#ffffff',\n                    pointHoverBackgroundColor: '#ffffff',\n                    pointHoverBorderColor: CHART_COLORS.chartLine,\n\n                    borderWidth: 4,\n                    pointRadius: 0\n                },\n            ],\n        })\n\n        setChartOptionsRealtime({\n            responsive: true,\n            maintainAspectRatio: false,\n            animation: {\n                duration: 800,\n                easing: 'easeInOutCubic',\n            },\n            plugins: {\n                legend: {\n                    position: 'top',\n                    labels: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 14,\n                            weight: 500,\n                            family: \"'Inter', 'Segoe UI', sans-serif\",\n                        },\n                        usePointStyle: true,\n                        pointStyle: 'rectRounded',\n                    },\n                },\n                tooltip: {\n                    backgroundColor: '#1f2937',\n                    titleColor: '#f8fafc',\n                    bodyColor: '#cbd5e1',\n                    padding: 12,\n                    borderColor: '#0077b6',\n                    borderWidth: 1,\n                    cornerRadius: 8,\n                    titleFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 14,\n                        weight: 600,\n                    },\n                    bodyFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 13,\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        maxRotation: 45,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        padding: 8,\n                    },\n                    min: customMin,\n                    max: customMax,\n                },\n            },\n            layout: {\n                padding: {\n                    top: 10,\n                    bottom: 10,\n                    left: 10,\n                    right: 10,\n                },\n            },\n            elements: {\n                line: {\n                    borderJoinStyle: 'round',\n                },\n                point: {\n                    pointStyle: 'circle',\n                },\n            },\n        })\n    }\n\n    const handleFilterAndSortRealtime = () => {\n        const table_filtered = tableDataRealtimeCache.filter((row) => {\n            return filterUtils.FilterTable(row, tableDataRealtimeFilter)\n        }).sort((a, b) => {\n            if (!sortedCols) { return 0 }\n            if (sortedColsType == \"ascending\") {\n                return filterUtils.SortingTable(a, b, sortedCols)\n            } else {\n                return filterUtils.SortingTable(b, a, sortedCols)\n            }\n        })\n        setTableDataRealtime(table_filtered)\n    }\n    const filterTableRealtime = (column: keyof DashboardV4PressureEntity, columnnName?: string) => {\n        return <div>\n            <input style={{ fontSize: \"12px\", marginTop: \"0.5dvh\", width: \"150px\" }} type=\"text\" value={tableDataRealtimeFilter[column] ?? \"\"}\n                placeholder={`${columnnName ?? column} ...`}\n                onChange={(event) => {\n                    setTableDataRealtimeFilter((prev) => {\n                        const newData = { ...prev }\n                        newData[column] = event.target.value\n                        return newData\n                    })\n                }}\n            />\n        </div>\n    }\n    const headerTableRealtime = (column: keyof DashboardV4PressureEntity, columnName?: string) => {\n        return <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", gap: \"3px\", whiteSpace: \"nowrap\", cursor: \"pointer\" }}\n            onClick={() => {\n                setSortedCols(column)\n                if (sortedColsType === \"ascending\") {\n                    setSortedColsType(\"descending\")\n                } else {\n                    setSortedColsType(\"ascending\")\n                }\n            }}\n        >\n            <div>{columnName ?? column}</div>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0\", alignItems: \"center\", justifyItems: \"center\" }}>\n                <FaSortUp style={{ color: ((sortedCols == column && sortedColsType == \"descending\") ? \"var(--secondary-color)\" : \"silver\"), margin: 0, padding: 0, height: '18px' }} />\n                <FaSortDown style={{ color: ((sortedCols == column && sortedColsType == \"ascending\") ? \"var(--secondary-color)\" : \"silver\"), margin: \"-18px\", padding: 0, height: '18px' }} />\n            </div>\n        </div>\n    }\n\n    const connectPressure = () => {\n        if (!reconnectPressure) {\n            console.log(\"canceled\")\n            return\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n                pressureSocket = new WebSocket(`${BASE_URL}/ws/realtime/pressure`)\n\n                pressureSocket.onmessage = (event: MessageEvent) => {\n                    try {\n                        const response = JSON.parse(event.data)\n                        setTableDataRealtime(response.data)\n                        setTableDataRealtimeCache(response.data)\n                    } catch (error: any) {\n                        console.log(\"Invalid response: \", error.message)\n                    }\n                }\n\n                pressureSocket.onerror = (err) => {\n                    console.error(\"WebSocket error:\", err)\n                    pressureSocket?.close()\n                }\n\n                pressureSocket.onclose = async () => {\n                    console.log(\"pressureSocket closed.\")\n                    console.log(\"Try reconnecting...\")\n                    try {\n                        await connectPressure()\n                    } catch (error) {\n                        console.log(\"Failed to reconnect\")\n                    }\n                }\n\n                pressureSocket.onopen = () => {\n                    console.log(\"pressureSocket connected\")\n                    const machineIdPayload = {\n                        type: \"subscribe\",\n                        machine_id: machineId,\n                    }\n                    pressureSocket?.send(JSON.stringify(machineIdPayload))\n                    resolve(true)\n                }\n            } catch (error) {\n                console.log(\"Error reconnect: \", error)\n                reject(false)\n            }\n        })\n    }\n\n    useEffect(() => {\n        if (pressureSocket == null || pressureSocket.readyState == WebSocket.CLOSED) {\n            console.log(\"Connecting ws pressure...\")\n            connectPressure()\n        }\n        return () => {\n            if (pressureSocket != null) {\n                console.log(\"Disconnecting ws pressure...\")\n                pressureSocket.close()\n            }\n            reconnectPressure = false\n        }\n    }, [pressureSocket])\n    useEffect(() => {\n        handleFilterAndSortRealtime()\n    }, [tableDataRealtimeFilter, sortedCols, sortedColsType])\n    // ========================================= FUNCTIONS PRESSURE REALTIME =========================================  //\n\n    // Auto mode\n    useEffect(() => {\n        if (!realtime) return\n        if (!isAuto) return\n\n        const map = splitDataToMap(tableDataRealtime)\n        const newDate = new Date()\n        newDate.setMinutes(Math.floor(newDate.getMinutes() / 10) * 10)\n\n        setActiveHourIndex(newDate)\n        updateChartRealtime(map, newDate)\n    }, [isAuto, realtime, tableDataRealtime, chartSplit])\n\n    // Manual mode\n    useEffect(() => {\n        if (!realtime) return\n        if (isAuto) return\n\n        const map = splitDataToMap(tableDataRealtime)\n        updateChartRealtime(map, activeHourIndex)\n    }, [isAuto, realtime, tableDataRealtime, activeHourIndex, chartSplit])\n\n    // by date\n    useEffect(() => {\n        if (realtime) { return }\n        updateChart(mappedDataRef.current, activeHourIndex)\n    }, [realtime, mappedDataRef.current, activeHourIndex])\n\n    // cache update\n    useEffect(() => {\n        const map = splitDataToMap(tableData)\n        mappedDataRef.current = map\n\n        const keys = Object.keys(map)\n        if (chartSplit != \"all\" && keys.length > 0) {\n            const newDate = new Date(keys[keys.length - 1])\n            setActiveHourIndex(newDate)\n        } else {\n            setActiveHourIndex(new Date())\n        }\n\n    }, [realtime, chartSplit])\n\n    // title chart\n    const titleChart = useMemo(() => {\n        if (chartSplit == \"all\") {\n            return \"All Data\"\n        } else if (chartSplit == \"hour\") {\n            return formatDate(activeHourIndex, \"dd MMM yyyy HH:00\")\n        } else if (chartSplit == \"minutes_10\") {\n            return formatDate(activeHourIndex, \"dd MMM yyyy HH:mm\")\n        }\n    }, [activeHourIndex, chartSplit])\n\n    const handleChangeActiveHourIndex = (amount: number, unit: 'hours' | 'minutes') => {\n        setIsAuto(false)\n        const newDate = new Date(activeHourIndex)\n        const flooredMinutes = Math.floor(newDate.getMinutes() / 10) * 10\n        if (unit === 'hours') {\n            newDate.setHours(newDate.getHours() + amount, flooredMinutes, 0, 0)\n        } else if (unit === 'minutes') {\n            newDate.setHours(newDate.getHours(), flooredMinutes + amount, 0, 0)\n        }\n        setActiveHourIndex(newDate)\n        if (!realtime) {\n            updateChart(mappedDataRef.current, newDate)\n        }\n    }\n\n    const handleToggle = () => {\n        setIsAuto((prev) => !prev)\n    }\n\n    const handleSetPage = (page: \"chart\" | \"table\" | \"table-ool\", realtime: boolean) => {\n        // set state\n        setViewMode(page);\n        setRealtime(realtime);\n\n        // reset everything\n        setSortedCols(null);\n        setSortedColsType(\"ascending\")\n        setTableDataRealtimeFilter({})\n\n        // update chart\n        if (page == \"chart\") {\n            if (realtime) {\n                const map = splitDataToMap(tableDataRealtime)\n                updateChartRealtime(map, activeHourIndex)\n            } else {\n                updateChart(mappedDataRef.current, activeHourIndex)\n            }\n        }\n    }\n\n    // excel\n    const generateExcelRealtime = () => {\n        if (tableDataRealtime.length == 0) { return contextShowAlertFunc(new AlertEntity({ message: \"NO DATA!\", level: 3 })); }\n\n        const column = [\n            \"timestamp\", \"pressure\", \"pressure_min_warn\",\n            \"pressure_max_warn\", \"pressure_min_alarm\", \"pressure_max_alarm\"\n        ]\n        let values: { [key: string]: string }[] = []\n        for (let i = 0; i < tableDataRealtime.length; i++) {\n            values.push({\n                timestamp: format(\n                    typeof tableDataRealtime[i].timestamp === \"string\"\n                        ? new Date(tableDataRealtime[i].timestamp)\n                        : tableDataRealtime[i].timestamp,\n                    \"yyyy-MM-dd HH:mm:ss\"\n                ),\n                pressure: `${tableDataRealtime[i].pressure}`,\n                pressure_min_warn: `${tableDataRealtime[i].pressure_min_warn ?? \"\"}`,\n                pressure_max_warn: `${tableDataRealtime[i].pressure_max_warn ?? \"\"}`,\n                pressure_min_alarm: `${tableDataRealtime[i].pressure_min_alarm ?? \"\"}`,\n                pressure_max_alarm: `${tableDataRealtime[i].pressure_max_alarm ?? \"\"}`,\n            })\n        }\n\n        ExcelUtils.export(`Pressure Data Realtime`, column, values)\n    }\n    const generateExcel = () => {\n        if (tableData.length == 0) { return contextShowAlertFunc(new AlertEntity({ message: \"NO DATA!\", level: 3 })); }\n\n        const column = [\n            \"timestamp\", \"pressure\", \"pressure_min_warn\",\n            \"pressure_max_warn\", \"pressure_min_alarm\", \"pressure_max_alarm\"\n        ]\n        let values: { [key: string]: string }[] = []\n        for (let i = 0; i < tableData.length; i++) {\n            values.push({\n                timestamp: format(\n                    typeof tableData[i].timestamp === \"string\"\n                        ? new Date(tableData[i].timestamp)\n                        : tableData[i].timestamp,\n                    \"yyyy-MM-dd HH:mm:ss\"\n                ),\n                pressure: `${tableData[i].pressure}`,\n                pressure_min_warn: `${tableData[i].pressure_min_warn ?? \"\"}`,\n                pressure_max_warn: `${tableData[i].pressure_max_warn ?? \"\"}`,\n                pressure_min_alarm: `${tableData[i].pressure_min_alarm ?? \"\"}`,\n                pressure_max_alarm: `${tableData[i].pressure_max_alarm ?? \"\"}`,\n            })\n        }\n\n        ExcelUtils.export(`Pressure Data`, column, values)\n    }\n\n    useEffect(() => {\n        if (realtime) {\n            setHandleGenerateExcel(() => generateExcelRealtime)\n        } else {\n            setHandleGenerateExcel(() => generateExcel)\n        }\n\n        return () => {\n            setHandleGenerateExcel(null)\n        }\n    }, [realtime, tableDataRealtime, tableData])\n\n    return <>\n        <div className={styles.cardBodyHeader}>\n\n            {viewMode === 'chart' && realtime && (\n                <>\n                    <div className={styles.headerChart}>\n                        <div></div>\n                        <div className={styles.titleChart}>{titleChart}</div>\n                        <div className={styles.chartButtons} style={{ justifyContent: \"end\" }}>\n                            <button onClick={() => setChartSplit(\"hour\")} className={chartSplit === \"hour\" ? styles.activeBtn : \"\"}>\n                                Hour\n                            </button>\n                            <button onClick={() => setChartSplit(\"minutes_10\")} className={chartSplit === \"minutes_10\" ? styles.activeBtn : \"\"}>\n                                Minute\n                            </button>\n                            <button onClick={() => setChartSplit(\"all\")} className={chartSplit === \"all\" ? styles.activeBtn : \"\"}>\n                                All\n                            </button>\n                        </div>\n                    </div>\n                    <div className={styles.bodyChart}>\n                        <button className={styles.buttonChart1} style={{ borderRadius: '12px 0 0 12px' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(-1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(-10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleLeft /></button>\n                        <div className={styles.wrapperChart}>\n                            <Line data={chartDataRealtime} options={chartOptionsRealtime} plugins={[statusAreaRealtime]} />\n                        </div>\n                        <button className={styles.buttonChart2} style={{ borderRadius: '0 0 12px 0' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleRight /></button>\n                    </div>\n                </>\n            )}\n            {viewMode === 'table' && realtime && (\n                <>\n                    <div style={{ flex: 1, overflowY: \"auto\" }} className=\"ordering-table\">\n                        <table className=\"tableclickcell\">\n                            <thead>\n                                <tr>\n                                    <th>No</th>\n                                    <th>\n                                        {headerTableRealtime(\"timestamp\", \"Waktu\")}\n                                        {filterTableRealtime(\"timestamp\", \"Waktu\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"pressure\", \"Pressure\")}\n                                        {filterTableRealtime(\"pressure\", \"Pressure\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"pressure_max_alarm\", \"Pressure Max Alarm\")}\n                                        {filterTableRealtime(\"pressure_max_alarm\", \"Pressure Max Alarm\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"pressure_max_warn\", \"Pressure Max Warn\")}\n                                        {filterTableRealtime(\"pressure_max_warn\", \"Pressure Max Warn\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"pressure_min_alarm\", \"Pressure Min Alarm\")}\n                                        {filterTableRealtime(\"pressure_min_alarm\", \"Pressure Min Alarm\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"pressure_min_warn\", \"Pressure Min Warn\")}\n                                        {filterTableRealtime(\"pressure_min_warn\", \"Pressure Min Warn\")}\n                                    </th>\n                                </tr>\n                            </thead>\n                            {!filterUtils.FastIsEmpty(tableDataRealtime)\n                                ? <tbody>\n                                    <TableObserved\n                                        tableData={tableDataRealtime}\n                                        rowFunction={pressureDataRows}\n                                        rowsCount={250}\n                                        rowsIncrement={50}\n                                    />\n                                </tbody>\n                                : <tbody><tr><td colSpan={1000}>No Data Available Yet !</td></tr></tbody>\n                            }\n                        </table>\n                    </div>\n                </>\n            )}\n\n            {viewMode === 'chart' && !realtime && (\n                <>\n                    <div className={styles.headerChart}>\n                        <div></div>\n                        <div className={styles.titleChart}>{titleChart}</div>\n                        <div className={styles.chartButtons} style={{ justifyContent: \"end\" }}>\n                            <button onClick={() => setChartSplit(\"hour\")} className={chartSplit === \"hour\" ? styles.activeBtn : \"\"}>\n                                Hour\n                            </button>\n                            <button onClick={() => setChartSplit(\"minutes_10\")} className={chartSplit === \"minutes_10\" ? styles.activeBtn : \"\"}>\n                                Minute\n                            </button>\n                            <button onClick={() => setChartSplit(\"all\")} className={chartSplit === \"all\" ? styles.activeBtn : \"\"}>\n                                All\n                            </button>\n                        </div>\n                    </div>\n                    <div className={styles.bodyChart}>\n                        <button className={styles.buttonChart1} style={{ borderRadius: '12px 0 0 12px' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(-1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(-10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleLeft /></button>\n                        <div className={styles.wrapperChart}>\n                            <Line data={chartData} options={chartOptions} plugins={[statusArea]} />\n                        </div>\n                        <button className={styles.buttonChart2} style={{ borderRadius: '0 0 12px 0' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleRight /></button>\n                    </div>\n                </>\n            )}\n            {viewMode === 'table' && !realtime && (\n                <>\n                    <div style={{ flex: 1, overflowY: \"auto\" }} className=\"ordering-table\">\n                        <table className=\"tableclickcell\">\n                            <thead>\n                                <tr>\n                                    <th>No</th>\n                                    <th>\n                                        {headerTable(\"timestamp\", \"Waktu\")}\n                                        {filterTable(\"timestamp\", \"Waktu\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"pressure\", \"Pressure\")}\n                                        {filterTable(\"pressure\", \"Pressure\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"pressure_max_alarm\", \"Pressure Max Alarm\")}\n                                        {filterTable(\"pressure_max_alarm\", \"Pressure Max Alarm\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"pressure_max_warn\", \"Pressure Max Warn\")}\n                                        {filterTable(\"pressure_max_warn\", \"Pressure Max Warn\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"pressure_min_alarm\", \"Pressure Min Alarm\")}\n                                        {filterTable(\"pressure_min_alarm\", \"Pressure Min Alarm\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"pressure_min_warn\", \"Pressure Min Warn\")}\n                                        {filterTable(\"pressure_min_warn\", \"Pressure Min Warn\")}\n                                    </th>\n                                </tr>\n                            </thead>\n                            {!filterUtils.FastIsEmpty(tableData)\n                                ? <tbody>\n                                    <TableObserved\n                                        tableData={tableData}\n                                        rowFunction={pressureDataRows}\n                                        rowsCount={250}\n                                        rowsIncrement={50}\n                                    />\n                                </tbody>\n                                : <tbody><tr><td colSpan={1000}>No Data Available Yet !</td></tr></tbody>\n                            }\n                        </table>\n                    </div>\n                </>\n            )}\n\n        </div>\n\n        <div className={styles.cardBodyFooter}>\n            <div className={styles.footerLeft}>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'chart' && realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('chart', true) }}>\n                    <GrLineChart />\n                    <span className={styles.tooltipText}>Realtime Chart</span>\n                </button>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'table' && realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('table', true) }}>\n                    <TbTable />\n                    <span className={styles.tooltipText}>Realtime Table</span>\n                </button>\n            </div>\n            <div className={styles.footerMid}>\n                {viewMode === 'chart' && realtime && (\n                    <div className={styles.switchGroup}>\n                        <label htmlFor=\"auto\">Auto</label>\n                        <label className={styles.switch}>\n                            <input type=\"checkbox\" id=\"auto\" checked={isAuto} onChange={handleToggle} />\n                            <span className={styles.slider}></span>\n                        </label>\n                    </div>\n                )}\n            </div>\n            <div className={styles.footerRight}>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'chart' && !realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('chart', false) }}>\n                    <FaChartLine />\n                    <span className={styles.tooltipText}>Chart</span>\n                </button>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'table' && !realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('table', false) }}>\n                    <FaTable />\n                    <span className={styles.tooltipText}>Table</span>\n                </button>\n            </div>\n        </div>\n    </>\n}\n\nexport default PressurePage\n"],"names":["export","export_name","column","values","workbook","ExcelJS","worksheet","addWorksheet","numberToLetter","number","map","key","index","getColumn","width","getCell","value","String","toUpperCase","style","fill","type","pattern","fgColor","argb","font","bold","alignment","vertical","horizontal","border","top","color","left","right","bottom","val","row","push","addRow","eachCell","cell","xlsx","writeBuffer","then","buffer","blob","Blob","link","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","import","data","load","book","eachSheet","sheet","eachRow","length","result","i","obj","j","_sheet$i$j","Date","toLowerCase","format","DashboardService","GetDashboardLevel1","start_date","end_date","resp","FetchUtils","fetchAuth","BASE_URL","encodeURIComponent","status","Error","Array","isArray","machine_ool_pressure","machine_ool_vibration","business_unit_id","business_unit","business_unit_warn","business_unit_alarm","ool_pressure","ool_vibration","ool_temperature","sensor_vibration_connected","sensor_vibration_total","sensor_pressure_connected","sensor_pressure_total","GetDashboardLevel2","link_up_id","link_up","link_up_warn","link_up_alarm","GetDashboardLevel3","machine_id","machine","machine_warn","machine_alarm","machine_type","GetDashboardLevel4Pressure","message","rawData","pressure","pressure_max_alarm","pressure_max_warn","pressure_min_alarm","pressure_min_warn","timestamp","GetDashboardLevel4Vibration","x","x_base","x_warn","x_alarm","z","z_base","z_warn","z_alarm","x_acc","x_acc_base","x_acc_warn","x_acc_alarm","z_acc","z_acc_base","z_acc_warn","z_acc_alarm","temp","temp_warn","temp_alarm","DashboardRealtimeService","mergedArray","concat","from","Set","FilterUtils","FilterTable","tableDataFilter","keys","Object","indexKey","undefined","toString","includes","SortingTable","a","b","sortChoosed","localeCompare","FastIsEmpty","arr","_","MultipleObserver","props","onVisible","content","ref","useInView","threshold","triggerOnce","initialInView","onChange","inView","entry","_jsx","children","TableObserved","tableData","rowFunction","onRowClick","rowsCount","rowsIncrement","ROWS_MAX_COUNT","ROWS_INCREMENT","limit","setLimit","useState","useMemo","elements","_jsxs","_Fragment","prev","setTimeout","_document$getElementB","getElementById","scrollIntoView","_document$getElementB2","id","whiteSpace","onClick","colSpan","useEffect","ChartJS","register","LineElement","PointElement","LinearScale","Title","CategoryScale","Tooltip","Legend","defaults","maintainAspectRatio","responsive","_ref","realtime","setRealtime","refresh","setHandleGenerateExcel","context","useContext","AppContext","contextShowAlertFunc","contextAccessToken","contextShowLoadingFunc","machineId","stateShowLoading","useParams","CHART_COLORS","activeHourIndex","setActiveHourIndex","isAuto","setIsAuto","chartSplit","setChartSplit","viewMode","setViewMode","sortedCols","setSortedCols","sortedColsType","setSortedColsType","setTableData","tableDataCache","setTableDataCache","mappedDataRef","useRef","setTableDataFilter","chartData","setChartData","labels","datasets","chartOptions","setChartOptions","firstData","pressureSocket","reconnectPressure","tableDataRealtime","setTableDataRealtime","tableDataRealtimeCache","setTableDataRealtimeCache","tableDataRealtimeFilter","setTableDataRealtimeFilter","chartDataRealtime","setChartDataRealtime","chartOptionsRealtime","setChartOptionsRealtime","firstDataRealtime","splitDataToMap","toReversed","forEach","item","date","rounded","setMinutes","Math","floor","getMinutes","setSeconds","setMilliseconds","statusArea","beforeDatasetsDraw","chart","_pressureData$pressur","_pressureData$pressur2","_pressureData$pressur3","_pressureData$pressur4","_pressureData$pressur5","_pressureData$pressur6","_pressureData$pressur7","_pressureData$pressur8","pressureData","current","ctx","chartArea","scales","y","save","startMinAlarm","min","endMinAlarm","startMinAlarmPixel","getPixelForValue","endMinAlarmPixel","fillStyle","fillRect","abs","startMaxAlarm","endMaxAlarm","max","startMaxAlarmPixel","endMaxAlarmPixel","startNormalArea","endNormalArea","startNormalAreaPixel","endNormalAreaPixel","startMinWarn","endMinWarn","startMinWarnPixel","endMinWarnPixel","startMaxWarn","endMaxWarn","startMaxWarnPixel","endMaxWarnPixel","restore","updateChart","mapData","_mapData$key","flooredMinutes","groupData","newLabels","msg","newData","reversedData","dataMin","dataMax","range","customMin","customMax","label","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","borderWidth","pointRadius","animation","duration","easing","plugins","legend","position","size","weight","family","usePointStyle","pointStyle","tooltip","backgroundColor","titleColor","bodyColor","padding","cornerRadius","titleFont","bodyFont","grid","ticks","maxRotation","minRotation","layout","line","borderJoinStyle","point","filterTable","columnnName","_tableDataFilter$colu","fontSize","marginTop","placeholder","event","target","headerTable","columnName","display","flexDirection","justifyContent","gap","cursor","alignItems","justifyItems","FaSortUp","margin","height","FaSortDown","pressureDataRows","valueColor","valueWeight","handleFilterAndSort","table_filtered","filter","filterUtils","sort","async","withLoading","Number","formatDate","newDate","error","AlertEntity","level","generateData","statusAreaRealtime","_pressureData$pressur9","_pressureData$pressur0","_pressureData$pressur1","_pressureData$pressur10","_pressureData$pressur11","_pressureData$pressur12","_pressureData$pressur13","_pressureData$pressur14","updateChartRealtime","_mapData$key2","filterTableRealtime","_tableDataRealtimeFil","headerTableRealtime","connectPressure","Promise","resolve","reject","WebSocket","onmessage","response","JSON","parse","console","log","onerror","err","_pressureSocket","close","onclose","onopen","_pressureSocket2","machineIdPayload","send","stringify","readyState","CLOSED","handleFilterAndSortRealtime","titleChart","handleChangeActiveHourIndex","amount","unit","setHours","getHours","handleSetPage","page","generateExcelRealtime","_tableDataRealtime$i$","_tableDataRealtime$i$2","_tableDataRealtime$i$3","_tableDataRealtime$i$4","ExcelUtils","generateExcel","_tableData$i$pressure","_tableData$i$pressure2","_tableData$i$pressure3","_tableData$i$pressure4","className","styles","cardBodyHeader","headerChart","chartButtons","activeBtn","bodyChart","buttonChart1","borderRadius","FaAngleLeft","wrapperChart","Line","options","buttonChart2","FaAngleRight","flex","overflowY","cardBodyFooter","footerLeft","buttonFooter","active","GrLineChart","tooltipText","TbTable","footerMid","switchGroup","htmlFor","switch","checked","handleToggle","slider","footerRight","FaChartLine","FaTable"],"sourceRoot":""}