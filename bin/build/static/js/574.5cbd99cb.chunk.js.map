{"version":3,"file":"static/js/574.5cbd99cb.chunk.js","mappings":"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","sources":["features/Dashboard/DashboardLevel3/DashboardLevel3Safety.tsx","components/Gauge/Gauge.tsx","services/safety.ts"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\"\nimport AppContext from \"../../../context\"\nimport { useNavigate, useLocation, useParams } from \"react-router-dom\"\nimport { AlertEntity } from \"../../../layouts/Alert/AlertEntity\"\nimport styles from './DashboardLevel3.module.css'\nimport { formatDate } from \"date-fns\"\nimport sensorImage from \"../../../assets/images/production_image.png\"\nimport { SafetyService, DashboardSafetyService } from \"../../../services/safety\"\nimport { SafetyEntity, DashboardSafetyLevel3 } from \"../../../entities/SafetyEntity\"\nimport Gauge from \"../../../components/Gauge/Gauge\"\nimport { FaRegCircleCheck } from \"react-icons/fa6\"\nimport { MdOutlineCancel } from \"react-icons/md\"\nimport noDataImg from '../../../assets/images/no_data_image.png'\n\ninterface FilterType {\n    start_date: Date\n    end_date: Date\n}\n\ninterface DashboardLevel3SafetyPageProps {\n    realtime: boolean\n    refresh: number\n    filterDate: FilterType\n    onFilterDateChange: (newFilter: FilterType) => void\n}\n\nconst DashboardLevel3SafetyPage: React.FC<DashboardLevel3SafetyPageProps> = ({ realtime, refresh, filterDate, onFilterDateChange }) => {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextVersion = context.version\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    const navigate = useNavigate()\n    const location = useLocation()\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n\n    // ========================================= STATE VIEW =========================================  //\n    const { linkUpId } = useParams()\n    const { link_up } = location.state || {}\n\n    const [machineSafetyData, setMachineSafetyData] = useState<{ [type: string]: SafetyEntity[] }>({})\n    const [tableDataSafety, setTableDataSafety] = useState<{ [id: string]: DashboardSafetyLevel3 | undefined }>({})\n\n    interface DashboardLevel2State {\n        link_up_id: number\n        link_up: string\n\n        safety_green: number\n        safety_yellow: number\n        safety_red: number\n\n        machine_ool: number[]\n    }\n\n    const [level2Data, setLevel2Data] = useState<{ [type: string]: DashboardLevel2State }>({})\n    // ========================================= STATE VIEW =========================================  //\n\n\n    // ========================================= FUNCTIONS =========================================  //\n    const generateDataMachineSafety = async () => {\n        if (Object.keys(machineSafetyData).length == 0) { contextShowLoadingFunc(true) }\n        try {\n            const resp = await SafetyService.GetAllSafety(linkUpId)\n\n            const data: { [type: string]: SafetyEntity[] } = {}\n            for (let i = 0; i < resp.length; i++) {\n                if (data[resp[i].safety_tipe] == undefined) {\n                    data[resp[i].safety_tipe] = []\n                }\n                data[resp[i].safety_tipe].push(resp[i])\n            }\n\n            setMachineSafetyData(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, }))\n        } finally {\n            if (Object.keys(machineSafetyData).length == 0) { contextShowLoadingFunc(false) }\n        }\n    }\n\n    const generateDataSafety = async () => {\n        try {\n            if (linkUpId) {\n                let resp: DashboardSafetyLevel3[] = []\n                if (realtime) {\n                    resp = await DashboardSafetyService.DashboardLevel3Realtime(Number(linkUpId))\n\n                    onFilterDateChange({ start_date: new Date(), end_date: new Date() })\n                    localStorage.removeItem(\"cache\")\n                } else {\n                    const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                    const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                    resp = await DashboardSafetyService.DashboardLevel3(start_date, end_date, Number(linkUpId))\n                    localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, realtime }))\n                }\n\n                const data: { [id: string]: DashboardSafetyLevel3 } = {}\n                const newLevel2ByType: { [type: string]: DashboardLevel2State } = {}\n                for (let i = 0; i < resp.length; i++) {\n                    const row = resp[i]\n                    data[`${row.safety_id}`] = row\n\n                    const machine = Object.values(machineSafetyData).flat().find(m => m.safety_id === row.safety_id)\n                    if (!machine) continue\n\n                    const machineType = machine.safety_tipe\n\n                    if (!newLevel2ByType[machineType]) {\n                        newLevel2ByType[machineType] = {\n                            link_up_id: link_up.link_up_id,\n                            link_up: link_up.link_up,\n                            safety_green: 0,\n                            safety_yellow: 0,\n                            safety_red: 0,\n                            machine_ool: [],\n                        }\n                    }\n\n                    newLevel2ByType[machineType].safety_green += row.safety_green\n                    newLevel2ByType[machineType].safety_yellow += row.safety_yellow\n                    newLevel2ByType[machineType].safety_red += row.safety_red\n\n                    if (row.safety_red > 0) {\n                        newLevel2ByType[machineType].machine_ool.push(machine.safety_id)\n                    }\n                }\n\n                for (const type in newLevel2ByType) {\n                    newLevel2ByType[type].machine_ool = Array.from(new Set(newLevel2ByType[type].machine_ool))\n                }\n\n                setLevel2Data(newLevel2ByType)\n                setTableDataSafety(data)\n            }\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3 }))\n        }\n    }\n\n    const generateData = async () => {\n        if (realtime) {\n            if (contextVersion.safety != undefined) { await generateDataSafety() }\n        } else {\n            resetAllData()\n            contextShowLoadingFunc(true)\n            // langsung tampilkan ketika udah ada yg selesai satu\n            const promise = []\n            if (contextVersion.safety != undefined) { promise.push(generateDataSafety()) }\n            try { await Promise.any(promise) } catch { }\n            contextShowLoadingFunc(false)\n        }\n    }\n\n    const resetAllData = () => {\n        setLevel2Data((prev) => {\n            const reset: typeof prev = {}\n            for (const type in prev) {\n                reset[type] = {\n                    ...prev[type],\n                    safety_green: 0,\n                    safety_yellow: 0,\n                    safety_red: 0,\n                    machine_ool: [],\n                }\n            }\n            return reset\n        })\n        setTableDataSafety({})\n    }\n\n    useEffect(() => {\n        if (Object.keys(machineSafetyData).length > 0) {\n            generateData()\n            if (realtime) {\n                let timeout: NodeJS.Timeout | null = null\n                const refreshfunc = () => {\n                    timeout = setTimeout(async () => { await generateData(); refreshfunc() }, 3000)\n                }\n                refreshfunc()\n                return () => {\n                    if (timeout != null) { clearTimeout(timeout) }\n                }\n            }\n        }\n    }, [contextAccessToken, realtime, linkUpId, machineSafetyData, refresh])\n\n    // generate once\n    useEffect(() => {\n        generateDataMachineSafety()\n    }, [])\n    // ========================================= FUNCTIONS =========================================  //\n\n    if (Object.keys(machineSafetyData).length === 0) {\n        return (\n            <div className={styles.noData}>\n                <div className=\"flex flex-col items-center justify-center text-gray-400\">\n                    <img src={noDataImg} alt=\"no_data_img\" width={140} height={140} />\n                    <p className=\"mt-2 text-xl font-medium\">No Data Available</p>\n                </div>\n            </div>\n        )\n    }\n\n    return <div\n        className={styles.cardWrapper}\n        style={{\n            gridTemplateColumns: Object.keys(machineSafetyData).length === 1 ? '1fr' : 'repeat(2, 1fr)',\n            gridAutoRows: Object.keys(machineSafetyData).length <= 2 ? '1fr' : undefined\n        }}\n    >\n        {Object.keys(machineSafetyData).map((val) => {\n            const row = machineSafetyData[val]\n            return < div className={styles.cardParent} key={val} >\n\n                <div className={styles.cardParentHeader}>\n                    <div className={styles.titleHeader}>\n                        {val} Overall\n                    </div>\n\n                    <div className={styles.bodyHeader}>\n                        <div className={styles.bodyHeaderLeft}>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Total Machine OOL</div>\n                                <div className={styles.oolNumber}>{level2Data[val]?.machine_ool?.length ?? 0}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Safety OK</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberNormal}`}>{level2Data[val]?.safety_green}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Safety OOL</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberAlarm}`}>{level2Data[val]?.safety_red}</div>\n                            </div>\n                            {/* <div className={styles.itemHeaderLeft}>\n                                <div>Safety Normal</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberNormal}`}>{level2Data[val]?.safety_green}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Safety Warning</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberWarning}`}>{level2Data[val]?.safety_yellow}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Safety Alarm</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberAlarm}`}>{level2Data[val]?.safety_red}</div>\n                            </div> */}\n                        </div>\n\n                        <div className={styles.bodyHeaderRight}>\n                            <div className={styles.imgWrapper}>\n                                <img src={sensorImage} alt=\"safety image\" className={styles.imgHeader} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className={styles.cardParentBodyWrapper}>\n                    <div className={styles.cardParentBody} style={{ gridTemplateColumns: Object.keys(machineSafetyData).length > 1 ? \"repeat(2, 1fr)\" : \"repeat(4, 1fr)\" }}>\n                        {row.map((m) => {\n                            const data = tableDataSafety[`${m.safety_id}`]\n\n                            return <div key={m.safety_id} className={styles.gridItemCenter}\n                                onClick={() => navigate(`/dashboard/l4/${m.safety_id}`, {\n                                    state: {\n                                        dashboard_type: \"safety\",\n                                        machine: m.parameter_name,\n                                    },\n                                })}>\n\n                                {data && (\n                                    <>\n                                        <div className={styles.gridCenterHeader}>\n                                            <h3>{data.parameter_name}</h3>\n                                            <p>{realtime ? formatDate(data.last_safety_data.created_at, \"HH:mm:ss\") : formatDate(data.last_safety_data.created_at, \"yyyy-MM-dd HH:mm:ss\")}</p>\n                                        </div>\n                                        <div className={styles.gridCenterContent}>\n                                            {m.safety_display_type == 'gauge'\n                                                ? <>\n                                                    <div className={styles.warningAlarm}>\n                                                        <div className={styles.alarmColorBox}>{data.last_safety_data.alarm_limit_bottom ?? \"-\"}</div>\n                                                        {data && data.last_safety_data.alarm_limit_bottom != data.last_safety_data.warning_limit_bottom && (\n                                                            <div className={styles.warnColorBox}>{data.last_safety_data.warning_limit_bottom ?? \"-\"}</div>\n                                                        )}\n                                                        {data && data.last_safety_data.alarm_limit != data.last_safety_data.warning_limit && (\n                                                            <div className={styles.warnColorBox}>{data.last_safety_data.warning_limit ?? \"-\"}</div>\n                                                        )}\n                                                        <div className={styles.alarmColorBox}>{data.last_safety_data.alarm_limit ?? \"-\"}</div>\n                                                    </div>\n                                                    <div className={styles.gaugeContent}>\n                                                        <Gauge\n                                                            value={data.last_safety_data.value}\n                                                            topLimitWarn={data.last_safety_data.warning_limit}\n                                                            topLimitAlarm={data.last_safety_data.alarm_limit}\n                                                            bottomLimitWarn={data.last_safety_data.warning_limit_bottom}\n                                                            bottomLimitAlarm={data.last_safety_data.alarm_limit_bottom}\n                                                            height={220}\n                                                            width={220}\n                                                            unit={m.safety_unit}\n                                                        />\n                                                    </div>\n                                                </>\n                                                : <>\n                                                    <div className={`${styles.booleanContent} ${data.last_safety_data.value == 1 ? '' : styles.notOk}`}>\n                                                        <div className={styles.booleanLeft}>\n                                                            <h2>Status</h2>\n                                                            <h2>{data.last_safety_data.value == 1 ? 'OK' : 'Not OK'}</h2>\n                                                        </div>\n                                                        <div className={styles.booleanRight}>\n                                                            <div className={styles.booleanStatus}>\n                                                                {data.last_safety_data.value == 1 ? <FaRegCircleCheck size={25} /> : <MdOutlineCancel size={25} />}\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </>}\n                                        </div>\n                                    </>\n                                )}\n                            </div>\n                        })}\n                    </div>\n                </div>\n\n            </div>\n        })}\n    </div>\n}\n\nexport default DashboardLevel3SafetyPage","import React, { useMemo } from 'react'\nimport ReactSpeedometer from 'react-d3-speedometer'\n\ninterface GaugeProps {\n    value: number\n    topLimitWarn?: number\n    topLimitAlarm?: number\n    bottomLimitWarn?: number\n    bottomLimitAlarm?: number\n    minValue?: number\n    maxValue?: number\n    needleColor?: string\n    segmentColors?: string[]\n    segments?: number\n    width?: number | string\n    height?: number | string\n    unit?: string\n}\n\nconst Gauge: React.FC<GaugeProps> = ({\n    value,\n    topLimitWarn,\n    topLimitAlarm,\n    bottomLimitWarn,\n    bottomLimitAlarm,\n    minValue,\n    maxValue,\n    needleColor = '#2e2e2e',\n    segmentColors = ['#118a7e'],\n    segments = 3,\n    width = '100%',\n    height = '100%',\n    unit = '',\n}) => {\n\n    const computedLimits = useMemo(() => {\n        const values = []\n        if (topLimitWarn != undefined) values.push(topLimitWarn)\n        if (topLimitAlarm != undefined) values.push(topLimitAlarm)\n        if (bottomLimitWarn != undefined) values.push(bottomLimitWarn)\n        if (bottomLimitAlarm != undefined) values.push(bottomLimitAlarm)\n\n        const rawMax = values.length == 0 ? 100 : Math.max(...values)\n        const rawMin = values.length == 0 ? 0 : Math.min(...values)\n\n        const delta = rawMax * 0.25\n\n        const autoMax = rawMax + delta\n        const autoMin = rawMin - delta\n\n        return {\n            min: minValue != undefined ? minValue : autoMin,\n            max: maxValue != undefined ? maxValue : autoMax,\n        }\n    }, [topLimitWarn, topLimitAlarm, bottomLimitWarn, bottomLimitAlarm, minValue, maxValue])\n\n    const { computedStops, computedSegmentColors } = useMemo(() => {\n        const stops: number[] = []\n        const colors: string[] = []\n\n        if (\n            bottomLimitAlarm != undefined &&\n            bottomLimitWarn != undefined &&\n            topLimitWarn != undefined &&\n            topLimitAlarm != undefined\n        ) {\n            stops.push(\n                computedLimits.min,\n                bottomLimitAlarm,\n                bottomLimitWarn,\n                topLimitWarn,\n                topLimitAlarm,\n                computedLimits.max\n            )\n\n            colors.push(\n                '#9f1e49',\n                '#ca9257',\n                '#118a7e',\n                '#ca9257',\n                '#9f1e49'\n            )\n\n            const sortedStops = [...stops].sort((a, b) => a - b)\n            return {\n                computedStops: sortedStops,\n                computedSegmentColors: colors,\n            }\n        }\n\n        return {\n            computedStops: undefined,\n            computedSegmentColors: segmentColors,\n        }\n    }, [\n        bottomLimitAlarm,\n        bottomLimitWarn,\n        topLimitWarn,\n        topLimitAlarm,\n        computedLimits.min,\n        computedLimits.max,\n        segmentColors,\n    ])\n\n    const gaugeKey = useMemo(() => {\n        return [\n            computedStops?.join(','),\n            computedLimits.min,\n            computedLimits.max,\n            computedSegmentColors.join(','),\n            segments,\n        ].join('|')\n    }, [computedStops, computedLimits.min, computedLimits.max, computedSegmentColors, segments])\n\n    const memoizedGauge = useMemo(() => (\n        <ReactSpeedometer\n            key={gaugeKey}\n            value={value > computedLimits.max ? computedLimits.max : value < computedLimits.min ? computedLimits.min : value}\n            minValue={computedLimits.min}\n            maxValue={computedLimits.max}\n            needleColor={needleColor}\n            segmentColors={computedSegmentColors}\n            customSegmentStops={computedStops}\n            segments={computedStops ? computedStops.length - 1 : segments}\n            textColor=\"white\"\n            width={typeof width === 'string' ? 250 : width}\n            height={typeof height === 'string' ? 200 : height}\n            currentValueText={`${value}  ${unit}`}\n        />\n    ), [\n        value,\n        computedLimits.min,\n        computedLimits.max,\n        needleColor,\n        computedSegmentColors,\n        computedStops?.join(','),\n        segments,\n        width,\n        height,\n        gaugeKey,\n        unit\n    ])\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                color: 'red',\n                height: '100%',\n                width: '100%',\n            }}\n        >\n            {memoizedGauge}\n        </div>\n    )\n}\n\nexport default Gauge\n","import { BASE_URL } from \"../constants\"\nimport { BusinessUnitConfigSafety, SafetyData, SafetyEntity, SafetyInsertEntity, SafetyUpdateEntity, DashboardSafetyLevel1, DashboardSafetyLevel2, DashboardSafetyLevel3, FormBusinessUnitSafety, FormLinkupSafety, LinkUpConfigSafety, } from \"../entities/SafetyEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\n// TODO unimplemented\n// \"/api/extension/safety/v1/data\"  GetRawSafetyDataController\n\n\nclass SafetyService {\n    static async GetAllSafety(link_up_id?: string): Promise<SafetyEntity[]> {\n\n        let uri = `${BASE_URL}/api/extension/safety/v1`\n        if (link_up_id != null) {\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: SafetyEntity[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].safety_id != \"number\") { throw new Error(\"invalid safety_id value\") }\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid parameter_name value\") }\n            if (typeof data[i].safety_tipe != \"string\") { throw new Error(\"invalid safety_tipe value\") }\n            if (data[i].safety_warn != undefined && typeof data[i].safety_warn != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (data[i].safety_alarm != undefined && typeof data[i].safety_alarm != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n            if (data[i].safety_bottom_warn != undefined && typeof data[i].safety_bottom_warn != \"number\") { throw new Error(\"invalid safety_bottom_warn value\") }\n            if (data[i].safety_bottom_alarm != undefined && typeof data[i].safety_bottom_alarm != \"number\") { throw new Error(\"invalid safety_bottom_alarm value\") }\n            if (typeof data[i].safety_display_type != \"string\") { throw new Error(\"invalid safety_display_type value\") }\n            if (typeof data[i].safety_unit != \"string\") { throw new Error(\"invalid safety_unit value\") }\n        }\n\n        return data\n    }\n\n    static async AddSafety(data: SafetyInsertEntity): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1`,\n            {\n                method: 'POST',\n                body: JSON.stringify({ ...data }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async UpdateSafety(safety_id: number, fields: SafetyUpdateEntity): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1`,\n            {\n                method: 'PATCH',\n                body: JSON.stringify({ safety_id, fields }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async DeleteSafety(safety_id: number): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1`,\n            {\n                method: 'DELETE',\n                body: JSON.stringify({ safety_id }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async GetLinkUpConfig(link_up_id?: number): Promise<LinkUpConfigSafety[]> {\n        let uri = `${BASE_URL}/api/extension/safety/v1/linkup`\n        if (link_up_id != null) {\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid link up config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof (row.safety_warn ?? 0) != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (typeof (row.safety_alarm ?? 0) != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertLinkupConfig(link_up_id: number, fields: FormLinkupSafety): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1/linkup`, {\n            method: 'PATCH',\n            body: JSON.stringify({ link_up_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async GetBusinessUnitConfig(business_unit_id?: number): Promise<BusinessUnitConfigSafety[]> {\n        let uri = `${BASE_URL}/api/extension/safety/v1/business`\n        if (business_unit_id != null) {\n            uri += `?business_unit_id=${business_unit_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid link up config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof (row.safety_warn ?? 0) != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (typeof (row.safety_alarm ?? 0) != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertBusinessUnitConfig(business_unit_id: number, fields: FormBusinessUnitSafety): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1/business`, {\n            method: 'PATCH',\n            body: JSON.stringify({ business_unit_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n}\n\nclass DashboardSafetyService {\n    static async DashboardLevel1(start_date: string, end_date: string): Promise<DashboardSafetyLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/safety/v1/l1?start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].safety_id_ool)) { throw new Error(\"invalid safety_id_ool value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n            if (data[i].safety_warn != undefined && typeof data[i].safety_warn != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (data[i].safety_alarm != undefined && typeof data[i].safety_alarm != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2(start_date: string, end_date: string, business_unit_id: number): Promise<DashboardSafetyLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/safety/v1/l2?business_unit_id=${business_unit_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].safety_id_ool)) { throw new Error(\"invalid safety_id_ool value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n            if (data[i].safety_warn != undefined && typeof data[i].safety_warn != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (data[i].safety_alarm != undefined && typeof data[i].safety_alarm != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3(start_date: string, end_date: string, link_up_id: number): Promise<DashboardSafetyLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/safety/v1/l3?link_up_id=${link_up_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].safety_id != \"number\") { throw new Error(\"invalid dashboard safety_id value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid dashboard parameter_name value\") }\n            if (typeof data[i].safety_tipe != \"string\") { throw new Error(\"invalid dashboard safety_tipe value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n\n            if (!data[i].last_safety_data) { throw new Error(\"missing last_safety_data\") }\n            if (typeof data[i].last_safety_data.safety_id !== \"number\") { throw new Error(\"invalid last_safety_data.safety_id\") }\n            if (typeof data[i].last_safety_data.value !== \"number\") { throw new Error(\"invalid last_safety_data.value\") }\n            if (data[i].last_safety_data.warning_limit != undefined && typeof data[i].last_safety_data.warning_limit !== \"number\") { throw new Error(\"invalid last_safety_data.warning_limit\") }\n            if (data[i].last_safety_data.alarm_limit != undefined && typeof data[i].last_safety_data.alarm_limit !== \"number\") { throw new Error(\"invalid last_safety_data.alarm_limit\") }\n            if (data[i].last_safety_data.warning_limit_bottom != undefined && typeof data[i].last_safety_data.warning_limit_bottom !== \"number\") { throw new Error(\"invalid last_safety_data.warning_limit_bottom\") }\n            if (data[i].last_safety_data.alarm_limit_bottom != undefined && typeof data[i].last_safety_data.alarm_limit_bottom !== \"number\") { throw new Error(\"invalid last_safety_data.alarm_limit_bottom\") }\n            if (typeof data[i].last_safety_data.created_at !== \"string\") { throw new Error(\"invalid last_safety_data.created_at\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4(start_date: string, end_date: string, safety_id: number): Promise<SafetyData[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/safety/v1/data?safety_id=${safety_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: SafetyData[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].value != \"number\") { throw new Error(\"invalid value value\") }\n            if (data[i].warning_limit != undefined && typeof data[i].warning_limit != \"number\") { throw new Error(\"invalid warning_limit value\") }\n            if (data[i].alarm_limit != undefined && typeof data[i].alarm_limit != \"number\") { throw new Error(\"invalid alarm_limit value\") }\n            if (data[i].warning_limit_bottom != undefined && typeof data[i].warning_limit_bottom != \"number\") { throw new Error(\"invalid warning_limit_bottom value\") }\n            if (data[i].alarm_limit_bottom != undefined && typeof data[i].alarm_limit_bottom != \"number\") { throw new Error(\"invalid alarm_limit_bottom value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel1Realtime(): Promise<DashboardSafetyLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1/l1/realtime`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].safety_id_ool)) { throw new Error(\"invalid safety_id_ool value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n            if (data[i].safety_warn != undefined && typeof data[i].safety_warn != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (data[i].safety_alarm != undefined && typeof data[i].safety_alarm != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2Realtime(business_unit_id: number): Promise<DashboardSafetyLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1/l2/realtime?business_unit_id=${business_unit_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].safety_id_ool)) { throw new Error(\"invalid safety_id_ool value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n            if (data[i].safety_warn != undefined && typeof data[i].safety_warn != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (data[i].safety_alarm != undefined && typeof data[i].safety_alarm != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3Realtime(link_up_id: number): Promise<DashboardSafetyLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1/l3/realtime?link_up_id=${link_up_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].safety_id != \"number\") { throw new Error(\"invalid dashboard safety_id value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid dashboard parameter_name value\") }\n            if (typeof data[i].safety_tipe != \"string\") { throw new Error(\"invalid dashboard safety_tipe value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n\n            if (!data[i].last_safety_data) { throw new Error(\"missing last_safety_data\") }\n            if (typeof data[i].last_safety_data.safety_id !== \"number\") { throw new Error(\"invalid last_safety_data.safety_id\") }\n            if (typeof data[i].last_safety_data.value !== \"number\") { throw new Error(\"invalid last_safety_data.value\") }\n            if (data[i].last_safety_data.warning_limit != undefined && typeof data[i].last_safety_data.warning_limit !== \"number\") { throw new Error(\"invalid last_safety_data.warning_limit\") }\n            if (data[i].last_safety_data.alarm_limit != undefined && typeof data[i].last_safety_data.alarm_limit !== \"number\") { throw new Error(\"invalid last_safety_data.alarm_limit\") }\n            if (data[i].last_safety_data.warning_limit_bottom != undefined && typeof data[i].last_safety_data.warning_limit_bottom !== \"number\") { throw new Error(\"invalid last_safety_data.warning_limit_bottom\") }\n            if (data[i].last_safety_data.alarm_limit_bottom != undefined && typeof data[i].last_safety_data.alarm_limit_bottom !== \"number\") { throw new Error(\"invalid last_safety_data.alarm_limit_bottom\") }\n            if (typeof data[i].last_safety_data.created_at !== \"string\") { throw new Error(\"invalid last_safety_data.created_at\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4Realtime(safety_id: number): Promise<SafetyData[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/safety/v1/data/realtime?safety_id=${safety_id}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: SafetyData[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].value != \"number\") { throw new Error(\"invalid value value\") }\n            if (data[i].warning_limit != undefined && typeof data[i].warning_limit != \"number\") { throw new Error(\"invalid warning_limit value\") }\n            if (data[i].alarm_limit != undefined && typeof data[i].alarm_limit != \"number\") { throw new Error(\"invalid alarm_limit value\") }\n            if (data[i].warning_limit_bottom != undefined && typeof data[i].warning_limit_bottom != \"number\") { throw new Error(\"invalid warning_limit_bottom value\") }\n            if (data[i].alarm_limit_bottom != undefined && typeof data[i].alarm_limit_bottom != \"number\") { throw new Error(\"invalid alarm_limit_bottom value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n}\n\nexport { SafetyService, DashboardSafetyService }"],"names":["_ref","realtime","refresh","filterDate","onFilterDateChange","context","useContext","AppContext","contextVersion","version","contextAccessToken","contextShowAlertFunc","contextShowLoadingFunc","navigate","stateShowLoading","useNavigate","location","useLocation","linkUpId","useParams","link_up","state","machineSafetyData","setMachineSafetyData","useState","tableDataSafety","setTableDataSafety","level2Data","setLevel2Data","generateDataSafety","async","resp","DashboardSafetyService","DashboardLevel3Realtime","Number","start_date","Date","end_date","localStorage","removeItem","formatDate","DashboardLevel3","setItem","JSON","stringify","data","newLevel2ByType","i","length","row","safety_id","machine","Object","values","flat","find","m","machineType","safety_tipe","link_up_id","safety_green","safety_yellow","safety_red","machine_ool","push","type","Array","from","Set","error","AlertEntity","message","Error","toString","level","generateData","undefined","safety","resetAllData","promise","Promise","any","prev","reset","useEffect","keys","timeout","refreshfunc","setTimeout","clearTimeout","SafetyService","GetAllSafety","generateDataMachineSafety","_jsx","className","styles","noData","children","_jsxs","src","noDataImg","alt","width","height","cardWrapper","style","gridTemplateColumns","gridAutoRows","map","val","_level2Data$val$machi","_level2Data$val","_level2Data$val$machi2","_level2Data$val2","_level2Data$val3","cardParent","cardParentHeader","titleHeader","bodyHeader","bodyHeaderLeft","itemHeaderLeft","oolNumber","cenNumberNormal","cenNumberAlarm","bodyHeaderRight","imgWrapper","sensorImage","imgHeader","cardParentBodyWrapper","cardParentBody","_data$last_safety_dat","_data$last_safety_dat2","_data$last_safety_dat3","_data$last_safety_dat4","gridItemCenter","onClick","dashboard_type","parameter_name","_Fragment","gridCenterHeader","last_safety_data","created_at","gridCenterContent","safety_display_type","warningAlarm","alarmColorBox","alarm_limit_bottom","warning_limit_bottom","warnColorBox","alarm_limit","warning_limit","gaugeContent","Gauge","value","topLimitWarn","topLimitAlarm","bottomLimitWarn","bottomLimitAlarm","unit","safety_unit","booleanContent","notOk","booleanLeft","booleanRight","booleanStatus","FaRegCircleCheck","size","MdOutlineCancel","minValue","maxValue","needleColor","segmentColors","segments","computedLimits","useMemo","rawMax","Math","max","rawMin","min","delta","computedStops","computedSegmentColors","stops","colors","sort","a","b","gaugeKey","join","memoizedGauge","ReactSpeedometer","customSegmentStops","textColor","currentValueText","display","justifyContent","color","uri","BASE_URL","FetchUtils","fetchAuth","status","isArray","safety_warn","safety_alarm","safety_bottom_warn","safety_bottom_alarm","AddSafety","method","body","headers","UpdateSafety","fields","DeleteSafety","GetLinkUpConfig","_row$safety_warn","_row$safety_alarm","UpsertLinkupConfig","GetBusinessUnitConfig","business_unit_id","_row$safety_warn2","_row$safety_alarm2","UpsertBusinessUnitConfig","DashboardLevel1","business_unit","safety_id_ool","DashboardLevel2","DashboardLevel4","DashboardLevel1Realtime","DashboardLevel2Realtime","DashboardLevel4Realtime"],"sourceRoot":""}