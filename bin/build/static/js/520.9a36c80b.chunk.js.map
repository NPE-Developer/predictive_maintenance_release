{"version":3,"file":"static/js/520.9a36c80b.chunk.js","mappings":"oKAOA,MAAMA,EACF,6BAAaC,CAAiBC,GAC1B,IAAIC,EAAM,GAAGC,EAAAA,6CACK,MAAdF,IACAC,GAAO,eAAeD,KAG1B,MAAMG,QAAaC,EAAAA,EAAWC,UAAUJ,GACxC,GAAoB,MAAhBE,EAAKG,OACL,MAAM,IAAIC,MAAMJ,EAAKK,SAGzB,IAAKC,MAAMC,QAAQP,EAAKQ,MACpB,MAAM,IAAIJ,MAAM,mCAEpB,IAAK,IAAIK,EAAI,EAAGA,EAAIT,EAAKQ,KAAKE,OAAQD,IAAK,CAAC,IAADE,EAAAC,EACvC,MAAMC,EAAMb,EAAKQ,KAAKC,GACtB,GAA6B,iBAAlBI,EAAIhB,WAA0B,MAAM,IAAIO,MAAM,4BACzD,GAA8C,iBAAV,QAAhCO,EAAQE,EAAIC,4BAAoB,IAAAH,EAAAA,EAAI,GAAkB,MAAM,IAAIP,MAAM,sCAC1E,GAA+C,iBAAV,QAAjCQ,EAAQC,EAAIE,6BAAqB,IAAAH,EAAAA,EAAI,GAAkB,MAAM,IAAIR,MAAM,sCAC/E,CAEA,OAAOJ,EAAKQ,IAChB,CAEA,gCAAaQ,CAAoBnB,EAAoBoB,GACjD,MAAMjB,QAAaC,EAAAA,EAAWC,UAAU,GAAGH,EAAAA,6CAAqD,CAC5FmB,OAAQ,QACRC,KAAMC,KAAKC,UAAU,CAAExB,aAAYoB,WACnCK,QAAS,CAAE,eAAgB,sBAG/B,GAAoB,MAAhBtB,EAAKG,OACL,MAAM,IAAIC,MAAMJ,EAAKK,SAGzB,OAAOL,CACX,EAGJ,MAAMuB,EACF,4BAAaC,CAAgBC,EAAoBC,GAC7C,MAAM1B,QAAaC,EAAAA,EAAWC,UAC1B,GAAGH,EAAAA,oDAA2D0B,cAAuBC,KAEzF,GAAoB,MAAhB1B,EAAKG,OACL,MAAM,IAAIC,MAAMJ,EAAKK,SAGzB,MAAMG,EAAmCF,MAAMC,QAAQP,EAAKQ,MAAQR,EAAKQ,KAAO,GAChF,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CAClC,GAAuC,iBAA5BD,EAAKC,GAAGkB,iBAAgC,MAAM,IAAIvB,MAAM,kCACnE,GAAoC,iBAAzBI,EAAKC,GAAGmB,cAA6B,MAAM,IAAIxB,MAAM,+BAChE,IAAKE,MAAMC,QAAQC,EAAKC,GAAGoB,6BAAgC,MAAM,IAAIzB,MAAM,6CAC3E,GAA0C,iBAA/BI,EAAKC,GAAGqB,oBAAmC,MAAM,IAAI1B,MAAM,oCAC1E,CAEA,OAAOI,CACX,CAEA,4BAAauB,CAAgBN,EAAoBC,EAAkBC,GAC/D,MAAM3B,QAAaC,EAAAA,EAAWC,UAC1B,GAAGH,EAAAA,0DAAiE4B,gBAA+BF,cAAuBC,KAE9H,GAAoB,MAAhB1B,EAAKG,OACL,MAAM,IAAIC,MAAMJ,EAAKK,SAGzB,MAAMG,EAAmCF,MAAMC,QAAQP,EAAKQ,MAAQR,EAAKQ,KAAO,GAChF,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CAClC,GAAiC,iBAAtBD,EAAKC,GAAGuB,WAA0B,MAAM,IAAI5B,MAAM,4BAC7D,GAA8B,iBAAnBI,EAAKC,GAAGwB,QAAuB,MAAM,IAAI7B,MAAM,yBAC1D,IAAKE,MAAMC,QAAQC,EAAKC,GAAGoB,6BAAgC,MAAM,IAAIzB,MAAM,6CAC3E,GAA0C,iBAA/BI,EAAKC,GAAGqB,oBAAmC,MAAM,IAAI1B,MAAM,oCAC1E,CAEA,OAAOI,CACX,CAEA,4BAAa0B,CAAgBT,EAAoBC,EAAkBM,GAC/D,MAAMhC,QAAaC,EAAAA,EAAWC,UAC1B,GAAGH,EAAAA,oDAA2DiC,gBAAyBP,cAAuBC,KAElH,GAAoB,MAAhB1B,EAAKG,OACL,MAAM,IAAIC,MAAMJ,EAAKK,SAGzB,MAAMG,EAAmCF,MAAMC,QAAQP,EAAKQ,MAAQR,EAAKQ,KAAO,GAChF,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CAClC,GAAiC,iBAAtBD,EAAKC,GAAGZ,WAA0B,MAAM,IAAIO,MAAM,4BAC7D,GAA0C,iBAA/BI,EAAKC,GAAGqB,oBAAmC,MAAM,IAAI1B,MAAM,oCAC1E,CAEA,OAAOI,CACX,CAEA,4BAAa2B,CAAgBV,EAAoBC,EAAkB7B,GAC/D,MAAMG,QAAaC,EAAAA,EAAWC,UAC1B,GAAGH,EAAAA,sDAA6DF,gBAAyB4B,cAAuBC,KAEpH,GAAoB,MAAhB1B,EAAKG,OACL,MAAM,IAAIC,MAAMJ,EAAKK,SAGzB,MAAMG,EAAmCF,MAAMC,QAAQP,EAAKQ,MAAQR,EAAKQ,KAAO,GAChF,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CAClC,GAAsC,iBAA3BD,EAAKC,GAAG2B,gBAA+B,MAAM,IAAIhC,MAAM,iCAClE,QAAoCiC,GAAhC7B,EAAKC,GAAGK,sBAA4E,iBAAhCN,EAAKC,GAAGK,qBAAoC,MAAM,IAAIV,MAAM,sCACpH,QAAqCiC,GAAjC7B,EAAKC,GAAGM,uBAA8E,iBAAjCP,EAAKC,GAAGM,sBAAqC,MAAM,IAAIX,MAAM,uCACtH,GAA+C,gBAA3C,IAAIkC,KAAK9B,EAAKC,GAAG8B,YAAYC,WAAgC,MAAM,IAAIpC,MAAM,4BAAqCI,EAAKC,GAAG8B,WAAa,IAAID,KAAK9B,EAAKC,GAAG8B,WAChK,CAEA,OAAO/B,CACX,CAIA,oCAAaiC,GACT,MAAMzC,QAAaC,EAAAA,EAAWC,UAAU,GAAGH,EAAAA,kDAC3C,GAAoB,MAAhBC,EAAKG,OACL,MAAM,IAAIC,MAAMJ,EAAKK,SAGzB,MAAMG,EAAmCF,MAAMC,QAAQP,EAAKQ,MAAQR,EAAKQ,KAAO,GAChF,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CAClC,GAAuC,iBAA5BD,EAAKC,GAAGkB,iBAAgC,MAAM,IAAIvB,MAAM,kCACnE,GAAoC,iBAAzBI,EAAKC,GAAGmB,cAA6B,MAAM,IAAIxB,MAAM,+BAChE,IAAKE,MAAMC,QAAQC,EAAKC,GAAGoB,6BAAgC,MAAM,IAAIzB,MAAM,6CAC3E,GAA0C,iBAA/BI,EAAKC,GAAGqB,oBAAmC,MAAM,IAAI1B,MAAM,oCAC1E,CAEA,OAAOI,CACX,CAEA,oCAAakC,CAAwBf,GACjC,MAAM3B,QAAaC,EAAAA,EAAWC,UAAU,GAAGH,EAAAA,mEAA0E4B,KACrH,GAAoB,MAAhB3B,EAAKG,OACL,MAAM,IAAIC,MAAMJ,EAAKK,SAGzB,MAAMG,EAAmCF,MAAMC,QAAQP,EAAKQ,MAAQR,EAAKQ,KAAO,GAChF,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CAClC,GAAiC,iBAAtBD,EAAKC,GAAGuB,WAA0B,MAAM,IAAI5B,MAAM,4BAC7D,GAA8B,iBAAnBI,EAAKC,GAAGwB,QAAuB,MAAM,IAAI7B,MAAM,yBAC1D,IAAKE,MAAMC,QAAQC,EAAKC,GAAGoB,6BAAgC,MAAM,IAAIzB,MAAM,6CAC3E,GAA0C,iBAA/BI,EAAKC,GAAGqB,oBAAmC,MAAM,IAAI1B,MAAM,oCAC1E,CAEA,OAAOI,CACX,CAEA,oCAAamC,CAAwBX,GACjC,MAAMhC,QAAaC,EAAAA,EAAWC,UAAU,GAAGH,EAAAA,6DAAoEiC,KAC/G,GAAoB,MAAhBhC,EAAKG,OACL,MAAM,IAAIC,MAAMJ,EAAKK,SAGzB,MAAMG,EAAmCF,MAAMC,QAAQP,EAAKQ,MAAQR,EAAKQ,KAAO,GAChF,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CAClC,GAAiC,iBAAtBD,EAAKC,GAAGZ,WAA0B,MAAM,IAAIO,MAAM,4BAC7D,GAA0C,iBAA/BI,EAAKC,GAAGqB,oBAAmC,MAAM,IAAI1B,MAAM,oCAC1E,CAEA,OAAOI,CACX,CAEA,oCAAaoC,CAAwB/C,GACjC,MAAMG,QAAaC,EAAAA,EAAWC,UAC1B,GAAGH,EAAAA,+DAAsEF,KAE7E,GAAoB,MAAhBG,EAAKG,OACL,MAAM,IAAIC,MAAMJ,EAAKK,SAGzB,MAAMG,EAAmCF,MAAMC,QAAQP,EAAKQ,MAAQR,EAAKQ,KAAO,GAChF,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CAClC,GAAsC,iBAA3BD,EAAKC,GAAG2B,gBAA+B,MAAM,IAAIhC,MAAM,iCAClE,QAAoCiC,GAAhC7B,EAAKC,GAAGK,sBAA4E,iBAAhCN,EAAKC,GAAGK,qBAAoC,MAAM,IAAIV,MAAM,sCACpH,QAAqCiC,GAAjC7B,EAAKC,GAAGM,uBAA8E,iBAAjCP,EAAKC,GAAGM,sBAAqC,MAAM,IAAIX,MAAM,uCACtH,GAA+C,gBAA3C,IAAIkC,KAAK9B,EAAKC,GAAG8B,YAAYC,WAAgC,MAAM,IAAIpC,MAAM,4BAAqCI,EAAKC,GAAG8B,WAAa,IAAID,KAAK9B,EAAKC,GAAG8B,WAChK,CAEA,OAAO/B,CACX,E,mECzBJ,QA7JA,MACI,aAAOqC,CAAOC,EAAqBC,EAAkBC,GAEjD,MAAMC,EAAW,IAAIC,IAAAA,UACfC,EAAYF,EAASG,aAAaN,GAElCO,EAAkBC,GAYhBA,GAAU,GAAKA,GAAU,GAXb,CACZ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IACL,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,KAAM,MAISA,GAGZ,iBAIXP,EAAOQ,IAAI,CAACC,EAAKC,KACbN,EAAUO,UAAU,GAAGL,EAAeI,MAAUE,MAAQ,GACxDR,EAAUS,QAAQ,GAAGP,EAAeI,OAAyBI,MAAQC,OAAON,EAAIO,eAChFZ,EAAUS,QAAQ,GAAGP,EAAeI,OAAyBO,MAAQ,CACjEC,KAAM,CACFC,KAAM,UACNC,QAAS,QACTC,QAAS,CAAEC,KAAM,WAErBC,KAAM,CACFC,MAAM,GAEVC,UAAW,CACPC,SAAU,SACVC,WAAY,UAEhBC,OAAQ,CACJC,IAAK,CACDZ,MAAO,OACPa,MAAO,CAAER,KAAM,WAEnBS,KAAM,CACFd,MAAO,OACPa,MAAO,CAAER,KAAM,WAEnBU,MAAO,CACHf,MAAO,OACPa,MAAO,CAAER,KAAM,WAEnBW,OAAQ,CACJhB,MAAO,OACPa,MAAO,CAAER,KAAM,eAO/BrB,EAAOO,IAAI,CAAC0B,EAAKxB,KACb,MAAM5C,EAAgB,GACtBkC,EAAOQ,IAAKC,IACQ,MAAZyB,EAAIzB,GACJ3C,EAAIqE,KAAKD,EAAIzB,IAEb3C,EAAIqE,KAAK,MAGD/B,EAAUgC,OAAOtE,GACzBuE,SAAUC,IACdA,EAAKrB,MAAQ,CACTQ,UAAW,CACPC,SAAU,SACVC,WAAY,UAEhBC,OAAQ,CACJC,IAAK,CACDZ,MAAO,OACPa,MAAO,CAAER,KAAM,WAEnBS,KAAM,CACFd,MAAO,OACPa,MAAO,CAAER,KAAM,WAEnBU,MAAO,CACHf,MAAO,OACPa,MAAO,CAAER,KAAM,WAEnBW,OAAQ,CACJhB,MAAO,OACPa,MAAO,CAAER,KAAM,iBAQnCpB,EAASqC,KAAKC,cAAcC,KAAMC,IAE9B,MAAMC,EAAO,IAAIC,KAAK,CAACF,GAAS,CAC5BvB,KAAM,sEAIJ0B,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOC,OAAOC,IAAIC,gBAAgBR,GACvCE,EAAKO,SAAW,GAAGrD,SAGnB8C,EAAKQ,QAGLJ,OAAOC,IAAII,gBAAgBT,EAAKG,OAExC,CAEA,mBAAaO,CAAO9F,GAEhB,MAAMyC,EAAW,IAAIC,IAAAA,gBACfD,EAASqC,KAAKiB,KAAK/F,GACzB,MAAMgG,EAA4C,GASlD,GARAvD,EAASwD,UAAWtD,IAChB,MAAMuD,EAA2C,GACjDvD,EAAUwD,QAAS9F,IACf6F,EAAMxB,KAAKrE,EAAImC,UAEnBwD,EAAKtB,KAAKwB,KAGVF,EAAK9F,OAAS,EAAG,CACjB,MAAMgG,EAAQF,EAAK,GACbI,EAAsC,GAC5C,IAAK,IAAInG,EAAI,EAAGA,EAAIiG,EAAMhG,OAAQD,IAAK,CACnC,MAAMoG,EAAiC,CAAC,EACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAMjG,GAAGC,OAAQoG,IAAK,CAI9B,IAADC,EAHP,GAAmB,MAAfL,EAAM,GAAGI,IAAsC,iBAAhBJ,EAAM,GAAGI,GAC5C,GAAIJ,EAAMjG,GAAGqG,aAAcxE,KACvBuE,EAAIH,EAAM,GAAGI,GAAGE,gBAAiBC,EAAAA,EAAAA,IAAOP,EAAMjG,GAAGqG,GAAI,4BAErDD,EAAIH,EAAM,GAAGI,GAAGE,eAAyC,iBAAhBN,EAAMjG,GAAGqG,GAAkBJ,EAAMjG,GAAGqG,GAAGF,OAAoB,QAAdG,EAAGL,EAAMjG,GAAGqG,UAAE,IAAAC,EAAAA,EAAI,EAEhH,CACAH,EAAO1B,KAAK2B,EAChB,CACA,OAAOD,CACX,CACI,MAAO,EAEf,E,yNChIJM,EAAAA,GAAQC,SACJC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,IAGJC,EAAAA,EAASC,qBAAsB,EAC/BD,EAAAA,EAASE,YAAa,EActB,MAukCA,EAvkC8DC,IAAuF,IAAtF,SAAEC,EAAQ,YAAEC,EAAW,QAAEC,EAAO,WAAExG,EAAU,SAAEC,EAAQ,uBAAEwG,GAAwBJ,EAE3I,MAAMK,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GACrBC,EAAqBH,EAAQG,mBAC7BC,EAAuBJ,EAAQI,qBAC/BC,EAAyBL,EAAQK,wBAKjC,UAAEC,IAJiBN,EAAQO,kBAIXC,EAAAA,EAAAA,MAEhBC,EACS,UADTA,EAEW,0BAFXA,EAGW,2BAHXA,EAIY,0BAGXC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,IAAIzG,OACpD0G,EAAQC,IAAaF,EAAAA,EAAAA,WAAS,IAC9BG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAwC,eACrEK,EAAUC,IAAeN,EAAAA,EAAAA,UAA0C,UACnEO,EAAYC,IAAiBR,EAAAA,EAAAA,UAAgD,OAC7ES,EAAgBC,IAAqBV,EAAAA,EAAAA,UAAqC,cAI1EW,EAAWC,IAAgBZ,EAAAA,EAAAA,UAAqC,KAChEa,EAAgBC,IAAqBd,EAAAA,EAAAA,UAAqC,IAC3Ee,GAAgBC,EAAAA,EAAAA,QAAsD,CAAC,IAEtEC,EAAiBC,IAAsBlB,EAAAA,EAAAA,UAAoC,CAAC,IAE5EmB,EAAWC,IAAgBpB,EAAAA,EAAAA,UAA4B,CAAEqB,OAAQ,GAAIC,SAAU,MAC/EC,EAAcC,IAAmBxB,EAAAA,EAAAA,UAA+B,CAAC,GAElEyB,IAAYT,EAAAA,EAAAA,QAAwC,OAKnDU,GAAmBC,KAAwB3B,EAAAA,EAAAA,UAAqC,KAChF4B,GAAwBC,KAA6B7B,EAAAA,EAAAA,UAAqC,KAE1F8B,GAAyBC,KAA8B/B,EAAAA,EAAAA,UAAoC,CAAC,IAE5FgC,GAAmBC,KAAwBjC,EAAAA,EAAAA,UAA4B,CAAEqB,OAAQ,GAAIC,SAAU,MAC/FY,GAAsBC,KAA2BnC,EAAAA,EAAAA,UAA+B,CAAC,GAElFoC,IAAoBpB,EAAAA,EAAAA,QAAwC,MAIlE,SAASqB,GAAe5K,GACpB,MAAM+C,EAAqD,CAAC,EAE5D,MAAkB,OAAd2F,EACO,CAAE,IAAO,IAAI1I,GAAM6K,eAG9B7K,EAAK6K,aAAaC,QAAQC,IACtB,MAAMC,EAAO,IAAIlJ,KAAKiJ,EAAKhJ,YACrBkJ,EAAU,IAAInJ,KAAKkJ,GACzBC,EAAQC,WAAgD,GAArCC,KAAKC,MAAMJ,EAAKK,aAAe,KAClDJ,EAAQK,WAAW,GACnBL,EAAQM,gBAAgB,GAExB,IAAIvI,GAAMyD,EAAAA,EAAAA,IAAOwE,EAAS,uBAC1B,OAAQvC,GACJ,IAAK,OACD1F,GAAMyD,EAAAA,EAAAA,IAAOwE,EAAS,uBACtB,MAEJ,IAAK,aACDjI,GAAMyD,EAAAA,EAAAA,IAAOwE,EAAS,4BAOdpJ,GAAZkB,EAAIC,GACJD,EAAIC,GAAO,GAEXD,EAAIC,GAAK0B,KAAKqG,KAIfhI,EACX,CAIA,MAAMyI,GAA6B,CAC/BC,GAAI,aACJC,kBAAAA,CAAmBC,GAAQ,IAADC,EACtB,MAAMC,EAAqB7B,GAAU8B,SAE/B,IAAEC,EAAG,UAAEC,EAAS,OAAEC,GAAWN,EACnC,IACKK,IACAC,EAAOC,IACPD,EAAOE,GACoC,OAA1B,OAAlBN,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBvL,uBACyB,OAA3B,OAAlBuL,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBtL,uBACtB,OAEFwL,EAAIK,OAGJ,MAAMC,EAAkBJ,EAAOE,EAAEG,IAC3BC,EAAwD,QAA3CX,EAAqB,OAAlBC,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBvL,4BAAoB,IAAAsL,EAAAA,EAAI,EAE5DY,EAAuBP,EAAOE,EAAEM,iBAAiBJ,GACjDK,EAAqBT,EAAOE,EAAEM,iBAAiBF,GAErDR,EAAIY,UAAYvE,EAChB2D,EAAIa,SACAZ,EAAU1H,KACV6G,KAAKmB,IAAIE,EAAsBE,GAC/BV,EAAUzH,MAAQyH,EAAU1H,KAC5B6G,KAAK0B,IAAIL,EAAuBE,IAIpC,MAAMI,EAAejB,EAAqBA,EAAmBvL,qBAAuB,EAC9EyM,EAAalB,EAAqBA,EAAmBtL,sBAAwB,EAE7EyM,EAAoBf,EAAOE,EAAEM,iBAAiBK,GAC9CG,EAAkBhB,EAAOE,EAAEM,iBAAiBM,GAElDhB,EAAIY,UAAYvE,EAChB2D,EAAIa,SACAZ,EAAU1H,KACV6G,KAAKmB,IAAIU,EAAmBC,GAC5BjB,EAAUzH,MAAQyH,EAAU1H,KAC5B6G,KAAK0B,IAAIG,EAAoBC,IAKjC,MAAMC,EAAgBrB,EAAqBA,EAAmBtL,sBAAwB,EAChF4M,EAAclB,EAAOE,EAAEiB,IAEvBC,EAAqBpB,EAAOE,EAAEM,iBAAiBS,GAC/CI,EAAmBrB,EAAOE,EAAEM,iBAAiBU,GAEnDpB,EAAIY,UAAYvE,EAChB2D,EAAIa,SACAZ,EAAU1H,KACV6G,KAAKmB,IAAIe,EAAoBC,GAC7BtB,EAAUzH,MAAQyH,EAAU1H,KAC5B6G,KAAK0B,IAAIQ,EAAqBC,IAGlCvB,EAAIwB,SACR,GAEEC,GAAcA,CAACC,EAAwDpF,KAA2B,IAADqF,EAEnG,MAAMC,EAAiB,GAAGxC,KAAKC,MAAM/C,EAAgBgD,aAAe,OAEpE,IAAIrI,GAAMyD,EAAAA,EAAAA,IAAO4B,EAAiB,uBAClC,OAAQK,GACJ,IAAK,OACD1F,GAAMyD,EAAAA,EAAAA,IAAO4B,EAAiB,uBAC9B,MAEJ,IAAK,aACDrF,GAAMyD,EAAAA,EAAAA,IAAO4B,EAAiB,iBAAiBsF,QAC/C,MAEJ,IAAK,MACD3K,EAAM,MAOd,MAAM4K,EAAwB,QAAfF,EAAGD,EAAQzK,UAAI,IAAA0K,EAAAA,EAAI,GAElC,IAAKE,EACD,OAIJ,MAAMC,EAAYD,EAAU7K,IAAI+K,IAAOrH,EAAAA,EAAAA,IAAOqH,EAAI/L,WAAY,aACxDgM,EAAUH,EAAU7K,IAAI+K,GAAOA,EAAIlM,iBAGnCoM,EAAeJ,EAAU/C,aAC/Bb,GAAU8B,QAAUkC,EAAa,GAGjC,MAAMC,EAAU9C,KAAKmB,OAAOyB,GACtBG,EAAU/C,KAAKiC,OAAOW,GACtBI,EAAQD,EAAUD,GAAW,EAG7BG,EAAYH,EAFF,GAEYE,EACtBE,EAAYH,EAHF,GAGYC,EAE5BxE,EAAa,CACTC,OAAQiE,EACRhE,SAAU,CACN,CACIyE,MAAO,kBACPtO,KAAM+N,EACNQ,YAAanG,EACboG,qBAAsBpG,EACtBqG,iBAAkB,UAClBC,0BAA2B,UAC3BC,sBAAuBvG,EAEvBwG,YAAa,EACbC,YAAa,MAKzB9E,EAAgB,CACZ1C,YAAY,EACZD,qBAAqB,EACrB0H,UAAW,CACPC,SAAU,IACVC,OAAQ,kBAEZC,QAAS,CACLC,OAAQ,CACJC,SAAU,MACVvF,OAAQ,CACJvF,MAAO,UACPP,KAAM,CACFsL,KAAM,GACNC,OAAQ,IACRC,OAAQ,mCAEZC,eAAe,EACfC,WAAY,gBAGpBC,QAAS,CACLC,gBAAiB,UACjBC,WAAY,UACZC,UAAW,UACXC,QAAS,GACTtB,YAAa,UACbK,YAAa,EACbkB,aAAc,EACdC,UAAW,CACPT,OAAQ,sBACRF,KAAM,GACNC,OAAQ,KAEZW,SAAU,CACNV,OAAQ,sBACRF,KAAM,MAIlBnD,OAAQ,CACJC,EAAG,CACC+D,KAAM,CACF5L,MAAO,WAEX6L,MAAO,CACH7L,MAAO,UACPP,KAAM,CACFsL,KAAM,GACNE,OAAQ,uBAEZa,YAAa,GACbC,YAAa,IAGrBjE,EAAG,CACC8D,KAAM,CACF5L,MAAO,WAEX6L,MAAO,CACH7L,MAAO,UACPP,KAAM,CACFsL,KAAM,GACNE,OAAQ,uBAEZO,QAAS,GAEbvD,IAAK8B,EACLhB,IAAKiB,IAGbgC,OAAQ,CACJR,QAAS,CACLzL,IAAK,GACLI,OAAQ,GACRF,KAAM,GACNC,MAAO,KAGf+L,SAAU,CACNC,KAAM,CACFC,gBAAiB,SAErBC,MAAO,CACHjB,WAAY,cAmBtBkB,GAAcA,CAACnO,EAAwCoO,KAA0B,IAADC,EAClF,OAAOC,EAAAA,EAAAA,KAAA,OAAAC,UACHD,EAAAA,EAAAA,KAAA,SAAOrN,MAAO,CAAEuN,SAAU,OAAQC,UAAW,SAAU7N,MAAO,SAAWO,KAAK,OAAOL,MAA8B,QAAzBuN,EAAEpH,EAAgBjH,UAAO,IAAAqO,EAAAA,EAAI,GACnHK,YAAa,GAAc,OAAXN,QAAW,IAAXA,EAAAA,EAAepO,QAC/B2O,SAAWC,IACP1H,EAAoB2H,IAChB,MAAMrD,EAAU,IAAKqD,GAErB,OADArD,EAAQxL,GAAU4O,EAAME,OAAOhO,MACxB0K,UAMrBuD,GAAcA,CAAC/O,EAAwCgP,KAClDC,EAAAA,EAAAA,MAAA,OAAKhO,MAAO,CAAEiO,QAAS,OAAQC,cAAe,MAAOC,eAAgB,SAAUC,IAAK,MAAOC,WAAY,SAAUC,OAAQ,WAC5HC,QAASA,KACLhJ,EAAcxG,GAEV0G,EADmB,cAAnBD,EACkB,aAEA,cAExB8H,SAAA,EAEFD,EAAAA,EAAAA,KAAA,OAAAC,SAAgB,OAAVS,QAAU,IAAVA,EAAAA,EAAchP,KACpBiP,EAAAA,EAAAA,MAAA,OAAKhO,MAAO,CAAEiO,QAAS,OAAQC,cAAe,SAAUE,IAAK,IAAKI,WAAY,SAAUC,aAAc,UAAWnB,SAAA,EAC7GD,EAAAA,EAAAA,KAACqB,EAAAA,IAAQ,CAAC1O,MAAO,CAAEa,MAASyE,GAAcvG,GAA4B,cAAlByG,EAAkC,yBAA2B,SAAWmJ,OAAQ,EAAGtC,QAAS,EAAGuC,OAAQ,WAC3JvB,EAAAA,EAAAA,KAACwB,EAAAA,IAAU,CAAC7O,MAAO,CAAEa,MAASyE,GAAcvG,GAA4B,aAAlByG,EAAiC,yBAA2B,SAAWmJ,OAAQ,QAAStC,QAAS,EAAGuC,OAAQ,gBAqCxKE,GAAyBA,CAACrP,EAAe5C,KAC3C,IAAIkS,EAAa,QACbC,EAAc,MAElB,MAAM,gBAAE5Q,EAAe,qBAAEtB,EAAoB,sBAAEC,GAA0BF,EAiBzE,YAf4BwB,GAAxBvB,GAAqCsB,EAAkBtB,IACvDiS,EAAa,QACbC,EAAc,aAGU3Q,GAAxBvB,GAAqCsB,GAAmBtB,IACxDiS,EAAa,SACbC,EAAc,aAGW3Q,GAAzBtB,GAAsCqB,GAAmBrB,IACzDgS,EAAa,MACbC,EAAc,SAGXhB,EAAAA,EAAAA,MAAAiB,EAAAA,SAAA,CAAA3B,SAAA,EACHD,EAAAA,EAAAA,KAAA,MAAAC,SAAK7N,EAAQ,KACb4N,EAAAA,EAAAA,KAAA,MAAAC,UAAKrK,EAAAA,EAAAA,IAAOpG,EAAI0B,WAAY,0BAC5B8O,EAAAA,EAAAA,KAAA,MAAIrN,MAAO,CAAEa,MAAOkO,EAAYG,WAAYF,GAAc1B,SAAEzQ,EAAIuB,mBAChEiP,EAAAA,EAAAA,KAAA,MAAAC,SAAKzQ,EAAIC,wBACTuQ,EAAAA,EAAAA,KAAA,MAAAC,SAAKzQ,EAAIE,6BAIjBoS,EAAAA,EAAAA,WAAU,KA5GkBC,MACxB,MAAMC,EAAiBzJ,EAAe0J,OAAQzS,GACnC0S,EAAAA,EAAYC,YAAY3S,EAAKmJ,IACrCyJ,KAAK,CAACC,EAAGC,IACHrK,EACiB,aAAlBE,EACO+J,EAAAA,EAAYK,aAAaF,EAAGC,EAAGrK,GAE/BiK,EAAAA,EAAYK,aAAaD,EAAGD,EAAGpK,GAJhB,GAO9BK,EAAa0J,IAkGbD,IACD,CAACpJ,EAAiBV,EAAYE,KACjC2J,EAAAA,EAAAA,WAAU,KAjEWU,WACbC,GACAtL,GAAuB,GAG3B,IACI,MAAMxI,QAAauB,EAAAA,EAAwBY,iBACvC4R,EAAAA,EAAAA,IAAWtS,EAAY,eACvBsS,EAAAA,EAAAA,IAAWrS,EAAU,cACrBsS,OAAOvL,IAGXkB,EAAa3J,GACb6J,EAAkB7J,GAElB,MAAMuD,EAAM6H,GAAepL,GAC3B8J,EAAcwC,QAAU/I,EAExB,MAAM0Q,EAAOC,OAAOD,KAAK1Q,GACzB,GAAI0Q,EAAKvT,OAAS,GAAmB,OAAdwI,EAAqB,CACxC,MAAMiL,EAAU,IAAI7R,KAAK2R,EAAKA,EAAKvT,OAAS,IAC5CoI,EAAmBqL,GACnBnG,GAAYlE,EAAcwC,QAAS6H,EACvC,MACInG,GAAYlE,EAAcwC,QAASzD,EAE3C,CAAE,MAAOuL,GACL7L,EAAqB,IAAI8L,EAAAA,EAAY,CAAEhU,QAAS+T,aAAiBhU,MAAQgU,EAAM/T,QAAU+T,EAAM5R,WAAY8R,MAAO,IACtH,CAAC,QACG9L,GAAuB,EAC3B,GAqCA+L,CAAwB,GAAXtM,IACd,CAACA,IAKJ,MAAMuM,GAAqC,CACvCvI,GAAI,qBACJC,kBAAAA,CAAmBC,GAAQ,IAADsI,EACtB,MAAMpI,EAAqBlB,GAAkBmB,SAEvC,IAAEC,EAAG,UAAEC,EAAS,OAAEC,GAAWN,EACnC,IACKK,IACAC,EAAOC,IACPD,EAAOE,GACoC,OAA1B,OAAlBN,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBvL,uBACyB,OAA3B,OAAlBuL,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBtL,uBACtB,OAEFwL,EAAIK,OAGJ,MAAMC,EAAkBJ,EAAOE,EAAEG,IAC3BC,EAAwD,QAA3C0H,EAAqB,OAAlBpI,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBvL,4BAAoB,IAAA2T,EAAAA,EAAI,EAE5DzH,EAAuBP,EAAOE,EAAEM,iBAAiBJ,GACjDK,EAAqBT,EAAOE,EAAEM,iBAAiBF,GAErDR,EAAIY,UAAYvE,EAChB2D,EAAIa,SACAZ,EAAU1H,KACV6G,KAAKmB,IAAIE,EAAsBE,GAC/BV,EAAUzH,MAAQyH,EAAU1H,KAC5B6G,KAAK0B,IAAIL,EAAuBE,IAIpC,MAAMI,EAAejB,EAAqBA,EAAmBvL,qBAAuB,EAC9EyM,EAAalB,EAAqBA,EAAmBtL,sBAAwB,EAE7EyM,EAAoBf,EAAOE,EAAEM,iBAAiBK,GAC9CG,EAAkBhB,EAAOE,EAAEM,iBAAiBM,GAElDhB,EAAIY,UAAYvE,EAChB2D,EAAIa,SACAZ,EAAU1H,KACV6G,KAAKmB,IAAIU,EAAmBC,GAC5BjB,EAAUzH,MAAQyH,EAAU1H,KAC5B6G,KAAK0B,IAAIG,EAAoBC,IAIjC,MAAMC,EAAgBrB,EAAqBA,EAAmBtL,sBAAwB,EAChF4M,EAAclB,EAAOE,EAAEiB,IAEvBC,EAAqBpB,EAAOE,EAAEM,iBAAiBS,GAC/CI,EAAmBrB,EAAOE,EAAEM,iBAAiBU,GAEnDpB,EAAIY,UAAYvE,EAChB2D,EAAIa,SACAZ,EAAU1H,KACV6G,KAAKmB,IAAIe,EAAoBC,GAC7BtB,EAAUzH,MAAQyH,EAAU1H,KAC5B6G,KAAK0B,IAAIQ,EAAqBC,IAGlCvB,EAAIwB,SACR,GAEE2G,GAAsBA,CAACzG,EAAwDpF,KAA2B,IAAD8L,EAE3G,MAAMxG,EAAiB,GAAGxC,KAAKC,MAAM/C,EAAgBgD,aAAe,OAEpE,IAAIrI,GAAMyD,EAAAA,EAAAA,IAAO4B,EAAiB,uBAClC,OAAQK,GACJ,IAAK,OACD1F,GAAMyD,EAAAA,EAAAA,IAAO4B,EAAiB,uBAC9B,MAEJ,IAAK,aACDrF,GAAMyD,EAAAA,EAAAA,IAAO4B,EAAiB,iBAAiBsF,QAC/C,MAEJ,IAAK,MACD3K,EAAM,MAOd,MAAM4K,EAAwB,QAAfuG,EAAG1G,EAAQzK,UAAI,IAAAmR,EAAAA,EAAI,GAElC,IAAKvG,EACD,OAIJ,MAAMC,EAAYD,EAAU7K,IAAI+K,IAAOrH,EAAAA,EAAAA,IAAOqH,EAAI/L,WAAY,aACxDgM,EAAUH,EAAU7K,IAAI+K,GAAOA,EAAIlM,iBAGnCoI,EAAY4D,EAAU,GAC5BjD,GAAkBmB,QAAU9B,EAG5B,MAAMiE,EAAU9C,KAAKmB,OAAOyB,GACtBG,EAAU/C,KAAKiC,OAAOW,GACtBI,EAAQD,EAAUD,GAAW,EAG7BG,EAAYH,EAFF,GAEYE,EACtBE,EAAYH,EAHF,GAGYC,EAG5B3D,GAAqB,CACjBZ,OAAQiE,EACRhE,SAAU,CACN,CACIyE,MAAO,kBACPtO,KAAM+N,EACNQ,YAAanG,EACboG,qBAAsBpG,EACtBqG,iBAAkB,UAClBC,0BAA2B,UAC3BC,sBAAuBvG,EAEvBwG,YAAa,EACbC,YAAa,MAKzBnE,GAAwB,CACpBrD,YAAY,EACZD,qBAAqB,EACrB0H,UAAW,CACPC,SAAU,IACVC,OAAQ,kBAEZC,QAAS,CACLC,OAAQ,CACJC,SAAU,MACVvF,OAAQ,CACJvF,MAAO,UACPP,KAAM,CACFsL,KAAM,GACNC,OAAQ,IACRC,OAAQ,mCAEZC,eAAe,EACfC,WAAY,gBAGpBC,QAAS,CACLC,gBAAiB,UACjBC,WAAY,UACZC,UAAW,UACXC,QAAS,GACTtB,YAAa,UACbK,YAAa,EACbkB,aAAc,EACdC,UAAW,CACPT,OAAQ,sBACRF,KAAM,GACNC,OAAQ,KAEZW,SAAU,CACNV,OAAQ,sBACRF,KAAM,MAIlBnD,OAAQ,CACJC,EAAG,CACC+D,KAAM,CACF5L,MAAO,WAEX6L,MAAO,CACH7L,MAAO,UACPP,KAAM,CACFsL,KAAM,GACNE,OAAQ,uBAEZa,YAAa,GACbC,YAAa,IAGrBjE,EAAG,CACC8D,KAAM,CACF5L,MAAO,WAEX6L,MAAO,CACH7L,MAAO,UACPP,KAAM,CACFsL,KAAM,GACNE,OAAQ,uBAEZO,QAAS,GAEbvD,IAAK8B,EACLhB,IAAKiB,IAGbgC,OAAQ,CACJR,QAAS,CACLzL,IAAK,GACLI,OAAQ,GACRF,KAAM,GACNC,MAAO,KAGf+L,SAAU,CACNC,KAAM,CACFC,gBAAiB,SAErBC,MAAO,CACHjB,WAAY,cAmBtB4E,GAAsBA,CAAC7R,EAAwCoO,KAA0B,IAAD0D,EAC1F,OAAOxD,EAAAA,EAAAA,KAAA,OAAAC,UACHD,EAAAA,EAAAA,KAAA,SAAOrN,MAAO,CAAEuN,SAAU,OAAQC,UAAW,SAAU7N,MAAO,SAAWO,KAAK,OAAOL,MAAsC,QAAjCgR,EAAEhK,GAAwB9H,UAAO,IAAA8R,EAAAA,EAAI,GAC3HpD,YAAa,GAAc,OAAXN,QAAW,IAAXA,EAAAA,EAAepO,QAC/B2O,SAAWC,IACP7G,GAA4B8G,IACxB,MAAMrD,EAAU,IAAKqD,GAErB,OADArD,EAAQxL,GAAU4O,EAAME,OAAOhO,MACxB0K,UAMrBuG,GAAsBA,CAAC/R,EAAwCgP,KAC1DC,EAAAA,EAAAA,MAAA,OAAKhO,MAAO,CAAEiO,QAAS,OAAQC,cAAe,MAAOC,eAAgB,SAAUC,IAAK,MAAOC,WAAY,SAAUC,OAAQ,WAC5HC,QAASA,KACLhJ,EAAcxG,GAEV0G,EADmB,cAAnBD,EACkB,aAEA,cAExB8H,SAAA,EAEFD,EAAAA,EAAAA,KAAA,OAAAC,SAAgB,OAAVS,QAAU,IAAVA,EAAAA,EAAchP,KACpBiP,EAAAA,EAAAA,MAAA,OAAKhO,MAAO,CAAEiO,QAAS,OAAQC,cAAe,SAAUE,IAAK,IAAKI,WAAY,SAAUC,aAAc,UAAWnB,SAAA,EAC7GD,EAAAA,EAAAA,KAACqB,EAAAA,IAAQ,CAAC1O,MAAO,CAAEa,MAASyE,GAAcvG,GAA4B,cAAlByG,EAAkC,yBAA2B,SAAWmJ,OAAQ,EAAGtC,QAAS,EAAGuC,OAAQ,WAC3JvB,EAAAA,EAAAA,KAACwB,EAAAA,IAAU,CAAC7O,MAAO,CAAEa,MAASyE,GAAcvG,GAA4B,aAAlByG,EAAiC,yBAA2B,SAAWmJ,OAAQ,QAAStC,QAAS,EAAGuC,OAAQ,gBAKxKmC,GAAuBlB,UACzB,IACI,MAAM7T,QAAauB,EAAAA,EAAwBqB,wBAAwBoR,OAAOvL,IAE1EiC,GAAqB1K,GACrB4K,GAA0B5K,EAC9B,CAAE,MAAOoU,GACL7L,EAAqB,IAAI8L,EAAAA,EAAY,CAAEhU,QAAS+T,aAAiBhU,MAAQgU,EAAM/T,QAAU+T,EAAM5R,WAAY8R,MAAO,IACtH,CAAC,QACG9L,GAAuB,EAC3B,IAGJ2K,EAAAA,EAAAA,WAAU,KACN,GAAIpL,EAAU,CACVgN,KACA,MAAMC,EAAWC,YAAYF,GAAsB,KACnD,MAAO,KAAQG,cAAcF,GACjC,GACD,CAAC1M,EAAoBP,KACxBoL,EAAAA,EAAAA,WAAU,KAlE0BgC,MAChC,MAAM9B,EAAiB1I,GAAuB2I,OAAQzS,GAC3C0S,EAAAA,EAAYC,YAAY3S,EAAKgK,KACrC4I,KAAK,CAACC,EAAGC,IACHrK,EACiB,aAAlBE,EACO+J,EAAAA,EAAYK,aAAaF,EAAGC,EAAGrK,GAE/BiK,EAAAA,EAAYK,aAAaD,EAAGD,EAAGpK,GAJhB,GAO9BoB,GAAqB2I,IAwDrB8B,IACD,CAACtK,GAAyBvB,EAAYE,KAIzC2J,EAAAA,EAAAA,WAAU,KACN,IAAKpL,EAAU,OACf,IAAKiB,EAAQ,OAEb,MAAMzF,EAAM6H,GAAeX,IACrB0J,EAAU,IAAI7R,KACpB6R,EAAQzI,WAAmD,GAAxCC,KAAKC,MAAMuI,EAAQtI,aAAe,KAErD/C,EAAmBqL,GACnBO,GAAoBnR,EAAK4Q,IAC1B,CAACnL,EAAQjB,EAAU0C,GAAmBvB,KAGzCiK,EAAAA,EAAAA,WAAU,KACN,IAAKpL,EAAU,OACf,GAAIiB,EAAQ,OAEZ,MAAMzF,EAAM6H,GAAeX,IAC3BiK,GAAoBnR,EAAKsF,IAC1B,CAACG,EAAQjB,EAAU0C,GAAmB5B,EAAiBK,KAG1DiK,EAAAA,EAAAA,WAAU,KACFpL,GACJiG,GAAYlE,EAAcwC,QAASzD,IACpC,CAACd,EAAU+B,EAAcwC,QAASzD,KAGrCsK,EAAAA,EAAAA,WAAU,KACN,MAAM5P,EAAM6H,GAAe1B,GAC3BI,EAAcwC,QAAU/I,EAExB,MAAM0Q,EAAOC,OAAOD,KAAK1Q,GACzB,GAAkB,OAAd2F,GAAuB+K,EAAKvT,OAAS,EAAG,CACxC,MAAMyT,EAAU,IAAI7R,KAAK2R,EAAKA,EAAKvT,OAAS,IAC5CoI,EAAmBqL,EACvB,MACIrL,EAAmB,IAAIxG,OAG5B,CAACyF,EAAUmB,IAGd,MAAMkM,IAAaC,EAAAA,EAAAA,SAAQ,IACL,OAAdnM,EACO,WACc,QAAdA,GACA6K,EAAAA,EAAAA,IAAWlL,EAAiB,qBACd,cAAdK,GACA6K,EAAAA,EAAAA,IAAWlL,EAAiB,0BADhC,EAGR,CAACA,EAAiBK,IAEfoM,GAA8BA,CAACC,EAAgBC,KACjDvM,GAAU,GACV,MAAMkL,EAAU,IAAI7R,KAAKuG,GACnBsF,EAAyD,GAAxCxC,KAAKC,MAAMuI,EAAQtI,aAAe,IAC5C,UAAT2J,EACArB,EAAQsB,SAAStB,EAAQuB,WAAaH,EAAQpH,EAAgB,EAAG,GACjD,YAATqH,GACPrB,EAAQsB,SAAStB,EAAQuB,WAAYvH,EAAiBoH,EAAQ,EAAG,GAErEzM,EAAmBqL,GACdpM,GACDiG,GAAYlE,EAAcwC,QAAS6H,IAQrCwB,GAAgBA,CAACC,EAAuC7N,KAW1D,GATAsB,EAAYuM,GACZ5N,EAAYD,GAGZwB,EAAc,MACdE,EAAkB,aAClBqB,GAA2B,CAAC,GAGhB,SAAR8K,EACA,GAAI7N,EAAU,CACV,MAAMxE,EAAM6H,GAAeX,IAC3BiK,GAAoBnR,EAAKsF,EAC7B,MACImF,GAAYlE,EAAcwC,QAASzD,IAMzCgN,GAAwBA,KAC1B,GAAgC,GAA5BpL,GAAkB/J,OAAe,OAAO6H,EAAqB,IAAI8L,EAAAA,EAAY,CAAEhU,QAAS,WAAYiU,MAAO,KAM/G,IAAItR,EAAsC,GAC1C,IAAK,IAAIvC,EAAI,EAAGA,EAAIgK,GAAkB/J,OAAQD,IAAK,CAAC,IAADqV,EAAAC,EAC/C/S,EAAOkC,KAAK,CACR3C,YAAY0E,EAAAA,EAAAA,IACmC,kBAApCwD,GAAkBhK,GAAG8B,WACtB,IAAID,KAAKmI,GAAkBhK,GAAG8B,YAC9BkI,GAAkBhK,GAAG8B,WAC3B,uBAEJH,gBAAiB,GAAGqI,GAAkBhK,GAAG2B,kBACzCtB,qBAAsB,GAA4C,QAA5CgV,EAAGrL,GAAkBhK,GAAGK,4BAAoB,IAAAgV,EAAAA,EAAI,KACtE/U,sBAAuB,GAA6C,QAA7CgV,EAAGtL,GAAkBhK,GAAGM,6BAAqB,IAAAgV,EAAAA,EAAI,MAEhF,CAEAC,EAAAA,EAAWnT,OAAO,gCAnBH,CACX,aAAc,kBACd,uBAAwB,yBAiB+BG,IAEzDiT,GAAgBA,KAClB,GAAwB,GAApBvM,EAAUhJ,OAAe,OAAO6H,EAAqB,IAAI8L,EAAAA,EAAY,CAAEhU,QAAS,WAAYiU,MAAO,KAMvG,IAAItR,EAAsC,GAC1C,IAAK,IAAIvC,EAAI,EAAGA,EAAIgK,GAAkB/J,OAAQD,IAAK,CAAC,IAADyV,EAAAC,EAC/CnT,EAAOkC,KAAK,CACR3C,YAAY0E,EAAAA,EAAAA,IACmC,kBAApCwD,GAAkBhK,GAAG8B,WACtB,IAAID,KAAKmI,GAAkBhK,GAAG8B,YAC9BkI,GAAkBhK,GAAG8B,WAC3B,uBAEJH,gBAAiB,GAAGqI,GAAkBhK,GAAG2B,kBACzCtB,qBAAsB,GAA4C,QAA5CoV,EAAGzL,GAAkBhK,GAAGK,4BAAoB,IAAAoV,EAAAA,EAAI,KACtEnV,sBAAuB,GAA6C,QAA7CoV,EAAG1L,GAAkBhK,GAAGM,6BAAqB,IAAAoV,EAAAA,EAAI,MAEhF,CAEAH,EAAAA,EAAWnT,OAAO,uBAnBH,CACX,aAAc,kBACd,uBAAwB,yBAiBsBG,IAetD,OAZAmQ,EAAAA,EAAAA,WAAU,KAEFjL,EADAH,EACuB,IAAM8N,GAEN,IAAMI,IAG1B,KACH/N,EAAuB,QAE5B,CAACH,EAAU0C,GAAmBf,KAE1BsI,EAAAA,EAAAA,MAAAiB,EAAAA,SAAA,CAAA3B,SAAA,EACHU,EAAAA,EAAAA,MAAA,OAAKoE,UAAWC,EAAAA,EAAOC,eAAehF,SAAA,CAEpB,UAAblI,GAAwBrB,IACrBiK,EAAAA,EAAAA,MAAAiB,EAAAA,SAAA,CAAA3B,SAAA,EACIU,EAAAA,EAAAA,MAAA,OAAKoE,UAAWC,EAAAA,EAAOE,YAAYjF,SAAA,EAC/BD,EAAAA,EAAAA,KAAA,WACAA,EAAAA,EAAAA,KAAA,OAAK+E,UAAWC,EAAAA,EAAOjB,WAAW9D,SAAE8D,MACpCpD,EAAAA,EAAAA,MAAA,OAAKoE,UAAWC,EAAAA,EAAOG,aAAcxS,MAAO,CAAEmO,eAAgB,OAAQb,SAAA,EAClED,EAAAA,EAAAA,KAAA,UAAQkB,QAASA,IAAMpJ,EAAc,QAASiN,UAA0B,SAAflN,EAAwBmN,EAAAA,EAAOI,UAAY,GAAGnF,SAAC,UAGxGD,EAAAA,EAAAA,KAAA,UAAQkB,QAASA,IAAMpJ,EAAc,cAAeiN,UAA0B,eAAflN,EAA8BmN,EAAAA,EAAOI,UAAY,GAAGnF,SAAC,YAGpHD,EAAAA,EAAAA,KAAA,UAAQkB,QAASA,IAAMpJ,EAAc,OAAQiN,UAA0B,QAAflN,EAAuBmN,EAAAA,EAAOI,UAAY,GAAGnF,SAAC,eAK9GU,EAAAA,EAAAA,MAAA,OAAKoE,UAAWC,EAAAA,EAAOK,UAAUpF,SAAA,EAC7BD,EAAAA,EAAAA,KAAA,UAAQ+E,UAAWC,EAAAA,EAAOM,aAAc3S,MAAO,CAAE4S,aAAc,iBAAmBrE,QAASA,KACrE,QAAdrJ,EACAoM,IAA6B,EAAG,SACX,cAAdpM,GACPoM,IAA6B,GAAI,YAIvChE,UAACD,EAAAA,EAAAA,KAACwF,EAAAA,IAAW,OACfxF,EAAAA,EAAAA,KAAA,OAAK+E,UAAWC,EAAAA,EAAOS,aAAaxF,UAChCD,EAAAA,EAAAA,KAAC0F,EAAAA,GAAI,CAACvW,KAAMuK,GAAmBiM,QAAS/L,GAAsBwE,QAAS,CAAC+E,SAE5EnD,EAAAA,EAAAA,KAAA,UAAQ+E,UAAWC,EAAAA,EAAOY,aAAcjT,MAAO,CAAE4S,aAAc,cAAgBrE,QAASA,KAClE,QAAdrJ,EACAoM,GAA4B,EAAG,SACV,cAAdpM,GACPoM,GAA4B,GAAI,YAItChE,UAACD,EAAAA,EAAAA,KAAC6F,EAAAA,IAAY,YAKd,UAAb9N,GAAwBrB,IACrBsJ,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,CAAA3B,UACID,EAAAA,EAAAA,KAAA,OAAKrN,MAAO,CAAEmT,KAAM,EAAGC,UAAW,QAAUhB,UAAU,iBAAgB9E,UAClEU,EAAAA,EAAAA,MAAA,SAAOoE,UAAU,iBAAgB9E,SAAA,EAC7BD,EAAAA,EAAAA,KAAA,SAAAC,UACIU,EAAAA,EAAAA,MAAA,MAAAV,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,QACJU,EAAAA,EAAAA,MAAA,MAAAV,SAAA,CACKwD,GAAoB,aAAc,SAClCF,GAAoB,aAAc,aAEvC5C,EAAAA,EAAAA,MAAA,MAAAV,SAAA,CACKwD,GAAoB,kBAAmB,mBACvCF,GAAoB,kBAAmB,uBAE5C5C,EAAAA,EAAAA,MAAA,MAAAV,SAAA,CACKwD,GAAoB,uBAAwB,wBAC5CF,GAAoB,uBAAwB,4BAEjD5C,EAAAA,EAAAA,MAAA,MAAAV,SAAA,CACKwD,GAAoB,wBAAyB,yBAC7CF,GAAoB,wBAAyB,iCAIxDrB,EAAAA,EAAY8D,YAAY5M,KASpB4G,EAAAA,EAAAA,KAAA,SAAAC,UAAOD,EAAAA,EAAAA,KAAA,MAAAC,UAAID,EAAAA,EAAAA,KAAA,MAAIiG,QAAS,IAAKhG,SAAC,iCAR9BD,EAAAA,EAAAA,KAAA,SAAAC,UACED,EAAAA,EAAAA,KAACkG,EAAAA,EAAa,CACV7N,UAAWe,GACX+M,YAAa1E,GACb2E,UAAW,IACXC,cAAe,cAU7B,UAAbtO,IAAyBrB,IACtBiK,EAAAA,EAAAA,MAAAiB,EAAAA,SAAA,CAAA3B,SAAA,EACIU,EAAAA,EAAAA,MAAA,OAAKoE,UAAWC,EAAAA,EAAOE,YAAYjF,SAAA,EAC/BD,EAAAA,EAAAA,KAAA,WACAA,EAAAA,EAAAA,KAAA,OAAK+E,UAAWC,EAAAA,EAAOjB,WAAW9D,SAAE8D,MACpCpD,EAAAA,EAAAA,MAAA,OAAKoE,UAAWC,EAAAA,EAAOG,aAAcxS,MAAO,CAAEmO,eAAgB,OAAQb,SAAA,EAClED,EAAAA,EAAAA,KAAA,UAAQkB,QAASA,IAAMpJ,EAAc,QAASiN,UAA0B,SAAflN,EAAwBmN,EAAAA,EAAOI,UAAY,GAAGnF,SAAC,UAGxGD,EAAAA,EAAAA,KAAA,UAAQkB,QAASA,IAAMpJ,EAAc,cAAeiN,UAA0B,eAAflN,EAA8BmN,EAAAA,EAAOI,UAAY,GAAGnF,SAAC,YAGpHD,EAAAA,EAAAA,KAAA,UAAQkB,QAASA,IAAMpJ,EAAc,OAAQiN,UAA0B,QAAflN,EAAuBmN,EAAAA,EAAOI,UAAY,GAAGnF,SAAC,eAK9GU,EAAAA,EAAAA,MAAA,OAAKoE,UAAWC,EAAAA,EAAOK,UAAUpF,SAAA,EAC7BD,EAAAA,EAAAA,KAAA,UAAQ+E,UAAWC,EAAAA,EAAOM,aAAc3S,MAAO,CAAE4S,aAAc,iBAAmBrE,QAASA,KACrE,QAAdrJ,EACAoM,IAA6B,EAAG,SACX,cAAdpM,GACPoM,IAA6B,GAAI,YAIvChE,UAACD,EAAAA,EAAAA,KAACwF,EAAAA,IAAW,OACfxF,EAAAA,EAAAA,KAAA,OAAK+E,UAAWC,EAAAA,EAAOS,aAAaxF,UAChCD,EAAAA,EAAAA,KAAC0F,EAAAA,GAAI,CAACvW,KAAM0J,EAAW8M,QAAS1M,EAAcmF,QAAS,CAACzD,SAE5DqF,EAAAA,EAAAA,KAAA,UAAQ+E,UAAWC,EAAAA,EAAOY,aAAcjT,MAAO,CAAE4S,aAAc,cAAgBrE,QAASA,KAClE,QAAdrJ,EACAoM,GAA4B,EAAG,SACV,cAAdpM,GACPoM,GAA4B,GAAI,YAItChE,UAACD,EAAAA,EAAAA,KAAC6F,EAAAA,IAAY,YAKd,UAAb9N,IAAyBrB,IACtBsJ,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,CAAA3B,UACID,EAAAA,EAAAA,KAAA,OAAKrN,MAAO,CAAEmT,KAAM,EAAGC,UAAW,QAAUhB,UAAU,iBAAgB9E,UAClEU,EAAAA,EAAAA,MAAA,SAAOoE,UAAU,iBAAgB9E,SAAA,EAC7BD,EAAAA,EAAAA,KAAA,SAAAC,UACIU,EAAAA,EAAAA,MAAA,MAAAV,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,QACJU,EAAAA,EAAAA,MAAA,MAAAV,SAAA,CACKQ,GAAY,aAAc,SAC1BZ,GAAY,aAAc,aAE/Bc,EAAAA,EAAAA,MAAA,MAAAV,SAAA,CACKQ,GAAY,kBAAmB,mBAC/BZ,GAAY,kBAAmB,uBAEpCc,EAAAA,EAAAA,MAAA,MAAAV,SAAA,CACKQ,GAAY,uBAAwB,wBACpCZ,GAAY,uBAAwB,4BAEzCc,EAAAA,EAAAA,MAAA,MAAAV,SAAA,CACKQ,GAAY,wBAAyB,yBACrCZ,GAAY,wBAAyB,iCAIhDqC,EAAAA,EAAY8D,YAAY3N,IASpB2H,EAAAA,EAAAA,KAAA,SAAAC,UAAOD,EAAAA,EAAAA,KAAA,MAAAC,UAAID,EAAAA,EAAAA,KAAA,MAAIiG,QAAS,IAAKhG,SAAC,iCAR9BD,EAAAA,EAAAA,KAAA,SAAAC,UACED,EAAAA,EAAAA,KAACkG,EAAAA,EAAa,CACV7N,UAAWA,EACX8N,YAAa1E,GACb2E,UAAW,IACXC,cAAe,kBAY/C1F,EAAAA,EAAAA,MAAA,OAAKoE,UAAWC,EAAAA,EAAOsB,eAAerG,SAAA,EAClCU,EAAAA,EAAAA,MAAA,OAAKoE,UAAWC,EAAAA,EAAOuB,WAAWtG,SAAA,EAC9BU,EAAAA,EAAAA,MAAA,UACIoE,UAAW,GAAGC,EAAAA,EAAOwB,gBAA6B,UAAbzO,GAAwBrB,EAAWsO,EAAAA,EAAOyB,OAAS,KACxFvF,QAASA,KAAQoD,GAAc,SAAS,IAAQrE,SAAA,EAChDD,EAAAA,EAAAA,KAAC0G,EAAAA,IAAW,KACZ1G,EAAAA,EAAAA,KAAA,QAAM+E,UAAWC,EAAAA,EAAO2B,YAAY1G,SAAC,uBAEzCU,EAAAA,EAAAA,MAAA,UACIoE,UAAW,GAAGC,EAAAA,EAAOwB,gBAA6B,UAAbzO,GAAwBrB,EAAWsO,EAAAA,EAAOyB,OAAS,KACxFvF,QAASA,KAAQoD,GAAc,SAAS,IAAQrE,SAAA,EAChDD,EAAAA,EAAAA,KAAC4G,EAAAA,IAAO,KACR5G,EAAAA,EAAAA,KAAA,QAAM+E,UAAWC,EAAAA,EAAO2B,YAAY1G,SAAC,0BAI7CD,EAAAA,EAAAA,KAAA,OAAK+E,UAAWC,EAAAA,EAAO6B,UAAU5G,SACf,UAAblI,GAAwBrB,IACrBiK,EAAAA,EAAAA,MAAA,OAAKoE,UAAWC,EAAAA,EAAO8B,YAAY7G,SAAA,EAC/BD,EAAAA,EAAAA,KAAA,SAAO+G,QAAQ,OAAM9G,SAAC,UACtBU,EAAAA,EAAAA,MAAA,SAAOoE,UAAWC,EAAAA,EAAOgC,OAAO/G,SAAA,EAC5BD,EAAAA,EAAAA,KAAA,SAAOnN,KAAK,WAAW+H,GAAG,OAAOqM,QAAStP,EAAQ0I,SAzRrD6G,KACjBtP,EAAW2I,IAAUA,OAyRDP,EAAAA,EAAAA,KAAA,QAAM+E,UAAWC,EAAAA,EAAOmC,kBAMxCxG,EAAAA,EAAAA,MAAA,OAAKoE,UAAWC,EAAAA,EAAOoC,YAAYnH,SAAA,EAC/BU,EAAAA,EAAAA,MAAA,UACIoE,UAAW,GAAGC,EAAAA,EAAOwB,gBAA6B,UAAbzO,GAAyBrB,EAA2B,GAAhBsO,EAAAA,EAAOyB,SAChFvF,QAASA,KAAQoD,GAAc,SAAS,IAASrE,SAAA,EACjDD,EAAAA,EAAAA,KAACqH,EAAAA,IAAW,KACZrH,EAAAA,EAAAA,KAAA,QAAM+E,UAAWC,EAAAA,EAAO2B,YAAY1G,SAAC,cAEzCU,EAAAA,EAAAA,MAAA,UACIoE,UAAW,GAAGC,EAAAA,EAAOwB,gBAA6B,UAAbzO,GAAyBrB,EAA2B,GAAhBsO,EAAAA,EAAOyB,SAChFvF,QAASA,KAAQoD,GAAc,SAAS,IAASrE,SAAA,EACjDD,EAAAA,EAAAA,KAACsH,EAAAA,IAAO,KACRtH,EAAAA,EAAAA,KAAA,QAAM+E,UAAWC,EAAAA,EAAO2B,YAAY1G,SAAC,sB,kCC3nCzD,MAAMsH,GAAAA,EACKpF,YAAc,CAAC3S,EAAUmJ,KAC5B,IAAIiK,EAAOC,OAAOD,KAAKpT,GACvB,IAAK,IAAIgY,EAAW,EAAGA,EAAW5E,EAAKvT,OAAQmY,IAAY,CACvD,MAAMrV,EAAMyQ,EAAK4E,GACjB,GAAI7O,EAAgBxG,GAAM,CACtB,QAAWnB,GAAPxB,GAAgC,MAAZA,EAAI2C,GAYxB,OAAO,EAXP,GAA6B,KAAzBwG,EAAgBxG,IAKoD,GAHhE3C,EAAI2C,GACChB,WACAwE,cACA8R,SAAS9O,EAAgBxG,GAAKhB,WAAWwE,eAE9C,OAAO,CAMvB,CACJ,CACA,OAAO,GAtBT4R,EAyBKhF,aAAe,CAACF,EAAQC,EAAQoF,KACnC,GAAmB,MAAfA,QAAsC1W,GAAf0W,QACA1W,IAAnBqR,EAAEqF,SAAiD1W,IAAnBsR,EAAEoF,GAA4B,CAC9D,GAA8B,kBAAnBrF,EAAEqF,IAAuD,kBAAnBpF,EAAEoF,GAC/C,OAAOrF,EAAEqF,GAAaC,cAAcrF,EAAEoF,IACnC,GAA8B,kBAAnBrF,EAAEqF,IAAuD,kBAAnBpF,EAAEoF,GACtD,OAAOrF,EAAEqF,GAAepF,EAAEoF,EAElC,CAEJ,OAAO,GAnCTH,EAsCKvB,YAAe4B,IAClB,IAAK,MAAMC,KAAKD,EACZ,OAAO,EAEX,OAAO,GAIf,S,mEC3CA,SAASE,EAAiBC,GACtB,MAAM,UAAEC,EAAS,QAAEC,GAAYF,GAEzB,IAAEG,IAAQC,EAAAA,EAAAA,IAAU,CACtBC,UAAW,GAAKC,aAAa,EAAOC,eAAe,EACnDjI,SAAUA,CAACkI,EAAQC,KAAgBD,GAAUP,OAGjD,OAAOhI,EAAAA,EAAAA,KAAA,MAAIkI,IAAKA,EAAIjI,SACfgI,GAET,CAUe,SAAS/B,EAAc6B,GAClC,MAAM,UAAE1P,EAAS,YAAE8N,EAAW,WAAEsC,EAAU,UAAErC,EAAS,cAAEC,GAAkB0B,EAEnEW,EAAiBtC,EACjBuC,EAAiBtC,GAEhBuC,EAAOC,IAAYnR,EAAAA,EAAAA,UAASgR,GAE7BvZ,GAAO6U,EAAAA,EAAAA,SAAS,KAClB,MAAMvE,EAAW,GACjB,IAAK,IAAIrN,EAAQ,EAAGA,EAAQiG,EAAUhJ,OAAQ+C,IAAS,CACnD,GAAIA,EAAQwW,EAAQF,GAAkBtW,EAAQwW,EAC1C,SAGJ,MAAMpZ,EAAM6I,EAAUjG,GACtBqN,EAAS5L,MAAK8M,EAAAA,EAAAA,MAAAiB,EAAAA,SAAA,CAAA3B,SAAA,CACT7N,GAASwW,GACJ5I,EAAAA,EAAAA,KAAC8H,EAAgB,CACfG,SAASjI,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,IACToG,UAAW,WACPa,EAAUtI,GAASA,EAAOoI,GAE1BG,WAAW,KAAO,IAADC,EAA0C,QAAxCA,EAAAvU,SAASwU,eAAe,QAAQ5W,YAAQ,IAAA2W,GAAxCA,EAA0CE,kBACjE,KACFjJ,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,IAELxP,GAASwW,EAAQF,GAA2B,GAATtW,GAC9B4N,EAAAA,EAAAA,KAAC8H,EAAgB,CACfG,SAASjI,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,IACToG,UAAW,WACPa,EAAUtI,GACCA,EAAOoI,EAAiBD,EAAiBA,EAAiBnI,EAAOoI,GAG5EG,WAAW,KAAO,IAADI,EAA0C,QAAxCA,EAAA1U,SAASwU,eAAe,QAAQ5W,YAAQ,IAAA8W,GAAxCA,EAA0CD,kBACjE,KACFjJ,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,KAEN5B,EAAAA,EAAAA,KAAA,MAAIpF,GAAI,QAAQxI,IAASO,MAAO,CAAEqO,WAAY,UAAYE,QAASA,KAA0B,MAAduH,GAAsBA,EAAWjZ,IAASyQ,SACpHkG,EAAY/T,EAAO5C,KAEvB4C,GAASiG,EAAUhJ,OAAS,GACvB2Q,EAAAA,EAAAA,KAAA,MAAAC,UAAID,EAAAA,EAAAA,KAAA,MAAIiG,QAAS,IAAKhG,SAAC,mBACvBD,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,OAEd,CACA,OAAOnC,GACP,CAACmJ,EAAOvQ,IAMZ,OAJAyJ,EAAAA,EAAAA,WAAU,KACN+G,EAASH,IACV,CAACrQ,IAEGlJ,EAAK+C,IAAK0B,GAAiBA,EACtC,C","sources":["services/following_error.ts","utils/excel.ts","features/Dashboard/DashboardLevel4/DashboardLevel4FollErr.tsx","utils/filter-utils.ts","components/Observer/observer.tsx"],"sourcesContent":["import { BASE_URL } from \"../constants\"\nimport { MachineConfigFoll, FormMachineConfigFoll, FollowingErrorData, DashboardFollowingLevel1, DashboardFollowingLevel2, DashboardFollowingLevel3, DashboardFollowingLevel4, } from \"../entities/FollowingErrorEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\n// TODO unimplemented\n//  \"/api/extension/following_error/v1/data\" GetRawFollErrDataController\n\nclass FollErrService {\n    static async GetMachineConfig(machine_id?: number): Promise<MachineConfigFoll[]> {\n        let uri = `${BASE_URL}/api/extension/following_error/v1/machine`\n        if (machine_id != null) {\n            uri += `?machine_id=${machine_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid machine config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.machine_id != \"number\") { throw new Error(\"invalid machine_id value\") }\n            if (typeof (row.following_error_warn ?? 0) != \"number\") { throw new Error(\"invalid following_error_warn value\") }\n            if (typeof (row.following_error_alarm ?? 0) != \"number\") { throw new Error(\"invalid following_error_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertMachineConfig(machine_id: number, fields: FormMachineConfigFoll): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/machine`, {\n            method: 'PATCH',\n            body: JSON.stringify({ machine_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n}\n\nclass DashboardFollErrService {\n    static async DashboardLevel1(start_date: string, end_date: string): Promise<DashboardFollowingLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/l1?start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2(start_date: string, end_date: string, business_unit_id: number): Promise<DashboardFollowingLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/l2?business_unit_id=${business_unit_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3(start_date: string, end_date: string, link_up_id: number): Promise<DashboardFollowingLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/l3?link_up_id=${link_up_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].machine_id != \"number\") { throw new Error(\"invalid machine_id value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4(start_date: string, end_date: string, machine_id: number): Promise<DashboardFollowingLevel4[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/data?machine_id=${machine_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel4[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].following_error != \"number\") { throw new Error(\"invalid following_error value\") }\n            if (data[i].following_error_warn != undefined && typeof data[i].following_error_warn != \"number\") { throw new Error(\"invalid following_error_warn value\") }\n            if (data[i].following_error_alarm != undefined && typeof data[i].following_error_alarm != \"number\") { throw new Error(\"invalid following_error_alarm value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n\n\n\n    static async DashboardLevel1Realtime(): Promise<DashboardFollowingLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/l1/realtime`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2Realtime(business_unit_id: number): Promise<DashboardFollowingLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/l2/realtime?business_unit_id=${business_unit_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3Realtime(link_up_id: number): Promise<DashboardFollowingLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/l3/realtime?link_up_id=${link_up_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].machine_id != \"number\") { throw new Error(\"invalid machine_id value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4Realtime(machine_id: number): Promise<DashboardFollowingLevel4[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/data/realtime?machine_id=${machine_id}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel4[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].following_error != \"number\") { throw new Error(\"invalid following_error value\") }\n            if (data[i].following_error_warn != undefined && typeof data[i].following_error_warn != \"number\") { throw new Error(\"invalid following_error_warn value\") }\n            if (data[i].following_error_alarm != undefined && typeof data[i].following_error_alarm != \"number\") { throw new Error(\"invalid following_error_alarm value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n}\n\nexport { FollErrService, DashboardFollErrService }","import { format } from \"date-fns\"\nimport ExcelJS from \"exceljs\"\n\n/**\n * @typedef {Object} ExcelUtils\n * @property {Method} export - Export to excel from column (Array of String) and values (Object)\n * @property {Method} import - Import from excel returning Array of Sheet, with Sheet being Array of Object\n */\nclass ExcelUtils {\n    static export(export_name: string, column: string[], values: { [key: string]: string }[]) {\n        // Create a new workbook\n        const workbook = new ExcelJS.Workbook()\n        const worksheet = workbook.addWorksheet(export_name)\n\n        const numberToLetter = (number: number) => {\n            const letters = [\n                \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n                \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\",\n                \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\",\n                \"Y\", \"Z\",\n                \"AA\", \"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"AG\", \"AH\",\n                \"AI\", \"AJ\", \"AK\", \"AL\", \"AM\", \"AN\", \"AO\", \"AP\",\n                \"AQ\", \"AR\", \"AS\", \"AT\", \"AU\", \"AV\", \"AW\", \"AX\",\n                \"AY\", \"AZ\"\n            ]\n\n            if (number >= 0 && number <= 51) {\n                return letters[number]\n            }\n\n            return \"Invalid number\"\n        }\n\n        const startRow = 2\n        column.map((key, index) => {\n            worksheet.getColumn(`${numberToLetter(index)}`).width = 20\n            worksheet.getCell(`${numberToLetter(index)}${startRow - 1}`).value = String(key.toUpperCase())\n            worksheet.getCell(`${numberToLetter(index)}${startRow - 1}`).style = {\n                fill: {\n                    type: \"pattern\",\n                    pattern: \"solid\",\n                    fgColor: { argb: \"c8c8c8\" }, // Yellow background\n                },\n                font: {\n                    bold: true, // Bold font style\n                },\n                alignment: {\n                    vertical: \"middle\", // Align vertically at the middle\n                    horizontal: \"center\",\n                },\n                border: {\n                    top: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    left: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    right: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    bottom: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                },\n            }\n        })\n\n        // Add table data\n        values.map((val, index) => {\n            const row: string[] = []\n            column.map((key) => {\n                if (val[key] != null) {\n                    row.push(val[key])\n                } else {\n                    row.push('')\n                }\n            })\n            const dataRow = worksheet.addRow(row)\n            dataRow.eachCell((cell) => {\n                cell.style = {\n                    alignment: {\n                        vertical: \"middle\",\n                        horizontal: \"center\",\n                    },\n                    border: {\n                        top: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        left: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        right: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        bottom: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                    },\n                }\n            })\n        })\n\n        // Generate the Excel file\n        workbook.xlsx.writeBuffer().then((buffer) => {\n            // Create a Blob from the buffer\n            const blob = new Blob([buffer], {\n                type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            })\n\n            // Create a download link\n            const link = document.createElement(\"a\")\n            link.href = window.URL.createObjectURL(blob)\n            link.download = `${export_name}.xlsx`\n\n            // Simulate a click on the link to trigger the download\n            link.click()\n\n            // Clean up the URL object\n            window.URL.revokeObjectURL(link.href)\n        })\n    }\n\n    static async import(data: ArrayBuffer): Promise<{ [key: string]: string }[]> {\n        // Create a new workbook\n        const workbook = new ExcelJS.Workbook()\n        await workbook.xlsx.load(data)\n        const book: { [key: string | number]: any }[][] = []\n        workbook.eachSheet((worksheet) => {\n            const sheet: { [key: string | number]: any }[] = []\n            worksheet.eachRow((row) => {\n                sheet.push(row.values)\n            })\n            book.push(sheet)\n        })\n        // we only read sheet number 1\n        if (book.length > 0) {\n            const sheet = book[0]\n            const result: { [key: string]: string }[] = []\n            for (let i = 1; i < sheet.length; i++) {\n                const obj: { [key: string]: string } = {}\n                for (let j = 0; j < sheet[i].length; j++) {\n                    if (sheet[0][j] == null || typeof (sheet[0][j]) != 'string') continue\n                    if (sheet[i][j] instanceof Date) {\n                        obj[sheet[0][j].toLowerCase()] = format(sheet[i][j], \"yyyy-MM-dd HH:mm:ss\")\n                    } else {\n                        obj[sheet[0][j].toLowerCase()] = typeof (sheet[i][j]) == 'object' ? sheet[i][j].result : sheet[i][j] ?? ''\n                    }\n                }\n                result.push(obj)\n            }\n            return result\n        } else {\n            return []\n        }\n    }\n}\n\nexport default ExcelUtils","import { useContext, useEffect, useMemo, useRef, useState } from \"react\"\nimport styles from './DashboardLevel4.module.css'\nimport { BASE_URL } from \"../../../constants\"\nimport { format, formatDate } from \"date-fns\"\nimport AppContext from \"../../../context\"\nimport filterUtils from \"../../../utils/filter-utils\"\nimport { AlertEntity } from \"../../../layouts/Alert/AlertEntity\"\nimport { FaAngleDoubleLeft, FaAngleDoubleRight, FaAngleLeft, FaAngleRight, FaChartLine, FaSortDown, FaSortUp, FaTable } from \"react-icons/fa\"\nimport { useParams } from \"react-router-dom\"\nimport TableObserved from \"../../../components/Observer/observer\"\nimport { GrLineChart } from \"react-icons/gr\"\nimport { TbTable } from \"react-icons/tb\"\n\n// ========================================= CHART IMPORT =========================================  //\nimport {\n    Chart as ChartJS,\n    LineElement,\n    PointElement,\n    LinearScale,\n    Title,\n    CategoryScale,\n    Tooltip,\n    Legend,\n    ChartData,\n    ChartOptions,\n    defaults\n} from 'chart.js'\n\nimport { Plugin } from 'chart.js'\nimport { Line } from 'react-chartjs-2'\nimport { DashboardFollowingLevel4 } from \"../../../entities/FollowingErrorEntity\"\nimport { DashboardFollErrService } from \"../../../services/following_error\"\nimport ExcelUtils from \"../../../utils/excel\"\n\nChartJS.register(\n    LineElement,\n    PointElement,\n    LinearScale,\n    Title,\n    CategoryScale,\n    Tooltip,\n    Legend\n)\n\ndefaults.maintainAspectRatio = false\ndefaults.responsive = true\n// ========================================= CHART IMPORT =========================================  //\n\n\ninterface FollowingErrorPageProps {\n    realtime: boolean\n    setRealtime: (value: boolean) => void\n    refresh: number\n    start_date: Date\n    end_date: Date\n    setHandleGenerateExcel: (fn: (() => void) | null) => void\n}\n\n\nconst FollowingErrorPage: React.FC<FollowingErrorPageProps> = ({ realtime, setRealtime, refresh, start_date, end_date, setHandleGenerateExcel }) => {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n\n    const { machineId } = useParams()\n\n    const CHART_COLORS = {\n        chartLine: '#fb8500',\n        graphicGood: 'rgba(41, 191, 18, 0.21)',\n        graphicWarn: 'rgba(244, 188, 20, 0.28)',\n        graphicAlarm: 'rgba(213, 14, 81, 0.2)',\n    }\n\n    const [activeHourIndex, setActiveHourIndex] = useState(new Date())\n    const [isAuto, setIsAuto] = useState(true)\n    const [chartSplit, setChartSplit] = useState<\"hour\" | \"minutes_10\" | \"all\">(\"minutes_10\")\n    const [viewMode, setViewMode] = useState<'chart' | 'table' | 'table-ool'>('chart')\n    const [sortedCols, setSortedCols] = useState<keyof DashboardFollowingLevel4 | null>(null)\n    const [sortedColsType, setSortedColsType] = useState<\"ascending\" | \"descending\">(\"ascending\")\n\n\n    // ========================================= STATE FOLLOWING ERROR BY DATE =========================================  //\n    const [tableData, setTableData] = useState<DashboardFollowingLevel4[]>([])\n    const [tableDataCache, setTableDataCache] = useState<DashboardFollowingLevel4[]>([])\n    const mappedDataRef = useRef<{ [key: string]: DashboardFollowingLevel4[] }>({})\n\n    const [tableDataFilter, setTableDataFilter] = useState<{ [key: string]: string }>({})\n\n    const [chartData, setChartData] = useState<ChartData<'line'>>({ labels: [], datasets: [] })\n    const [chartOptions, setChartOptions] = useState<ChartOptions<'line'>>({})\n\n    const firstData = useRef<DashboardFollowingLevel4 | null>(null)\n    // ========================================= STATE FOLLOWING ERROR BY DATE =========================================  //\n\n\n    // ========================================= STATE FOLLOWING ERROR REALTIME =========================================  //\n    const [tableDataRealtime, setTableDataRealtime] = useState<DashboardFollowingLevel4[]>([])\n    const [tableDataRealtimeCache, setTableDataRealtimeCache] = useState<DashboardFollowingLevel4[]>([])\n\n    const [tableDataRealtimeFilter, setTableDataRealtimeFilter] = useState<{ [key: string]: string }>({})\n\n    const [chartDataRealtime, setChartDataRealtime] = useState<ChartData<'line'>>({ labels: [], datasets: [], })\n    const [chartOptionsRealtime, setChartOptionsRealtime] = useState<ChartOptions<'line'>>({})\n\n    const firstDataRealtime = useRef<DashboardFollowingLevel4 | null>(null)\n    // ========================================= STATE FOLLOWING ERROR REALTIME =========================================  //\n\n\n    function splitDataToMap(data: DashboardFollowingLevel4[]) {\n        const map: { [key: string]: DashboardFollowingLevel4[] } = {}\n\n        if (chartSplit == \"all\") {\n            return { \"all\": [...data].toReversed() }\n        }\n\n        data.toReversed().forEach(item => {\n            const date = new Date(item.created_at)\n            const rounded = new Date(date)\n            rounded.setMinutes(Math.floor(date.getMinutes() / 10) * 10)\n            rounded.setSeconds(0)\n            rounded.setMilliseconds(0)\n\n            let key = format(rounded, \"yyyy-MM-dd HH:00:00\")\n            switch (chartSplit) {\n                case \"hour\": {\n                    key = format(rounded, \"yyyy-MM-dd HH:00:00\")\n                    break\n                }\n                case 'minutes_10': {\n                    key = format(rounded, \"yyyy-MM-dd HH:mm:00\")\n                    break\n                }\n                default:\n                    break;\n            }\n\n            if (map[key] == undefined) {\n                map[key] = []\n            } else {\n                map[key].push(item)\n            }\n        })\n\n        return map\n    }\n\n\n    // ========================================= FUNCTIONS FOLLOWING ERROR BY DATE =========================================  //\n    const statusArea: Plugin<'line'> = {\n        id: 'statusArea',\n        beforeDatasetsDraw(chart) {\n            const followingErrorData = firstData.current\n\n            const { ctx, chartArea, scales } = chart\n            if (\n                !chartArea ||\n                !scales.x ||\n                !scales.y ||\n                followingErrorData?.following_error_warn == null ||\n                followingErrorData?.following_error_alarm == null\n            ) return\n\n            ctx.save()\n\n            // --- Area Normal (Green) ---\n            const startNormalArea = scales.y.min\n            const endNormalArea = followingErrorData?.following_error_warn ?? 0\n\n            const startNormalAreaPixel = scales.y.getPixelForValue(startNormalArea)\n            const endNormalAreaPixel = scales.y.getPixelForValue(endNormalArea)\n\n            ctx.fillStyle = CHART_COLORS.graphicGood\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startNormalAreaPixel, endNormalAreaPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startNormalAreaPixel - endNormalAreaPixel)\n            )\n\n            // --- Area Warn (Kuning) ---\n            const startMinWarn = followingErrorData ? followingErrorData.following_error_warn : 0\n            const endMinWarn = followingErrorData ? followingErrorData.following_error_alarm : 0\n\n            const startMinWarnPixel = scales.y.getPixelForValue(startMinWarn)\n            const endMinWarnPixel = scales.y.getPixelForValue(endMinWarn)\n\n            ctx.fillStyle = CHART_COLORS.graphicWarn\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinWarnPixel, endMinWarnPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinWarnPixel - endMinWarnPixel)\n            )\n\n\n            // --- Area Alarm (Merah) ---\n            const startMinAlarm = followingErrorData ? followingErrorData.following_error_alarm : 0\n            const endMinAlarm = scales.y.max\n\n            const startMinAlarmPixel = scales.y.getPixelForValue(startMinAlarm)\n            const endMinAlarmPixel = scales.y.getPixelForValue(endMinAlarm)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixel, endMinAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixel - endMinAlarmPixel)\n            )\n\n            ctx.restore()\n        }\n    }\n    const updateChart = (mapData: { [key: string]: DashboardFollowingLevel4[] }, activeHourIndex: Date) => {\n        // Get Data by activeHourIndex\n        const flooredMinutes = `${Math.floor(activeHourIndex.getMinutes() / 10)}0`\n\n        let key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n        switch (chartSplit) {\n            case \"hour\": {\n                key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n                break\n            }\n            case 'minutes_10': {\n                key = format(activeHourIndex, `yyyy-MM-dd HH:${flooredMinutes}:00`)\n                break\n            }\n            case 'all': {\n                key = \"all\"\n                break\n            }\n            default:\n                break;\n        }\n\n        const groupData = mapData[key] ?? []\n\n        if (!groupData) {\n            return\n        }\n\n        // Get Labels & Data\n        const newLabels = groupData.map(msg => format(msg.created_at, \"HH:mm:ss\"))\n        const newData = groupData.map(msg => msg.following_error)\n\n        // Get Area Warn, Alarm & Good\n        const reversedData = groupData.toReversed()\n        firstData.current = reversedData[0]\n\n        // Calculate min & max y\n        const dataMin = Math.min(...newData)\n        const dataMax = Math.max(...newData)\n        const range = dataMax - dataMin || 1\n        const padding = 0.2\n\n        const customMin = dataMin - range * padding\n        const customMax = dataMax + range * padding\n\n        setChartData({\n            labels: newLabels,\n            datasets: [\n                {\n                    label: \"Following Error\",\n                    data: newData,\n                    borderColor: CHART_COLORS.chartLine,\n                    pointBackgroundColor: CHART_COLORS.chartLine,\n                    pointBorderColor: '#ffffff',\n                    pointHoverBackgroundColor: '#ffffff',\n                    pointHoverBorderColor: CHART_COLORS.chartLine,\n\n                    borderWidth: 4,\n                    pointRadius: 0,\n                },\n            ],\n        })\n\n        setChartOptions({\n            responsive: true,\n            maintainAspectRatio: false,\n            animation: {\n                duration: 800,\n                easing: 'easeInOutCubic',\n            },\n            plugins: {\n                legend: {\n                    position: 'top',\n                    labels: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 14,\n                            weight: 500,\n                            family: \"'Inter', 'Segoe UI', sans-serif\",\n                        },\n                        usePointStyle: true,\n                        pointStyle: 'rectRounded',\n                    },\n                },\n                tooltip: {\n                    backgroundColor: '#1f2937',\n                    titleColor: '#f8fafc',\n                    bodyColor: '#cbd5e1',\n                    padding: 12,\n                    borderColor: '#0077b6',\n                    borderWidth: 1,\n                    cornerRadius: 8,\n                    titleFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 14,\n                        weight: 600,\n                    },\n                    bodyFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 13,\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        maxRotation: 45,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        padding: 8,\n                    },\n                    min: customMin,\n                    max: customMax,\n                },\n            },\n            layout: {\n                padding: {\n                    top: 10,\n                    bottom: 10,\n                    left: 10,\n                    right: 10,\n                },\n            },\n            elements: {\n                line: {\n                    borderJoinStyle: 'round',\n                },\n                point: {\n                    pointStyle: 'circle',\n                },\n            },\n        })\n    }\n\n    const handleFilterAndSort = () => {\n        const table_filtered = tableDataCache.filter((row) => {\n            return filterUtils.FilterTable(row, tableDataFilter)\n        }).sort((a, b) => {\n            if (!sortedCols) { return 0 }\n            if (sortedColsType == \"ascending\") {\n                return filterUtils.SortingTable(a, b, sortedCols)\n            } else {\n                return filterUtils.SortingTable(b, a, sortedCols)\n            }\n        })\n        setTableData(table_filtered)\n    }\n    const filterTable = (column: keyof DashboardFollowingLevel4, columnnName?: string) => {\n        return <div>\n            <input style={{ fontSize: \"12px\", marginTop: \"0.5dvh\", width: \"150px\" }} type=\"text\" value={tableDataFilter[column] ?? \"\"}\n                placeholder={`${columnnName ?? column} ...`}\n                onChange={(event) => {\n                    setTableDataFilter((prev) => {\n                        const newData = { ...prev }\n                        newData[column] = event.target.value\n                        return newData\n                    })\n                }}\n            />\n        </div>\n    }\n    const headerTable = (column: keyof DashboardFollowingLevel4, columnName?: string) => {\n        return <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", gap: \"3px\", whiteSpace: \"nowrap\", cursor: \"pointer\" }}\n            onClick={() => {\n                setSortedCols(column)\n                if (sortedColsType === \"ascending\") {\n                    setSortedColsType(\"descending\")\n                } else {\n                    setSortedColsType(\"ascending\")\n                }\n            }}\n        >\n            <div>{columnName ?? column}</div>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0\", alignItems: \"center\", justifyItems: \"center\" }}>\n                <FaSortUp style={{ color: ((sortedCols == column && sortedColsType == \"descending\") ? \"var(--secondary-color)\" : \"silver\"), margin: 0, padding: 0, height: '18px' }} />\n                <FaSortDown style={{ color: ((sortedCols == column && sortedColsType == \"ascending\") ? \"var(--secondary-color)\" : \"silver\"), margin: \"-18px\", padding: 0, height: '18px' }} />\n            </div>\n        </div>\n    }\n\n    const generateData = async (withLoading: boolean) => {\n        if (withLoading) {\n            contextShowLoadingFunc(true)\n        }\n\n        try {\n            const resp = await DashboardFollErrService.DashboardLevel4(\n                formatDate(start_date, 'yyyy-MM-dd'),\n                formatDate(end_date, 'yyyy-MM-dd'),\n                Number(machineId)\n            )\n\n            setTableData(resp)\n            setTableDataCache(resp)\n\n            const map = splitDataToMap(resp)\n            mappedDataRef.current = map\n\n            const keys = Object.keys(map)\n            if (keys.length > 0 && chartSplit != \"all\") {\n                const newDate = new Date(keys[keys.length - 1])\n                setActiveHourIndex(newDate)\n                updateChart(mappedDataRef.current, newDate)\n            } else {\n                updateChart(mappedDataRef.current, activeHourIndex)\n            }\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3 }))\n        } finally {\n            contextShowLoadingFunc(false)\n        }\n    }\n    const followingErrorDataRows = (index: number, row: DashboardFollowingLevel4) => {\n        let valueColor = 'black'\n        let valueWeight = '400'\n\n        const { following_error, following_error_warn, following_error_alarm } = row\n\n        if (following_error_warn != undefined && following_error < following_error_warn) {\n            valueColor = 'green'\n            valueWeight = 'bold'\n        }\n\n        if (following_error_warn != undefined && following_error >= following_error_warn) {\n            valueColor = 'orange'\n            valueWeight = 'bold'\n        }\n\n        if (following_error_alarm != undefined && following_error >= following_error_alarm) {\n            valueColor = 'red'\n            valueWeight = 'bold'\n        }\n\n        return <>\n            <td>{index + 1}</td>\n            <td>{format(row.created_at, `yyyy-MM-dd HH:mm:ss`)}</td>\n            <td style={{ color: valueColor, fontWeight: valueWeight }}>{row.following_error}</td>\n            <td>{row.following_error_warn}</td>\n            <td>{row.following_error_alarm}</td>\n        </>\n    }\n\n    useEffect(() => {\n        handleFilterAndSort()\n    }, [tableDataFilter, sortedCols, sortedColsType])\n    useEffect(() => {\n        // no loading on first open\n        generateData(refresh != 0)\n    }, [refresh])\n    // ========================================= FUNCTIONS FOLLOWING ERROR BY DATE =========================================  //\n\n\n    // ========================================= FUNCTIONS FOLLOWING ERROR REALTIME =========================================  //\n    const statusAreaRealtime: Plugin<'line'> = {\n        id: 'statusAreaRealtime',\n        beforeDatasetsDraw(chart) {\n            const followingErrorData = firstDataRealtime.current\n\n            const { ctx, chartArea, scales } = chart\n            if (\n                !chartArea ||\n                !scales.x ||\n                !scales.y ||\n                followingErrorData?.following_error_warn == null ||\n                followingErrorData?.following_error_alarm == null\n            ) return\n\n            ctx.save()\n\n            // --- Area Normal (Green) ---\n            const startNormalArea = scales.y.min\n            const endNormalArea = followingErrorData?.following_error_warn ?? 0\n\n            const startNormalAreaPixel = scales.y.getPixelForValue(startNormalArea)\n            const endNormalAreaPixel = scales.y.getPixelForValue(endNormalArea)\n\n            ctx.fillStyle = CHART_COLORS.graphicGood\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startNormalAreaPixel, endNormalAreaPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startNormalAreaPixel - endNormalAreaPixel)\n            )\n\n            // --- Area Warn (Kuning) ---\n            const startMinWarn = followingErrorData ? followingErrorData.following_error_warn : 0\n            const endMinWarn = followingErrorData ? followingErrorData.following_error_alarm : 0\n\n            const startMinWarnPixel = scales.y.getPixelForValue(startMinWarn)\n            const endMinWarnPixel = scales.y.getPixelForValue(endMinWarn)\n\n            ctx.fillStyle = CHART_COLORS.graphicWarn\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinWarnPixel, endMinWarnPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinWarnPixel - endMinWarnPixel)\n            )\n\n            // --- Area Alarm (Merah) ---\n            const startMinAlarm = followingErrorData ? followingErrorData.following_error_alarm : 0\n            const endMinAlarm = scales.y.max\n\n            const startMinAlarmPixel = scales.y.getPixelForValue(startMinAlarm)\n            const endMinAlarmPixel = scales.y.getPixelForValue(endMinAlarm)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixel, endMinAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixel - endMinAlarmPixel)\n            )\n\n            ctx.restore()\n        }\n    }\n    const updateChartRealtime = (mapData: { [key: string]: DashboardFollowingLevel4[] }, activeHourIndex: Date) => {\n        // Get Data by activeHourIndex\n        const flooredMinutes = `${Math.floor(activeHourIndex.getMinutes() / 10)}0`\n\n        let key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n        switch (chartSplit) {\n            case \"hour\": {\n                key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n                break\n            }\n            case 'minutes_10': {\n                key = format(activeHourIndex, `yyyy-MM-dd HH:${flooredMinutes}:00`)\n                break\n            }\n            case 'all': {\n                key = \"all\"\n                break\n            }\n            default:\n                break;\n        }\n\n        const groupData = mapData[key] ?? []\n\n        if (!groupData) {\n            return\n        }\n\n        // Get Labels & Data\n        const newLabels = groupData.map(msg => format(msg.created_at, \"HH:mm:ss\"))\n        const newData = groupData.map(msg => msg.following_error)\n\n        // Get Area Warn, Alarm & Good\n        const firstData = groupData[0]\n        firstDataRealtime.current = firstData\n\n        // Calculate min & max y\n        const dataMin = Math.min(...newData)\n        const dataMax = Math.max(...newData)\n        const range = dataMax - dataMin || 1\n        const padding = 0.2\n\n        const customMin = dataMin - range * padding\n        const customMax = dataMax + range * padding\n\n\n        setChartDataRealtime({\n            labels: newLabels,\n            datasets: [\n                {\n                    label: \"Following Error\",\n                    data: newData,\n                    borderColor: CHART_COLORS.chartLine,\n                    pointBackgroundColor: CHART_COLORS.chartLine,\n                    pointBorderColor: '#ffffff',\n                    pointHoverBackgroundColor: '#ffffff',\n                    pointHoverBorderColor: CHART_COLORS.chartLine,\n\n                    borderWidth: 4,\n                    pointRadius: 0\n                },\n            ],\n        })\n\n        setChartOptionsRealtime({\n            responsive: true,\n            maintainAspectRatio: false,\n            animation: {\n                duration: 800,\n                easing: 'easeInOutCubic',\n            },\n            plugins: {\n                legend: {\n                    position: 'top',\n                    labels: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 14,\n                            weight: 500,\n                            family: \"'Inter', 'Segoe UI', sans-serif\",\n                        },\n                        usePointStyle: true,\n                        pointStyle: 'rectRounded',\n                    },\n                },\n                tooltip: {\n                    backgroundColor: '#1f2937',\n                    titleColor: '#f8fafc',\n                    bodyColor: '#cbd5e1',\n                    padding: 12,\n                    borderColor: '#0077b6',\n                    borderWidth: 1,\n                    cornerRadius: 8,\n                    titleFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 14,\n                        weight: 600,\n                    },\n                    bodyFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 13,\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        maxRotation: 45,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        padding: 8,\n                    },\n                    min: customMin,\n                    max: customMax,\n                },\n            },\n            layout: {\n                padding: {\n                    top: 10,\n                    bottom: 10,\n                    left: 10,\n                    right: 10,\n                },\n            },\n            elements: {\n                line: {\n                    borderJoinStyle: 'round',\n                },\n                point: {\n                    pointStyle: 'circle',\n                },\n            },\n        })\n    }\n\n    const handleFilterAndSortRealtime = () => {\n        const table_filtered = tableDataRealtimeCache.filter((row) => {\n            return filterUtils.FilterTable(row, tableDataRealtimeFilter)\n        }).sort((a, b) => {\n            if (!sortedCols) { return 0 }\n            if (sortedColsType == \"ascending\") {\n                return filterUtils.SortingTable(a, b, sortedCols)\n            } else {\n                return filterUtils.SortingTable(b, a, sortedCols)\n            }\n        })\n        setTableDataRealtime(table_filtered)\n    }\n    const filterTableRealtime = (column: keyof DashboardFollowingLevel4, columnnName?: string) => {\n        return <div>\n            <input style={{ fontSize: \"12px\", marginTop: \"0.5dvh\", width: \"150px\" }} type=\"text\" value={tableDataRealtimeFilter[column] ?? \"\"}\n                placeholder={`${columnnName ?? column} ...`}\n                onChange={(event) => {\n                    setTableDataRealtimeFilter((prev) => {\n                        const newData = { ...prev }\n                        newData[column] = event.target.value\n                        return newData\n                    })\n                }}\n            />\n        </div>\n    }\n    const headerTableRealtime = (column: keyof DashboardFollowingLevel4, columnName?: string) => {\n        return <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", gap: \"3px\", whiteSpace: \"nowrap\", cursor: \"pointer\" }}\n            onClick={() => {\n                setSortedCols(column)\n                if (sortedColsType === \"ascending\") {\n                    setSortedColsType(\"descending\")\n                } else {\n                    setSortedColsType(\"ascending\")\n                }\n            }}\n        >\n            <div>{columnName ?? column}</div>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0\", alignItems: \"center\", justifyItems: \"center\" }}>\n                <FaSortUp style={{ color: ((sortedCols == column && sortedColsType == \"descending\") ? \"var(--secondary-color)\" : \"silver\"), margin: 0, padding: 0, height: '18px' }} />\n                <FaSortDown style={{ color: ((sortedCols == column && sortedColsType == \"ascending\") ? \"var(--secondary-color)\" : \"silver\"), margin: \"-18px\", padding: 0, height: '18px' }} />\n            </div>\n        </div>\n    }\n\n    const generateDataRealtime = async () => {\n        try {\n            const resp = await DashboardFollErrService.DashboardLevel4Realtime(Number(machineId))\n\n            setTableDataRealtime(resp)\n            setTableDataRealtimeCache(resp)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3 }))\n        } finally {\n            contextShowLoadingFunc(false)\n        }\n    }\n\n    useEffect(() => {\n        if (realtime) {\n            generateDataRealtime()\n            const interval = setInterval(generateDataRealtime, 3000)\n            return () => { clearInterval(interval) }\n        }\n    }, [contextAccessToken, realtime])\n    useEffect(() => {\n        handleFilterAndSortRealtime()\n    }, [tableDataRealtimeFilter, sortedCols, sortedColsType])\n    // ========================================= FUNCTIONS FOLLOWING ERROR REALTIME =========================================  //\n\n    // Auto mode\n    useEffect(() => {\n        if (!realtime) return\n        if (!isAuto) return\n\n        const map = splitDataToMap(tableDataRealtime)\n        const newDate = new Date()\n        newDate.setMinutes(Math.floor(newDate.getMinutes() / 10) * 10)\n\n        setActiveHourIndex(newDate)\n        updateChartRealtime(map, newDate)\n    }, [isAuto, realtime, tableDataRealtime, chartSplit])\n\n    // Manual mode\n    useEffect(() => {\n        if (!realtime) return\n        if (isAuto) return\n\n        const map = splitDataToMap(tableDataRealtime)\n        updateChartRealtime(map, activeHourIndex)\n    }, [isAuto, realtime, tableDataRealtime, activeHourIndex, chartSplit])\n\n    // by date\n    useEffect(() => {\n        if (realtime) { return }\n        updateChart(mappedDataRef.current, activeHourIndex)\n    }, [realtime, mappedDataRef.current, activeHourIndex])\n\n    // cache update\n    useEffect(() => {\n        const map = splitDataToMap(tableData)\n        mappedDataRef.current = map\n\n        const keys = Object.keys(map)\n        if (chartSplit != \"all\" && keys.length > 0) {\n            const newDate = new Date(keys[keys.length - 1])\n            setActiveHourIndex(newDate)\n        } else {\n            setActiveHourIndex(new Date())\n        }\n\n    }, [realtime, chartSplit])\n\n    // title chart\n    const titleChart = useMemo(() => {\n        if (chartSplit == \"all\") {\n            return \"All Data\"\n        } else if (chartSplit == \"hour\") {\n            return formatDate(activeHourIndex, \"dd MMM yyyy HH:00\")\n        } else if (chartSplit == \"minutes_10\") {\n            return formatDate(activeHourIndex, \"dd MMM yyyy HH:mm\")\n        }\n    }, [activeHourIndex, chartSplit])\n\n    const handleChangeActiveHourIndex = (amount: number, unit: 'hours' | 'minutes') => {\n        setIsAuto(false)\n        const newDate = new Date(activeHourIndex)\n        const flooredMinutes = Math.floor(newDate.getMinutes() / 10) * 10\n        if (unit === 'hours') {\n            newDate.setHours(newDate.getHours() + amount, flooredMinutes, 0, 0)\n        } else if (unit === 'minutes') {\n            newDate.setHours(newDate.getHours(), flooredMinutes + amount, 0, 0)\n        }\n        setActiveHourIndex(newDate)\n        if (!realtime) {\n            updateChart(mappedDataRef.current, newDate)\n        }\n    }\n\n    const handleToggle = () => {\n        setIsAuto((prev) => !prev)\n    }\n\n    const handleSetPage = (page: \"chart\" | \"table\" | \"table-ool\", realtime: boolean) => {\n        // set state\n        setViewMode(page)\n        setRealtime(realtime)\n\n        // reset everything\n        setSortedCols(null)\n        setSortedColsType(\"ascending\")\n        setTableDataRealtimeFilter({})\n\n        // update chart\n        if (page == \"chart\") {\n            if (realtime) {\n                const map = splitDataToMap(tableDataRealtime)\n                updateChartRealtime(map, activeHourIndex)\n            } else {\n                updateChart(mappedDataRef.current, activeHourIndex)\n            }\n        }\n    }\n\n    // excel\n    const generateExcelRealtime = () => {\n        if (tableDataRealtime.length == 0) { return contextShowAlertFunc(new AlertEntity({ message: \"NO DATA!\", level: 3 })); }\n\n        const column = [\n            \"created_at\", \"following_error\",\n            \"following_error_warn\", \"following_error_alarm\"\n        ]\n        let values: { [key: string]: string }[] = []\n        for (let i = 0; i < tableDataRealtime.length; i++) {\n            values.push({\n                created_at: format(\n                    typeof tableDataRealtime[i].created_at === \"string\"\n                        ? new Date(tableDataRealtime[i].created_at)\n                        : tableDataRealtime[i].created_at,\n                    \"yyyy-MM-dd HH:mm:ss\"\n                ),\n                following_error: `${tableDataRealtime[i].following_error}`,\n                following_error_warn: `${tableDataRealtime[i].following_error_warn ?? \"\"}`,\n                following_error_alarm: `${tableDataRealtime[i].following_error_alarm ?? \"\"}`,\n            })\n        }\n\n        ExcelUtils.export(`Following Error Data Realtime`, column, values)\n    }\n    const generateExcel = () => {\n        if (tableData.length == 0) { return contextShowAlertFunc(new AlertEntity({ message: \"NO DATA!\", level: 3 })); }\n\n        const column = [\n            \"created_at\", \"following_error\",\n            \"following_error_warn\", \"following_error_alarm\"\n        ]\n        let values: { [key: string]: string }[] = []\n        for (let i = 0; i < tableDataRealtime.length; i++) {\n            values.push({\n                created_at: format(\n                    typeof tableDataRealtime[i].created_at === \"string\"\n                        ? new Date(tableDataRealtime[i].created_at)\n                        : tableDataRealtime[i].created_at,\n                    \"yyyy-MM-dd HH:mm:ss\"\n                ),\n                following_error: `${tableDataRealtime[i].following_error}`,\n                following_error_warn: `${tableDataRealtime[i].following_error_warn ?? \"\"}`,\n                following_error_alarm: `${tableDataRealtime[i].following_error_alarm ?? \"\"}`,\n            })\n        }\n\n        ExcelUtils.export(`Following Error Data`, column, values)\n    }\n\n    useEffect(() => {\n        if (realtime) {\n            setHandleGenerateExcel(() => generateExcelRealtime)\n        } else {\n            setHandleGenerateExcel(() => generateExcel)\n        }\n\n        return () => {\n            setHandleGenerateExcel(null)\n        }\n    }, [realtime, tableDataRealtime, tableData])\n\n    return <>\n        <div className={styles.cardBodyHeader}>\n\n            {viewMode === 'chart' && realtime && (\n                <>\n                    <div className={styles.headerChart}>\n                        <div></div>\n                        <div className={styles.titleChart}>{titleChart}</div>\n                        <div className={styles.chartButtons} style={{ justifyContent: \"end\" }}>\n                            <button onClick={() => setChartSplit(\"hour\")} className={chartSplit === \"hour\" ? styles.activeBtn : \"\"}>\n                                Hour\n                            </button>\n                            <button onClick={() => setChartSplit(\"minutes_10\")} className={chartSplit === \"minutes_10\" ? styles.activeBtn : \"\"}>\n                                Minute\n                            </button>\n                            <button onClick={() => setChartSplit(\"all\")} className={chartSplit === \"all\" ? styles.activeBtn : \"\"}>\n                                All\n                            </button>\n                        </div>\n                    </div>\n                    <div className={styles.bodyChart}>\n                        <button className={styles.buttonChart1} style={{ borderRadius: '12px 0 0 12px' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(-1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(-10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleLeft /></button>\n                        <div className={styles.wrapperChart}>\n                            <Line data={chartDataRealtime} options={chartOptionsRealtime} plugins={[statusAreaRealtime]} />\n                        </div>\n                        <button className={styles.buttonChart2} style={{ borderRadius: '0 0 12px 0' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleRight /></button>\n                    </div>\n                </>\n            )}\n\n            {viewMode === 'table' && realtime && (\n                <>\n                    <div style={{ flex: 1, overflowY: \"auto\" }} className=\"ordering-table\">\n                        <table className=\"tableclickcell\">\n                            <thead>\n                                <tr>\n                                    <th>No</th>\n                                    <th>\n                                        {headerTableRealtime(\"created_at\", \"Waktu\")}\n                                        {filterTableRealtime(\"created_at\", \"Waktu\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"following_error\", \"Following Error\")}\n                                        {filterTableRealtime(\"following_error\", \"Following Error\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"following_error_warn\", \"Following Error Warn\")}\n                                        {filterTableRealtime(\"following_error_warn\", \"Following Error Warn\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"following_error_alarm\", \"Following Error Alarm\")}\n                                        {filterTableRealtime(\"following_error_alarm\", \"Following Error Alarm\")}\n                                    </th>\n                                </tr>\n                            </thead>\n                            {!filterUtils.FastIsEmpty(tableDataRealtime)\n                                ? <tbody>\n                                    <TableObserved\n                                        tableData={tableDataRealtime}\n                                        rowFunction={followingErrorDataRows}\n                                        rowsCount={250}\n                                        rowsIncrement={50}\n                                    />\n                                </tbody>\n                                : <tbody><tr><td colSpan={1000}>No Data Available Yet !</td></tr></tbody>\n                            }\n                        </table>\n                    </div>\n                </>\n            )}\n\n            {viewMode === 'chart' && !realtime && (\n                <>\n                    <div className={styles.headerChart}>\n                        <div></div>\n                        <div className={styles.titleChart}>{titleChart}</div>\n                        <div className={styles.chartButtons} style={{ justifyContent: \"end\" }}>\n                            <button onClick={() => setChartSplit(\"hour\")} className={chartSplit === \"hour\" ? styles.activeBtn : \"\"}>\n                                Hour\n                            </button>\n                            <button onClick={() => setChartSplit(\"minutes_10\")} className={chartSplit === \"minutes_10\" ? styles.activeBtn : \"\"}>\n                                Minute\n                            </button>\n                            <button onClick={() => setChartSplit(\"all\")} className={chartSplit === \"all\" ? styles.activeBtn : \"\"}>\n                                All\n                            </button>\n                        </div>\n                    </div>\n                    <div className={styles.bodyChart}>\n                        <button className={styles.buttonChart1} style={{ borderRadius: '12px 0 0 12px' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(-1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(-10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleLeft /></button>\n                        <div className={styles.wrapperChart}>\n                            <Line data={chartData} options={chartOptions} plugins={[statusArea]} />\n                        </div>\n                        <button className={styles.buttonChart2} style={{ borderRadius: '0 0 12px 0' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleRight /></button>\n                    </div>\n                </>\n            )}\n\n            {viewMode === 'table' && !realtime && (\n                <>\n                    <div style={{ flex: 1, overflowY: \"auto\" }} className=\"ordering-table\">\n                        <table className=\"tableclickcell\">\n                            <thead>\n                                <tr>\n                                    <th>No</th>\n                                    <th>\n                                        {headerTable(\"created_at\", \"Waktu\")}\n                                        {filterTable(\"created_at\", \"Waktu\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"following_error\", \"Following Error\")}\n                                        {filterTable(\"following_error\", \"Following Error\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"following_error_warn\", \"Following Error Warn\")}\n                                        {filterTable(\"following_error_warn\", \"Following Error Warn\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"following_error_alarm\", \"Following Error Alarm\")}\n                                        {filterTable(\"following_error_alarm\", \"Following Error Alarm\")}\n                                    </th>\n                                </tr>\n                            </thead>\n                            {!filterUtils.FastIsEmpty(tableData)\n                                ? <tbody>\n                                    <TableObserved\n                                        tableData={tableData}\n                                        rowFunction={followingErrorDataRows}\n                                        rowsCount={250}\n                                        rowsIncrement={50}\n                                    />\n                                </tbody>\n                                : <tbody><tr><td colSpan={1000}>No Data Available Yet !</td></tr></tbody>\n                            }\n                        </table>\n                    </div>\n                </>\n            )}\n\n        </div>\n\n        <div className={styles.cardBodyFooter}>\n            <div className={styles.footerLeft}>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'chart' && realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('chart', true) }}>\n                    <GrLineChart />\n                    <span className={styles.tooltipText}>Realtime Chart</span>\n                </button>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'table' && realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('table', true) }}>\n                    <TbTable />\n                    <span className={styles.tooltipText}>Realtime Table</span>\n                </button>\n            </div>\n\n            <div className={styles.footerMid}>\n                {viewMode === 'chart' && realtime && (\n                    <div className={styles.switchGroup}>\n                        <label htmlFor=\"auto\">Auto</label>\n                        <label className={styles.switch}>\n                            <input type=\"checkbox\" id=\"auto\" checked={isAuto} onChange={handleToggle} />\n                            <span className={styles.slider}></span>\n                        </label>\n                    </div>\n                )}\n            </div>\n\n            <div className={styles.footerRight}>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'chart' && !realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('chart', false) }}>\n                    <FaChartLine />\n                    <span className={styles.tooltipText}>Chart</span>\n                </button>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'table' && !realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('table', false) }}>\n                    <FaTable />\n                    <span className={styles.tooltipText}>Table</span>\n                </button>\n            </div>\n        </div>\n    </>\n}\n\nexport default FollowingErrorPage\n","class FilterUtils {\n    static FilterTable = (row: any, tableDataFilter: { [key: string]: string }) => {\n        let keys = Object.keys(row)\n        for (let indexKey = 0; indexKey < keys.length; indexKey++) {\n            const key = keys[indexKey]\n            if (tableDataFilter[key]) {\n                if (row != undefined && row[key] != null) {\n                    if (tableDataFilter[key] !== \"\") {\n                        if (\n                            row[key]\n                                .toString()\n                                .toLowerCase()\n                                .includes(tableDataFilter[key].toString().toLowerCase()) == false\n                        ) {\n                            return false\n                        }\n                    }\n                } else {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    static SortingTable = (a: any, b: any, sortChoosed: string) => {\n        if (sortChoosed != null && sortChoosed != undefined) {\n            if (a[sortChoosed] !== undefined && b[sortChoosed] !== undefined) {\n                if (typeof a[sortChoosed] === 'string' && typeof b[sortChoosed] === 'string') {\n                    return a[sortChoosed].localeCompare(b[sortChoosed])\n                } else if (typeof a[sortChoosed] === 'number' && typeof b[sortChoosed] === 'number') {\n                    return a[sortChoosed] - b[sortChoosed]\n                }\n            }\n        }\n        return 0\n    }\n\n    static FastIsEmpty = (arr: any[]) => {\n        for (const _ in arr) {\n            return false\n        }\n        return true\n    }\n}\n\nexport default FilterUtils","import { useEffect, useMemo, useState } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\n\nfunction MultipleObserver(props: { content: React.JSX.Element; onVisible: () => any, }) {\n    const { onVisible, content } = props;\n\n    const { ref } = useInView({\n        threshold: 0.1, triggerOnce: false, initialInView: false,\n        onChange: (inView, entry) => { if (inView) { onVisible() } }\n    });\n\n    return <tr ref={ref}>\n        {content}\n    </tr>\n}\n\ninterface TableObservedProps {\n    tableData: any[],\n    rowFunction: (index: number, row: any) => JSX.Element,\n    onRowClick?: (row: any) => void\n    rowsCount: number,\n    rowsIncrement: number,\n}\n\nexport default function TableObserved(props: TableObservedProps) {\n    const { tableData, rowFunction, onRowClick, rowsCount, rowsIncrement } = props;\n\n    const ROWS_MAX_COUNT = rowsCount\n    const ROWS_INCREMENT = rowsIncrement\n\n    const [limit, setLimit] = useState(ROWS_MAX_COUNT)\n\n    const data = useMemo((() => {\n        const elements = []\n        for (let index = 0; index < tableData.length; index++) {\n            if (index < limit - ROWS_MAX_COUNT || index > limit) {\n                continue\n            }\n\n            const row = tableData[index]\n            elements.push(<>\n                {index == limit\n                    ? <MultipleObserver\n                        content={<></>}\n                        onVisible={function () {\n                            setLimit((prev) => prev + ROWS_INCREMENT)\n                            // non react way but fuck it\n                            setTimeout(() => { document.getElementById(`rows_${index}`)?.scrollIntoView() })\n                        }} />\n                    : <></>\n                }\n                {index == limit - ROWS_MAX_COUNT && index != 0\n                    ? <MultipleObserver\n                        content={<></>}\n                        onVisible={function () {\n                            setLimit((prev) => {\n                                return prev - ROWS_INCREMENT < ROWS_MAX_COUNT ? ROWS_MAX_COUNT : prev - ROWS_INCREMENT\n                            })\n                            // non react way but fuck it\n                            setTimeout(() => { document.getElementById(`rows_${index}`)?.scrollIntoView() })\n                        }} />\n                    : <></>\n                }\n                <tr id={`rows_${index}`} style={{ whiteSpace: \"nowrap\" }} onClick={() => { if (onRowClick != null) { onRowClick(row) } }}>\n                    {rowFunction(index, row)}\n                </tr>\n                {index == tableData.length - 1\n                    ? <tr><td colSpan={1000}>END OF DATA</td></tr>\n                    : <></>}\n            </>)\n        }\n        return elements\n    }), [limit, tableData])\n\n    useEffect(() => {\n        setLimit(ROWS_MAX_COUNT)\n    }, [tableData])\n\n    return data.map((val) => { return val })\n}"],"names":["FollErrService","GetMachineConfig","machine_id","uri","BASE_URL","resp","FetchUtils","fetchAuth","status","Error","message","Array","isArray","data","i","length","_row$following_error_","_row$following_error_2","row","following_error_warn","following_error_alarm","UpsertMachineConfig","fields","method","body","JSON","stringify","headers","DashboardFollErrService","DashboardLevel1","start_date","end_date","business_unit_id","business_unit","machine_ool_following_error","ool_following_error","DashboardLevel2","link_up_id","link_up","DashboardLevel3","DashboardLevel4","following_error","undefined","Date","created_at","toString","DashboardLevel1Realtime","DashboardLevel2Realtime","DashboardLevel3Realtime","DashboardLevel4Realtime","export","export_name","column","values","workbook","ExcelJS","worksheet","addWorksheet","numberToLetter","number","map","key","index","getColumn","width","getCell","value","String","toUpperCase","style","fill","type","pattern","fgColor","argb","font","bold","alignment","vertical","horizontal","border","top","color","left","right","bottom","val","push","addRow","eachCell","cell","xlsx","writeBuffer","then","buffer","blob","Blob","link","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","import","load","book","eachSheet","sheet","eachRow","result","obj","j","_sheet$i$j","toLowerCase","format","ChartJS","register","LineElement","PointElement","LinearScale","Title","CategoryScale","Tooltip","Legend","defaults","maintainAspectRatio","responsive","_ref","realtime","setRealtime","refresh","setHandleGenerateExcel","context","useContext","AppContext","contextAccessToken","contextShowAlertFunc","contextShowLoadingFunc","machineId","stateShowLoading","useParams","CHART_COLORS","activeHourIndex","setActiveHourIndex","useState","isAuto","setIsAuto","chartSplit","setChartSplit","viewMode","setViewMode","sortedCols","setSortedCols","sortedColsType","setSortedColsType","tableData","setTableData","tableDataCache","setTableDataCache","mappedDataRef","useRef","tableDataFilter","setTableDataFilter","chartData","setChartData","labels","datasets","chartOptions","setChartOptions","firstData","tableDataRealtime","setTableDataRealtime","tableDataRealtimeCache","setTableDataRealtimeCache","tableDataRealtimeFilter","setTableDataRealtimeFilter","chartDataRealtime","setChartDataRealtime","chartOptionsRealtime","setChartOptionsRealtime","firstDataRealtime","splitDataToMap","toReversed","forEach","item","date","rounded","setMinutes","Math","floor","getMinutes","setSeconds","setMilliseconds","statusArea","id","beforeDatasetsDraw","chart","_followingErrorData$f","followingErrorData","current","ctx","chartArea","scales","x","y","save","startNormalArea","min","endNormalArea","startNormalAreaPixel","getPixelForValue","endNormalAreaPixel","fillStyle","fillRect","abs","startMinWarn","endMinWarn","startMinWarnPixel","endMinWarnPixel","startMinAlarm","endMinAlarm","max","startMinAlarmPixel","endMinAlarmPixel","restore","updateChart","mapData","_mapData$key","flooredMinutes","groupData","newLabels","msg","newData","reversedData","dataMin","dataMax","range","customMin","customMax","label","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","borderWidth","pointRadius","animation","duration","easing","plugins","legend","position","size","weight","family","usePointStyle","pointStyle","tooltip","backgroundColor","titleColor","bodyColor","padding","cornerRadius","titleFont","bodyFont","grid","ticks","maxRotation","minRotation","layout","elements","line","borderJoinStyle","point","filterTable","columnnName","_tableDataFilter$colu","_jsx","children","fontSize","marginTop","placeholder","onChange","event","prev","target","headerTable","columnName","_jsxs","display","flexDirection","justifyContent","gap","whiteSpace","cursor","onClick","alignItems","justifyItems","FaSortUp","margin","height","FaSortDown","followingErrorDataRows","valueColor","valueWeight","_Fragment","fontWeight","useEffect","handleFilterAndSort","table_filtered","filter","filterUtils","FilterTable","sort","a","b","SortingTable","async","withLoading","formatDate","Number","keys","Object","newDate","error","AlertEntity","level","generateData","statusAreaRealtime","_followingErrorData$f2","updateChartRealtime","_mapData$key2","filterTableRealtime","_tableDataRealtimeFil","headerTableRealtime","generateDataRealtime","interval","setInterval","clearInterval","handleFilterAndSortRealtime","titleChart","useMemo","handleChangeActiveHourIndex","amount","unit","setHours","getHours","handleSetPage","page","generateExcelRealtime","_tableDataRealtime$i$","_tableDataRealtime$i$2","ExcelUtils","generateExcel","_tableDataRealtime$i$3","_tableDataRealtime$i$4","className","styles","cardBodyHeader","headerChart","chartButtons","activeBtn","bodyChart","buttonChart1","borderRadius","FaAngleLeft","wrapperChart","Line","options","buttonChart2","FaAngleRight","flex","overflowY","FastIsEmpty","colSpan","TableObserved","rowFunction","rowsCount","rowsIncrement","cardBodyFooter","footerLeft","buttonFooter","active","GrLineChart","tooltipText","TbTable","footerMid","switchGroup","htmlFor","switch","checked","handleToggle","slider","footerRight","FaChartLine","FaTable","FilterUtils","indexKey","includes","sortChoosed","localeCompare","arr","_","MultipleObserver","props","onVisible","content","ref","useInView","threshold","triggerOnce","initialInView","inView","entry","onRowClick","ROWS_MAX_COUNT","ROWS_INCREMENT","limit","setLimit","setTimeout","_document$getElementB","getElementById","scrollIntoView","_document$getElementB2"],"sourceRoot":""}