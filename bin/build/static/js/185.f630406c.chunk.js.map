{"version":3,"file":"static/js/185.f630406c.chunk.js","mappings":"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","sources":["components/Gauge/Gauge.tsx","services/quality_factor.ts","features/Dashboard/DashboardLevel3/DashboardLevel3Quality.tsx"],"sourcesContent":["import React, { useMemo } from 'react'\nimport ReactSpeedometer from 'react-d3-speedometer'\n\ninterface GaugeProps {\n    value: number\n    topLimitWarn?: number\n    topLimitAlarm?: number\n    bottomLimitWarn?: number\n    bottomLimitAlarm?: number\n    minValue?: number\n    maxValue?: number\n    needleColor?: string\n    segmentColors?: string[]\n    segments?: number\n    width?: number | string\n    height?: number | string\n    unit?: string\n}\n\nconst Gauge: React.FC<GaugeProps> = ({\n    value,\n    topLimitWarn,\n    topLimitAlarm,\n    bottomLimitWarn,\n    bottomLimitAlarm,\n    minValue,\n    maxValue,\n    needleColor = '#2e2e2e',\n    segmentColors = ['#118a7e'],\n    segments = 3,\n    width = '100%',\n    height = '100%',\n    unit = '',\n}) => {\n\n    const computedLimits = useMemo(() => {\n        const values = []\n        if (topLimitWarn != undefined) values.push(topLimitWarn)\n        if (topLimitAlarm != undefined) values.push(topLimitAlarm)\n        if (bottomLimitWarn != undefined) values.push(bottomLimitWarn)\n        if (bottomLimitAlarm != undefined) values.push(bottomLimitAlarm)\n\n        const rawMax = values.length == 0 ? 100 : Math.max(...values)\n        const rawMin = values.length == 0 ? 0 : Math.min(...values)\n\n        const delta = rawMax * 0.25\n\n        const autoMax = rawMax + delta\n        const autoMin = rawMin - delta\n\n        return {\n            min: minValue != undefined ? minValue : autoMin,\n            max: maxValue != undefined ? maxValue : autoMax,\n        }\n    }, [topLimitWarn, topLimitAlarm, bottomLimitWarn, bottomLimitAlarm, minValue, maxValue])\n\n    const { computedStops, computedSegmentColors } = useMemo(() => {\n        const stops: number[] = []\n        const colors: string[] = []\n\n        if (\n            bottomLimitAlarm != undefined &&\n            bottomLimitWarn != undefined &&\n            topLimitWarn != undefined &&\n            topLimitAlarm != undefined\n        ) {\n            stops.push(\n                computedLimits.min,\n                bottomLimitAlarm,\n                bottomLimitWarn,\n                topLimitWarn,\n                topLimitAlarm,\n                computedLimits.max\n            )\n\n            colors.push(\n                '#9f1e49',\n                '#ca9257',\n                '#118a7e',\n                '#ca9257',\n                '#9f1e49'\n            )\n\n            const sortedStops = [...stops].sort((a, b) => a - b)\n            return {\n                computedStops: sortedStops,\n                computedSegmentColors: colors,\n            }\n        }\n\n        return {\n            computedStops: undefined,\n            computedSegmentColors: segmentColors,\n        }\n    }, [\n        bottomLimitAlarm,\n        bottomLimitWarn,\n        topLimitWarn,\n        topLimitAlarm,\n        computedLimits.min,\n        computedLimits.max,\n        segmentColors,\n    ])\n\n    const gaugeKey = useMemo(() => {\n        return [\n            computedStops?.join(','),\n            computedLimits.min,\n            computedLimits.max,\n            computedSegmentColors.join(','),\n            segments,\n        ].join('|')\n    }, [computedStops, computedLimits.min, computedLimits.max, computedSegmentColors, segments])\n\n    const memoizedGauge = useMemo(() => (\n        <ReactSpeedometer\n            key={gaugeKey}\n            value={value > computedLimits.max ? computedLimits.max : value < computedLimits.min ? computedLimits.min : value}\n            minValue={computedLimits.min}\n            maxValue={computedLimits.max}\n            needleColor={needleColor}\n            segmentColors={computedSegmentColors}\n            customSegmentStops={computedStops}\n            segments={computedStops ? computedStops.length - 1 : segments}\n            textColor=\"white\"\n            width={typeof width === 'string' ? 250 : width}\n            height={typeof height === 'string' ? 200 : height}\n            currentValueText={`${value}  ${unit}`}\n        />\n    ), [\n        value,\n        computedLimits.min,\n        computedLimits.max,\n        needleColor,\n        computedSegmentColors,\n        computedStops?.join(','),\n        segments,\n        width,\n        height,\n        gaugeKey,\n        unit\n    ])\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                color: 'red',\n                height: '100%',\n                width: '100%',\n            }}\n        >\n            {memoizedGauge}\n        </div>\n    )\n}\n\nexport default Gauge\n","import { BASE_URL } from \"../constants\"\nimport { BusinessUnitConfigQualityFactor, QualityFactorData, QualityFactorEntity, QualityFactorInsertEntity, QualityFactorUpdateEntity, DashboardQualityFactorLevel1, DashboardQualityFactorLevel2, DashboardQualityFactorLevel3, FormBusinessUnitQualityFactor, FormLinkupQualityFactor, LinkUpConfigQualityFactor, } from \"../entities/QualityFactorEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\nclass QualityFactorService {\n    static async GetAllQualityFactor(link_up_id?: string): Promise<QualityFactorEntity[]> {\n\n        let uri = `${BASE_URL}/api/extension/quality_factor/v1`\n        if (link_up_id != null) {\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: QualityFactorEntity[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].quality_factor_id != \"number\") { throw new Error(\"invalid quality_factor_id value\") }\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid parameter_name value\") }\n            if (typeof data[i].quality_factor_tipe != \"string\") { throw new Error(\"invalid quality_factor_tipe value\") }\n            if (data[i].quality_factor_warn != undefined && typeof data[i].quality_factor_warn != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (data[i].quality_factor_alarm != undefined && typeof data[i].quality_factor_alarm != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n            if (data[i].quality_factor_bottom_warn != undefined && typeof data[i].quality_factor_bottom_warn != \"number\") { throw new Error(\"invalid quality_factor_bottom_warn value\") }\n            if (data[i].quality_factor_bottom_alarm != undefined && typeof data[i].quality_factor_bottom_alarm != \"number\") { throw new Error(\"invalid quality_factor_bottom_alarm value\") }\n            if (typeof data[i].quality_factor_display_type != \"string\") { throw new Error(\"invalid quality_factor_display_type value\") }\n            if (typeof data[i].quality_factor_unit != \"string\") { throw new Error(\"invalid quality_factor_unit value\") }\n        }\n\n        return data\n    }\n\n    static async AddQualityFactor(data: QualityFactorInsertEntity): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1`,\n            {\n                method: 'POST',\n                body: JSON.stringify({ ...data }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async UpdateQualityFactor(quality_factor_id: number, fields: QualityFactorUpdateEntity): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1`,\n            {\n                method: 'PATCH',\n                body: JSON.stringify({ quality_factor_id, fields }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async DeleteQualityFactor(quality_factor_id: number): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1`,\n            {\n                method: 'DELETE',\n                body: JSON.stringify({ quality_factor_id }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async GetLinkUpConfig(link_up_id?: number): Promise<LinkUpConfigQualityFactor[]> {\n        let uri = `${BASE_URL}/api/extension/quality_factor/v1/linkup`\n        if (link_up_id != null) {\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid link up config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof (row.quality_factor_warn ?? 0) != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (typeof (row.quality_factor_alarm ?? 0) != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertLinkupConfig(link_up_id: number, fields: FormLinkupQualityFactor): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1/linkup`, {\n            method: 'PATCH',\n            body: JSON.stringify({ link_up_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async GetBusinessUnitConfig(business_unit_id?: number): Promise<BusinessUnitConfigQualityFactor[]> {\n        let uri = `${BASE_URL}/api/extension/quality_factor/v1/business`\n        if (business_unit_id != null) {\n            uri += `?business_unit_id=${business_unit_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid link up config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof (row.quality_factor_warn ?? 0) != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (typeof (row.quality_factor_alarm ?? 0) != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertBusinessUnitConfig(business_unit_id: number, fields: FormBusinessUnitQualityFactor): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1/business`, {\n            method: 'PATCH',\n            body: JSON.stringify({ business_unit_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n}\n\nclass DashboardQualityFactorService {\n    static async DashboardLevel1(start_date: string, end_date: string): Promise<DashboardQualityFactorLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/quality_factor/v1/l1?start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].quality_factor_id_ool)) { throw new Error(\"invalid quality_factor_id_ool value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n            if (data[i].quality_factor_warn != undefined && typeof data[i].quality_factor_warn != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (data[i].quality_factor_alarm != undefined && typeof data[i].quality_factor_alarm != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2(start_date: string, end_date: string, business_unit_id: number): Promise<DashboardQualityFactorLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/quality_factor/v1/l2?business_unit_id=${business_unit_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].quality_factor_id_ool)) { throw new Error(\"invalid quality_factor_id_ool value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n            if (data[i].quality_factor_warn != undefined && typeof data[i].quality_factor_warn != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (data[i].quality_factor_alarm != undefined && typeof data[i].quality_factor_alarm != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3(start_date: string, end_date: string, link_up_id: number): Promise<DashboardQualityFactorLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/quality_factor/v1/l3?link_up_id=${link_up_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].quality_factor_id != \"number\") { throw new Error(\"invalid dashboard quality_factor_id value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid dashboard parameter_name value\") }\n            if (typeof data[i].quality_factor_tipe != \"string\") { throw new Error(\"invalid dashboard quality_factor_tipe value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n\n            if (!data[i].last_quality_factor_data) { throw new Error(\"missing last_quality_factor_data\") }\n            if (typeof data[i].last_quality_factor_data.quality_factor_id !== \"number\") { throw new Error(\"invalid last_quality_factor_data.quality_factor_id\") }\n            if (typeof data[i].last_quality_factor_data.value !== \"number\") { throw new Error(\"invalid last_quality_factor_data.value\") }\n            if (data[i].last_quality_factor_data.warning_limit != undefined && typeof data[i].last_quality_factor_data.warning_limit !== \"number\") { throw new Error(\"invalid last_quality_factor_data.warning_limit\") }\n            if (data[i].last_quality_factor_data.alarm_limit != undefined && typeof data[i].last_quality_factor_data.alarm_limit !== \"number\") { throw new Error(\"invalid last_quality_factor_data.alarm_limit\") }\n            if (data[i].last_quality_factor_data.warning_limit_bottom != undefined && typeof data[i].last_quality_factor_data.warning_limit_bottom !== \"number\") { throw new Error(\"invalid last_quality_factor_data.warning_limit_bottom\") }\n            if (data[i].last_quality_factor_data.alarm_limit_bottom != undefined && typeof data[i].last_quality_factor_data.alarm_limit_bottom !== \"number\") { throw new Error(\"invalid last_quality_factor_data.alarm_limit_bottom\") }\n            if (typeof data[i].last_quality_factor_data.created_at !== \"string\") { throw new Error(\"invalid last_quality_factor_data.created_at\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4(start_date: string, end_date: string, quality_factor_id: number): Promise<QualityFactorData[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/quality_factor/v1/data?quality_factor_id=${quality_factor_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: QualityFactorData[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].value != \"number\") { throw new Error(\"invalid value value\") }\n            if (data[i].warning_limit != undefined && typeof data[i].warning_limit != \"number\") { throw new Error(\"invalid warning_limit value\") }\n            if (data[i].alarm_limit != undefined && typeof data[i].alarm_limit != \"number\") { throw new Error(\"invalid alarm_limit value\") }\n            if (data[i].warning_limit_bottom != undefined && typeof data[i].warning_limit_bottom != \"number\") { throw new Error(\"invalid warning_limit_bottom value\") }\n            if (data[i].alarm_limit_bottom != undefined && typeof data[i].alarm_limit_bottom != \"number\") { throw new Error(\"invalid alarm_limit_bottom value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel1Realtime(): Promise<DashboardQualityFactorLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1/l1/realtime`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].quality_factor_id_ool)) { throw new Error(\"invalid quality_factor_id_ool value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n            if (data[i].quality_factor_warn != undefined && typeof data[i].quality_factor_warn != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (data[i].quality_factor_alarm != undefined && typeof data[i].quality_factor_alarm != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2Realtime(business_unit_id: number): Promise<DashboardQualityFactorLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1/l2/realtime?business_unit_id=${business_unit_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].quality_factor_id_ool)) { throw new Error(\"invalid quality_factor_id_ool value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n            if (data[i].quality_factor_warn != undefined && typeof data[i].quality_factor_warn != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (data[i].quality_factor_alarm != undefined && typeof data[i].quality_factor_alarm != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3Realtime(link_up_id: number): Promise<DashboardQualityFactorLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1/l3/realtime?link_up_id=${link_up_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].quality_factor_id != \"number\") { throw new Error(\"invalid dashboard quality_factor_id value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid dashboard parameter_name value\") }\n            if (typeof data[i].quality_factor_tipe != \"string\") { throw new Error(\"invalid dashboard quality_factor_tipe value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n\n            if (!data[i].last_quality_factor_data) { throw new Error(\"missing last_quality_factor_data\") }\n            if (typeof data[i].last_quality_factor_data.quality_factor_id !== \"number\") { throw new Error(\"invalid last_quality_factor_data.quality_factor_id\") }\n            if (typeof data[i].last_quality_factor_data.value !== \"number\") { throw new Error(\"invalid last_quality_factor_data.value\") }\n            if (data[i].last_quality_factor_data.warning_limit != undefined && typeof data[i].last_quality_factor_data.warning_limit !== \"number\") { throw new Error(\"invalid last_quality_factor_data.warning_limit\") }\n            if (data[i].last_quality_factor_data.alarm_limit != undefined && typeof data[i].last_quality_factor_data.alarm_limit !== \"number\") { throw new Error(\"invalid last_quality_factor_data.alarm_limit\") }\n            if (data[i].last_quality_factor_data.warning_limit_bottom != undefined && typeof data[i].last_quality_factor_data.warning_limit_bottom !== \"number\") { throw new Error(\"invalid last_quality_factor_data.warning_limit_bottom\") }\n            if (data[i].last_quality_factor_data.alarm_limit_bottom != undefined && typeof data[i].last_quality_factor_data.alarm_limit_bottom !== \"number\") { throw new Error(\"invalid last_quality_factor_data.alarm_limit_bottom\") }\n            if (typeof data[i].last_quality_factor_data.created_at !== \"string\") { throw new Error(\"invalid last_quality_factor_data.created_at\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4Realtime(quality_factor_id: number): Promise<QualityFactorData[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/quality_factor/v1/data/realtime?quality_factor_id=${quality_factor_id}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: QualityFactorData[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].value != \"number\") { throw new Error(\"invalid value value\") }\n            if (data[i].warning_limit != undefined && typeof data[i].warning_limit != \"number\") { throw new Error(\"invalid warning_limit value\") }\n            if (data[i].alarm_limit != undefined && typeof data[i].alarm_limit != \"number\") { throw new Error(\"invalid alarm_limit value\") }\n            if (data[i].warning_limit_bottom != undefined && typeof data[i].warning_limit_bottom != \"number\") { throw new Error(\"invalid warning_limit_bottom value\") }\n            if (data[i].alarm_limit_bottom != undefined && typeof data[i].alarm_limit_bottom != \"number\") { throw new Error(\"invalid alarm_limit_bottom value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n}\n\nexport { QualityFactorService, DashboardQualityFactorService }","import { useContext, useEffect, useState } from \"react\"\nimport AppContext from \"../../../context\"\nimport { useNavigate, useLocation, useParams } from \"react-router-dom\"\nimport { AlertEntity } from \"../../../layouts/Alert/AlertEntity\"\nimport styles from './DashboardLevel3.module.css'\nimport { formatDate } from \"date-fns\"\nimport sensorImage from \"../../../assets/images/production_image.png\"\nimport { QualityFactorService, DashboardQualityFactorService } from \"../../../services/quality_factor\"\nimport { QualityFactorEntity, DashboardQualityFactorLevel3 } from \"../../../entities/QualityFactorEntity\"\nimport Gauge from \"../../../components/Gauge/Gauge\"\nimport { FaRegCircleCheck } from \"react-icons/fa6\"\nimport { MdOutlineCancel } from \"react-icons/md\"\nimport noDataImg from '../../../assets/images/no_data_image.png'\n\ninterface FilterType {\n    start_date: Date\n    end_date: Date\n}\n\ninterface DashboardLevel3QualityFactorPageProps {\n    realtime: boolean\n    refresh: number\n    filterDate: FilterType\n    onFilterDateChange: (newFilter: FilterType) => void\n}\n\nconst DashboardLevel3QualityFactorPage: React.FC<DashboardLevel3QualityFactorPageProps> = ({ realtime, refresh, filterDate, onFilterDateChange }) => {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextVersion = context.version\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    const navigate = useNavigate()\n    const location = useLocation()\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n\n    // ========================================= STATE VIEW =========================================  //\n    const { linkUpId } = useParams()\n    const { link_up } = location.state || {}\n\n    const [machineQualityFactorData, setMachineQualityFactorData] = useState<{ [type: string]: QualityFactorEntity[] }>({})\n    const [tableDataQualityFactor, setTableDataQualityFactor] = useState<{ [id: string]: DashboardQualityFactorLevel3 | undefined }>({})\n\n    interface DashboardLevel2State {\n        link_up_id: number\n        link_up: string\n\n        quality_factor_green: number\n        quality_factor_yellow: number\n        quality_factor_red: number\n\n        machine_ool: number[]\n    }\n\n    const [level2Data, setLevel2Data] = useState<{ [type: string]: DashboardLevel2State }>({})\n    // ========================================= STATE VIEW =========================================  //\n\n\n    // ========================================= FUNCTIONS =========================================  //\n    const generateDataMachineQualityFactor = async () => {\n        if (Object.keys(machineQualityFactorData).length == 0) { contextShowLoadingFunc(true) }\n        try {\n            const resp = await QualityFactorService.GetAllQualityFactor(linkUpId)\n\n            const data: { [type: string]: QualityFactorEntity[] } = {}\n            for (let i = 0; i < resp.length; i++) {\n                if (data[resp[i].quality_factor_tipe] == undefined) {\n                    data[resp[i].quality_factor_tipe] = []\n                }\n                data[resp[i].quality_factor_tipe].push(resp[i])\n            }\n\n            setMachineQualityFactorData(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, }))\n        } finally {\n            if (Object.keys(machineQualityFactorData).length == 0) { contextShowLoadingFunc(false) }\n        }\n    }\n\n    const generateDataQualityFactor = async () => {\n        try {\n            if (linkUpId) {\n                let resp: DashboardQualityFactorLevel3[] = []\n                if (realtime) {\n                    resp = await DashboardQualityFactorService.DashboardLevel3Realtime(Number(linkUpId))\n\n                    onFilterDateChange({ start_date: new Date(), end_date: new Date() })\n                    localStorage.removeItem(\"cache\")\n                } else {\n                    const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                    const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                    resp = await DashboardQualityFactorService.DashboardLevel3(start_date, end_date, Number(linkUpId))\n                    localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, realtime }))\n                }\n\n                const data: { [id: string]: DashboardQualityFactorLevel3 } = {}\n                const newLevel2ByType: { [type: string]: DashboardLevel2State } = {}\n                for (let i = 0; i < resp.length; i++) {\n                    const row = resp[i]\n                    data[`${row.quality_factor_id}`] = row\n\n                    const machine = Object.values(machineQualityFactorData).flat().find(m => m.quality_factor_id === row.quality_factor_id)\n                    if (!machine) continue\n\n                    const machineType = machine.quality_factor_tipe\n\n                    if (!newLevel2ByType[machineType]) {\n                        newLevel2ByType[machineType] = {\n                            link_up_id: link_up.link_up_id,\n                            link_up: link_up.link_up,\n                            quality_factor_green: 0,\n                            quality_factor_yellow: 0,\n                            quality_factor_red: 0,\n                            machine_ool: [],\n                        }\n                    }\n\n                    newLevel2ByType[machineType].quality_factor_green += row.quality_factor_green\n                    newLevel2ByType[machineType].quality_factor_yellow += row.quality_factor_yellow\n                    newLevel2ByType[machineType].quality_factor_red += row.quality_factor_red\n\n                    if (row.quality_factor_red > 0) {\n                        newLevel2ByType[machineType].machine_ool.push(machine.quality_factor_id)\n                    }\n                }\n\n                for (const type in newLevel2ByType) {\n                    newLevel2ByType[type].machine_ool = Array.from(new Set(newLevel2ByType[type].machine_ool))\n                }\n\n                setLevel2Data(newLevel2ByType)\n                setTableDataQualityFactor(data)\n            }\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3 }))\n        }\n    }\n\n    const generateData = async () => {\n        if (realtime) {\n            if (contextVersion.quality_factor != undefined) { await generateDataQualityFactor() }\n        } else {\n            resetAllData()\n            contextShowLoadingFunc(true)\n            // langsung tampilkan ketika udah ada yg selesai satu\n            const promise = []\n            if (contextVersion.quality_factor != undefined) { promise.push(generateDataQualityFactor()) }\n            try { await Promise.any(promise) } catch { }\n            contextShowLoadingFunc(false)\n        }\n    }\n\n    const resetAllData = () => {\n        setLevel2Data((prev) => {\n            const reset: typeof prev = {}\n            for (const type in prev) {\n                reset[type] = {\n                    ...prev[type],\n                    quality_factor_green: 0,\n                    quality_factor_yellow: 0,\n                    quality_factor_red: 0,\n                    machine_ool: [],\n                }\n            }\n            return reset\n        })\n        setTableDataQualityFactor({})\n    }\n\n    useEffect(() => {\n        if (Object.keys(machineQualityFactorData).length > 0) {\n            generateData()\n            if (realtime) {\n                let timeout: NodeJS.Timeout | null = null\n                const refreshfunc = () => {\n                    timeout = setTimeout(async () => { await generateData(); refreshfunc() }, 3000)\n                }\n                refreshfunc()\n                return () => {\n                    if (timeout != null) { clearTimeout(timeout) }\n                }\n            }\n        }\n    }, [contextAccessToken, realtime, linkUpId, machineQualityFactorData, refresh])\n\n    // generate once\n    useEffect(() => {\n        generateDataMachineQualityFactor()\n    }, [])\n    // ========================================= FUNCTIONS =========================================  //\n\n    if (Object.keys(machineQualityFactorData).length === 0) {\n        return (\n            <div className={styles.noData}>\n                <div className=\"flex flex-col items-center justify-center text-gray-400\">\n                    <img src={noDataImg} alt=\"no_data_img\" width={140} height={140} />\n                    <p className=\"mt-2 text-xl font-medium\">No Data Available</p>\n                </div>\n            </div>\n        )\n    }\n\n    return <div\n        className={styles.cardWrapper}\n        style={{\n            gridTemplateColumns: Object.keys(machineQualityFactorData).length === 1 ? '1fr' : 'repeat(2, 1fr)',\n            gridAutoRows: Object.keys(machineQualityFactorData).length <= 2 ? '1fr' : undefined\n        }}\n    >\n        {Object.keys(machineQualityFactorData).map((val) => {\n            const row = machineQualityFactorData[val]\n            return < div className={styles.cardParent} key={val} >\n\n                <div className={styles.cardParentHeader}>\n                    <div className={styles.titleHeader}>\n                        {val} Overall\n                    </div>\n\n                    <div className={styles.bodyHeader}>\n                        <div className={styles.bodyHeaderLeft}>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Total Machine OOL</div>\n                                <div className={styles.oolNumber}>{level2Data[val]?.machine_ool?.length ?? 0}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>QualityFactor OK</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberNormal}`}>{level2Data[val]?.quality_factor_green}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>QualityFactor OOL</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberAlarm}`}>{level2Data[val]?.quality_factor_red}</div>\n                            </div>\n                            {/* <div className={styles.itemHeaderLeft}>\n                                <div>QualityFactor Normal</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberNormal}`}>{level2Data[val]?.quality_factor_green}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>QualityFactor Warning</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberWarning}`}>{level2Data[val]?.quality_factor_yellow}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>QualityFactor Alarm</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberAlarm}`}>{level2Data[val]?.quality_factor_red}</div>\n                            </div> */}\n                        </div>\n\n                        <div className={styles.bodyHeaderRight}>\n                            <div className={styles.imgWrapper}>\n                                <img src={sensorImage} alt=\"quality_factor image\" className={styles.imgHeader} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className={styles.cardParentBodyWrapper}>\n                    <div className={styles.cardParentBody} style={{ gridTemplateColumns: Object.keys(machineQualityFactorData).length > 1 ? \"repeat(2, 1fr)\" : \"repeat(4, 1fr)\" }}>\n                        {row.map((m) => {\n                            const data = tableDataQualityFactor[`${m.quality_factor_id}`]\n\n                            return <div key={m.quality_factor_id} className={styles.gridItemCenter}\n                                onClick={() => navigate(`/dashboard/l4/${m.quality_factor_id}`, {\n                                    state: {\n                                        dashboard_type: \"quality_factor\",\n                                        machine: m.parameter_name,\n                                    },\n                                })}>\n\n                                {data && (\n                                    <>\n                                        <div className={styles.gridCenterHeader}>\n                                            <h3>{data.parameter_name}</h3>\n                                            <p>{realtime ? formatDate(data.last_quality_factor_data.created_at, \"HH:mm:ss\") : formatDate(data.last_quality_factor_data.created_at, \"yyyy-MM-dd HH:mm:ss\")}</p>\n                                        </div>\n                                        <div className={styles.gridCenterContent}>\n                                            {m.quality_factor_display_type == 'gauge'\n                                                ? <>\n                                                    <div className={styles.warningAlarm}>\n                                                        <div className={styles.alarmColorBox}>{data.last_quality_factor_data.alarm_limit_bottom ?? \"-\"}</div>\n                                                        {data && data.last_quality_factor_data.alarm_limit_bottom != data.last_quality_factor_data.warning_limit_bottom && (\n                                                            <div className={styles.warnColorBox}>{data.last_quality_factor_data.warning_limit_bottom ?? \"-\"}</div>\n                                                        )}\n                                                        {data && data.last_quality_factor_data.alarm_limit != data.last_quality_factor_data.warning_limit && (\n                                                            <div className={styles.warnColorBox}>{data.last_quality_factor_data.warning_limit ?? \"-\"}</div>\n                                                        )}\n                                                        <div className={styles.alarmColorBox}>{data.last_quality_factor_data.alarm_limit ?? \"-\"}</div>\n                                                    </div>\n                                                    <div className={styles.gaugeContent}>\n                                                        <Gauge\n                                                            value={data.last_quality_factor_data.value}\n                                                            topLimitWarn={data.last_quality_factor_data.warning_limit}\n                                                            topLimitAlarm={data.last_quality_factor_data.alarm_limit}\n                                                            bottomLimitWarn={data.last_quality_factor_data.warning_limit_bottom}\n                                                            bottomLimitAlarm={data.last_quality_factor_data.alarm_limit_bottom}\n                                                            height={220}\n                                                            width={220}\n                                                            unit={m.quality_factor_unit}\n                                                        />\n                                                    </div>\n                                                </>\n                                                : <>\n                                                    <div className={`${styles.booleanContent} ${data.last_quality_factor_data.value == 1 ? '' : styles.notOk}`}>\n                                                        <div className={styles.booleanLeft}>\n                                                            <h2>Status</h2>\n                                                            <h2>{data.last_quality_factor_data.value == 1 ? 'OK' : 'Not OK'}</h2>\n                                                        </div>\n                                                        <div className={styles.booleanRight}>\n                                                            <div className={styles.booleanStatus}>\n                                                                {data.last_quality_factor_data.value == 1 ? <FaRegCircleCheck size={25} /> : <MdOutlineCancel size={25} />}\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </>}\n                                        </div>\n                                    </>\n                                )}\n                            </div>\n                        })}\n                    </div>\n                </div>\n\n            </div>\n        })}\n    </div>\n}\n\nexport default DashboardLevel3QualityFactorPage"],"names":["_ref","value","topLimitWarn","topLimitAlarm","bottomLimitWarn","bottomLimitAlarm","minValue","maxValue","needleColor","segmentColors","segments","width","height","unit","computedLimits","useMemo","values","undefined","push","rawMax","length","Math","max","rawMin","min","delta","computedStops","computedSegmentColors","stops","colors","sort","a","b","gaugeKey","join","memoizedGauge","_jsx","ReactSpeedometer","customSegmentStops","textColor","currentValueText","style","display","justifyContent","color","children","QualityFactorService","GetAllQualityFactor","link_up_id","uri","BASE_URL","resp","FetchUtils","fetchAuth","status","Error","message","data","Array","isArray","i","quality_factor_id","link_up","parameter_name","quality_factor_tipe","quality_factor_warn","quality_factor_alarm","quality_factor_bottom_warn","quality_factor_bottom_alarm","quality_factor_display_type","quality_factor_unit","AddQualityFactor","method","body","JSON","stringify","headers","UpdateQualityFactor","fields","DeleteQualityFactor","GetLinkUpConfig","_row$quality_factor_w","_row$quality_factor_a","row","UpsertLinkupConfig","GetBusinessUnitConfig","business_unit_id","_row$quality_factor_w2","_row$quality_factor_a2","UpsertBusinessUnitConfig","DashboardQualityFactorService","DashboardLevel1","start_date","end_date","business_unit","quality_factor_id_ool","quality_factor_green","quality_factor_yellow","quality_factor_red","DashboardLevel2","DashboardLevel3","last_quality_factor_data","warning_limit","alarm_limit","warning_limit_bottom","alarm_limit_bottom","created_at","DashboardLevel4","Date","toString","DashboardLevel1Realtime","DashboardLevel2Realtime","DashboardLevel3Realtime","DashboardLevel4Realtime","realtime","refresh","filterDate","onFilterDateChange","context","useContext","AppContext","contextVersion","version","contextAccessToken","contextShowAlertFunc","contextShowLoadingFunc","navigate","stateShowLoading","useNavigate","location","useLocation","linkUpId","useParams","state","machineQualityFactorData","setMachineQualityFactorData","useState","tableDataQualityFactor","setTableDataQualityFactor","level2Data","setLevel2Data","generateDataQualityFactor","async","Number","localStorage","removeItem","formatDate","setItem","newLevel2ByType","machine","Object","flat","find","m","machineType","machine_ool","type","from","Set","error","AlertEntity","level","generateData","quality_factor","resetAllData","promise","Promise","any","prev","reset","useEffect","keys","timeout","refreshfunc","setTimeout","clearTimeout","generateDataMachineQualityFactor","className","styles","noData","_jsxs","src","noDataImg","alt","cardWrapper","gridTemplateColumns","gridAutoRows","map","val","_level2Data$val$machi","_level2Data$val","_level2Data$val$machi2","_level2Data$val2","_level2Data$val3","cardParent","cardParentHeader","titleHeader","bodyHeader","bodyHeaderLeft","itemHeaderLeft","oolNumber","cenNumberNormal","cenNumberAlarm","bodyHeaderRight","imgWrapper","sensorImage","imgHeader","cardParentBodyWrapper","cardParentBody","_data$last_quality_fa","_data$last_quality_fa2","_data$last_quality_fa3","_data$last_quality_fa4","gridItemCenter","onClick","dashboard_type","_Fragment","gridCenterHeader","gridCenterContent","warningAlarm","alarmColorBox","warnColorBox","gaugeContent","Gauge","booleanContent","notOk","booleanLeft","booleanRight","booleanStatus","FaRegCircleCheck","size","MdOutlineCancel"],"sourceRoot":""}