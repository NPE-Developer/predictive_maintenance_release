{"version":3,"file":"static/js/550.1acfcbce.chunk.js","mappings":"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","sources":["features/Dashboard/DashboardLevel3/DashboardLevel3Centerline.tsx","services/centerline.ts","components/Gauge/Gauge.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\"\nimport AppContext from \"../../../context\"\nimport { useNavigate, useLocation, useParams } from \"react-router-dom\"\nimport { AlertEntity } from \"../../../layouts/Alert/AlertEntity\"\nimport styles from './DashboardLevel3.module.css'\nimport { formatDate } from \"date-fns\"\nimport sensorImage from \"../../../assets/images/production_image.png\"\nimport { CenterlineService, DashboardCenterlineService } from \"../../../services/centerline\"\nimport { CenterlineEntity, DashboardCenterlineLevel3 } from \"../../../entities/CenterlineEntity\"\nimport Gauge from \"../../../components/Gauge/Gauge\"\nimport { FaRegCircleCheck } from \"react-icons/fa6\"\nimport { MdOutlineCancel } from \"react-icons/md\"\nimport noDataImg from '../../../assets/images/no_data_image.png'\n\ninterface FilterType {\n    start_date: Date\n    end_date: Date\n}\n\ninterface DashboardLevel3CenterlinePageProps {\n    realtime: boolean\n    refresh: number\n    filterDate: FilterType\n    onFilterDateChange: (newFilter: FilterType) => void\n}\n\nconst DashboardLevel3CenterlinePage: React.FC<DashboardLevel3CenterlinePageProps> = ({ realtime, refresh, filterDate, onFilterDateChange }) => {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextVersion = context.version\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    const navigate = useNavigate()\n    const location = useLocation()\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n\n    // ========================================= STATE VIEW =========================================  //\n    const { linkUpId } = useParams()\n    const { link_up } = location.state || {}\n\n    const [machineCenterlineData, setMachineCenterlineData] = useState<{ [type: string]: CenterlineEntity[] }>({})\n    const [tableDataCenterline, setTableDataCenterline] = useState<{ [id: string]: DashboardCenterlineLevel3 | undefined }>({})\n\n    interface DashboardLevel2State {\n        link_up_id: number\n        link_up: string\n\n        centerline_green: number\n        centerline_yellow: number\n        centerline_red: number\n\n        machine_ool: number[]\n    }\n\n    const [level2Data, setLevel2Data] = useState<{ [type: string]: DashboardLevel2State }>({})\n    // ========================================= STATE VIEW =========================================  //\n\n\n    // ========================================= FUNCTIONS =========================================  //\n    const generateDataMachineCenterline = async () => {\n        if (Object.keys(machineCenterlineData).length == 0) { contextShowLoadingFunc(true) }\n        try {\n            const resp = await CenterlineService.GetAllCenterline(linkUpId)\n\n            const data: { [type: string]: CenterlineEntity[] } = {}\n            for (let i = 0; i < resp.length; i++) {\n                if (data[resp[i].centerline_tipe] == undefined) {\n                    data[resp[i].centerline_tipe] = []\n                }\n                data[resp[i].centerline_tipe].push(resp[i])\n            }\n\n            setMachineCenterlineData(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, }))\n        } finally {\n            if (Object.keys(machineCenterlineData).length == 0) { contextShowLoadingFunc(false) }\n        }\n    }\n\n    const generateDataCenterline = async () => {\n        try {\n            if (linkUpId) {\n                let resp: DashboardCenterlineLevel3[] = []\n                if (realtime) {\n                    resp = await DashboardCenterlineService.DashboardLevel3Realtime(Number(linkUpId))\n\n                    onFilterDateChange({ start_date: new Date(), end_date: new Date() })\n                    localStorage.removeItem(\"cache\")\n                } else {\n                    const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                    const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                    resp = await DashboardCenterlineService.DashboardLevel3(start_date, end_date, Number(linkUpId))\n                    localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, realtime }))\n                }\n\n                const data: { [id: string]: DashboardCenterlineLevel3 } = {}\n                const newLevel2ByType: { [type: string]: DashboardLevel2State } = {}\n                for (let i = 0; i < resp.length; i++) {\n                    const row = resp[i]\n                    data[`${row.centerline_id}`] = row\n\n                    const machine = Object.values(machineCenterlineData).flat().find(m => m.centerline_id === row.centerline_id)\n                    if (!machine) continue\n\n                    const machineType = machine.centerline_tipe\n\n                    if (!newLevel2ByType[machineType]) {\n                        newLevel2ByType[machineType] = {\n                            link_up_id: link_up.link_up_id,\n                            link_up: link_up.link_up,\n                            centerline_green: 0,\n                            centerline_yellow: 0,\n                            centerline_red: 0,\n                            machine_ool: [],\n                        }\n                    }\n\n                    newLevel2ByType[machineType].centerline_green += row.centerline_green\n                    newLevel2ByType[machineType].centerline_yellow += row.centerline_yellow\n                    newLevel2ByType[machineType].centerline_red += row.centerline_red\n\n                    if (row.centerline_red > 0) {\n                        newLevel2ByType[machineType].machine_ool.push(machine.centerline_id)\n                    }\n                }\n\n                for (const type in newLevel2ByType) {\n                    newLevel2ByType[type].machine_ool = Array.from(new Set(newLevel2ByType[type].machine_ool))\n                }\n\n                setLevel2Data(newLevel2ByType)\n                setTableDataCenterline(data)\n            }\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3 }))\n        }\n    }\n\n    const generateData = async () => {\n        if (realtime) {\n            if (contextVersion.centerline != undefined) { await generateDataCenterline() }\n        } else {\n            resetAllData()\n            contextShowLoadingFunc(true)\n            // langsung tampilkan ketika udah ada yg selesai satu\n            const promise = []\n            if (contextVersion.centerline != undefined) { promise.push(generateDataCenterline()) }\n            try { await Promise.any(promise) } catch { }\n            contextShowLoadingFunc(false)\n        }\n    }\n\n    const resetAllData = () => {\n        setLevel2Data((prev) => {\n            const reset: typeof prev = {}\n            for (const type in prev) {\n                reset[type] = {\n                    ...prev[type],\n                    centerline_green: 0,\n                    centerline_yellow: 0,\n                    centerline_red: 0,\n                    machine_ool: [],\n                }\n            }\n            return reset\n        })\n        setTableDataCenterline({})\n    }\n\n    useEffect(() => {\n        if (Object.keys(machineCenterlineData).length > 0) {\n            generateData()\n            if (realtime) {\n                let timeout: NodeJS.Timeout | null = null\n                const refreshfunc = () => {\n                    timeout = setTimeout(async () => { await generateData(); refreshfunc() }, 3000)\n                }\n                refreshfunc()\n                return () => {\n                    if (timeout != null) { clearTimeout(timeout) }\n                }\n            }\n        }\n    }, [contextAccessToken, realtime, linkUpId, machineCenterlineData, refresh])\n\n    // generate once\n    useEffect(() => {\n        generateDataMachineCenterline()\n    }, [])\n    // ========================================= FUNCTIONS =========================================  //\n\n    if (Object.keys(machineCenterlineData).length === 0) {\n        return (\n            <div className={styles.noData}>\n                <div className=\"flex flex-col items-center justify-center text-gray-400\">\n                    <img src={noDataImg} alt=\"no_data_img\" width={140} height={140} />\n                    <p className=\"mt-2 text-xl font-medium\">No Data Available</p>\n                </div>\n            </div>\n        )\n    }\n\n    return <div\n        className={styles.cardWrapper}\n        style={{\n            gridTemplateColumns: Object.keys(machineCenterlineData).length === 1 ? '1fr' : 'repeat(2, 1fr)',\n            gridAutoRows: Object.keys(machineCenterlineData).length <= 2 ? '1fr' : undefined\n        }}\n    >\n        {Object.keys(machineCenterlineData).map((val) => {\n            const row = machineCenterlineData[val]\n            return < div className={styles.cardParent} key={val} >\n\n                <div className={styles.cardParentHeader}>\n                    <div className={styles.titleHeader}>\n                        {val} Overall\n                    </div>\n\n                    <div className={styles.bodyHeader}>\n                        <div className={styles.bodyHeaderLeft}>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Total Machine OOL</div>\n                                <div className={styles.oolNumber}>{level2Data[val]?.machine_ool?.length ?? 0}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Centerline OK</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberNormal}`}>{level2Data[val]?.centerline_green}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Centerline OOL</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberAlarm}`}>{level2Data[val]?.centerline_red}</div>\n                            </div>\n                            {/* <div className={styles.itemHeaderLeft}>\n                                <div>Centerline Normal</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberNormal}`}>{level2Data[val]?.centerline_green}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Centerline Warning</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberWarning}`}>{level2Data[val]?.centerline_yellow}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Centerline Alarm</div>\n                                <div className={`${styles.oolNumber} ${styles.cenNumberAlarm}`}>{level2Data[val]?.centerline_red}</div>\n                            </div> */}\n                        </div>\n\n                        <div className={styles.bodyHeaderRight}>\n                            <div className={styles.imgWrapper}>\n                                <img src={sensorImage} alt=\"centerline image\" className={styles.imgHeader} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className={styles.cardParentBodyWrapper}>\n                    <div className={styles.cardParentBody} style={{ gridTemplateColumns: Object.keys(machineCenterlineData).length > 1 ? \"repeat(2, 1fr)\" : \"repeat(4, 1fr)\" }}>\n                        {row.map((m) => {\n                            const data = tableDataCenterline[`${m.centerline_id}`]\n\n                            return <div key={m.centerline_id} className={styles.gridItemCenter}\n                                onClick={() => navigate(`/dashboard/l4/${m.centerline_id}`, {\n                                    state: {\n                                        dashboard_type: \"centerline\",\n                                        machine: m.parameter_name,\n                                    },\n                                })}>\n\n                                {data && (\n                                    <>\n                                        <div className={styles.gridCenterHeader}>\n                                            <h3>{data.parameter_name}</h3>\n                                            <p>{realtime ? formatDate(data.last_centerline_data.created_at, \"HH:mm:ss\") : formatDate(data.last_centerline_data.created_at, \"yyyy-MM-dd HH:mm:ss\")}</p>\n                                        </div>\n                                        <div className={styles.gridCenterContent}>\n                                            {m.centerline_display_type == 'gauge'\n                                                ? <>\n                                                    <div className={styles.warningAlarm}>\n                                                        <div className={styles.alarmColorBox}>{data.last_centerline_data.alarm_limit_bottom ?? \"-\"}</div>\n                                                        {data && data.last_centerline_data.alarm_limit_bottom != data.last_centerline_data.warning_limit_bottom && (\n                                                            <div className={styles.warnColorBox}>{data.last_centerline_data.warning_limit_bottom ?? \"-\"}</div>\n                                                        )}\n                                                        {data && data.last_centerline_data.alarm_limit != data.last_centerline_data.warning_limit && (\n                                                            <div className={styles.warnColorBox}>{data.last_centerline_data.warning_limit ?? \"-\"}</div>\n                                                        )}\n                                                        <div className={styles.alarmColorBox}>{data.last_centerline_data.alarm_limit ?? \"-\"}</div>\n                                                    </div>\n                                                    <div className={styles.gaugeContent}>\n                                                        <Gauge\n                                                            value={data.last_centerline_data.value}\n                                                            topLimitWarn={data.last_centerline_data.warning_limit}\n                                                            topLimitAlarm={data.last_centerline_data.alarm_limit}\n                                                            bottomLimitWarn={data.last_centerline_data.warning_limit_bottom}\n                                                            bottomLimitAlarm={data.last_centerline_data.alarm_limit_bottom}\n                                                            height={220}\n                                                            width={220}\n                                                            unit={m.centerline_unit}\n                                                        />\n                                                    </div>\n                                                </>\n                                                : <>\n                                                    <div className={`${styles.booleanContent} ${data.last_centerline_data.value == 1 ? '' : styles.notOk}`}>\n                                                        <div className={styles.booleanLeft}>\n                                                            <h2>Status</h2>\n                                                            <h2>{data.last_centerline_data.value == 1 ? 'OK' : 'Not OK'}</h2>\n                                                        </div>\n                                                        <div className={styles.booleanRight}>\n                                                            <div className={styles.booleanStatus}>\n                                                                {data.last_centerline_data.value == 1 ? <FaRegCircleCheck size={25} /> : <MdOutlineCancel size={25} />}\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </>}\n                                        </div>\n                                    </>\n                                )}\n                            </div>\n                        })}\n                    </div>\n                </div>\n\n            </div>\n        })}\n    </div>\n}\n\nexport default DashboardLevel3CenterlinePage","import { BASE_URL } from \"../constants\"\nimport { BusinessUnitConfigCenterline, CenterlineData, CenterlineEntity, CenterlineInsertEntity, CenterlineUpdateEntity, DashboardCenterlineLevel1, DashboardCenterlineLevel2, DashboardCenterlineLevel3, FormBusinessUnitCenterline, FormLinkupCenterline, LinkUpConfigCenterline, } from \"../entities/CenterlineEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\nclass CenterlineService {\n    static async GetAllCenterline(link_up_id?: string): Promise<CenterlineEntity[]> {\n\n        let uri = `${BASE_URL}/api/extension/centerline/v1`\n        if (link_up_id != null) {\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: CenterlineEntity[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].centerline_id != \"number\") { throw new Error(\"invalid centerline_id value\") }\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid parameter_name value\") }\n            if (typeof data[i].centerline_tipe != \"string\") { throw new Error(\"invalid centerline_tipe value\") }\n            if (data[i].centerline_warn != undefined && typeof data[i].centerline_warn != \"number\") { throw new Error(\"invalid centerline_warn value\") }\n            if (data[i].centerline_alarm != undefined && typeof data[i].centerline_alarm != \"number\") { throw new Error(\"invalid centerline_alarm value\") }\n            if (data[i].centerline_bottom_warn != undefined && typeof data[i].centerline_bottom_warn != \"number\") { throw new Error(\"invalid centerline_bottom_warn value\") }\n            if (data[i].centerline_bottom_alarm != undefined && typeof data[i].centerline_bottom_alarm != \"number\") { throw new Error(\"invalid centerline_bottom_alarm value\") }\n            if (typeof data[i].centerline_display_type != \"string\") { throw new Error(\"invalid centerline_display_type value\") }\n            if (typeof data[i].centerline_unit != \"string\") { throw new Error(\"invalid centerline_unit value\") }\n        }\n\n        return data\n    }\n\n    static async AddCenterline(data: CenterlineInsertEntity): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/centerline/v1`,\n            {\n                method: 'POST',\n                body: JSON.stringify({ ...data }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async UpdateCenterline(centerline_id: number, fields: CenterlineUpdateEntity): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/centerline/v1`,\n            {\n                method: 'PATCH',\n                body: JSON.stringify({ centerline_id, fields }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async DeleteCenterline(centerline_id: number): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/centerline/v1`,\n            {\n                method: 'DELETE',\n                body: JSON.stringify({ centerline_id }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async GetLinkUpConfig(link_up_id?: number): Promise<LinkUpConfigCenterline[]> {\n        let uri = `${BASE_URL}/api/extension/centerline/v1/linkup`\n        if (link_up_id != null) {\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid link up config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof (row.centerline_warn ?? 0) != \"number\") { throw new Error(\"invalid centerline_warn value\") }\n            if (typeof (row.centerline_alarm ?? 0) != \"number\") { throw new Error(\"invalid centerline_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertLinkupConfig(link_up_id: number, fields: FormLinkupCenterline): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/centerline/v1/linkup`, {\n            method: 'PATCH',\n            body: JSON.stringify({ link_up_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async GetBusinessUnitConfig(business_unit_id?: number): Promise<BusinessUnitConfigCenterline[]> {\n        let uri = `${BASE_URL}/api/extension/centerline/v1/business`\n        if (business_unit_id != null) {\n            uri += `?business_unit_id=${business_unit_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid link up config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof (row.centerline_warn ?? 0) != \"number\") { throw new Error(\"invalid centerline_warn value\") }\n            if (typeof (row.centerline_alarm ?? 0) != \"number\") { throw new Error(\"invalid centerline_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertBusinessUnitConfig(business_unit_id: number, fields: FormBusinessUnitCenterline): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/centerline/v1/business`, {\n            method: 'PATCH',\n            body: JSON.stringify({ business_unit_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n}\n\nclass DashboardCenterlineService {\n    static async DashboardLevel1(start_date: string, end_date: string): Promise<DashboardCenterlineLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/centerline/v1/l1?start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardCenterlineLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].centerline_id_ool)) { throw new Error(\"invalid centerline_id_ool value\") }\n            if (typeof data[i].centerline_green != \"number\") { throw new Error(\"invalid centerline_green value\") }\n            if (typeof data[i].centerline_yellow != \"number\") { throw new Error(\"invalid centerline_yellow value\") }\n            if (typeof data[i].centerline_red != \"number\") { throw new Error(\"invalid centerline_red value\") }\n            if (data[i].centerline_warn != undefined && typeof data[i].centerline_warn != \"number\") { throw new Error(\"invalid centerline_warn value\") }\n            if (data[i].centerline_alarm != undefined && typeof data[i].centerline_alarm != \"number\") { throw new Error(\"invalid centerline_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2(start_date: string, end_date: string, business_unit_id: number): Promise<DashboardCenterlineLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/centerline/v1/l2?business_unit_id=${business_unit_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardCenterlineLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].centerline_id_ool)) { throw new Error(\"invalid centerline_id_ool value\") }\n            if (typeof data[i].centerline_green != \"number\") { throw new Error(\"invalid centerline_green value\") }\n            if (typeof data[i].centerline_yellow != \"number\") { throw new Error(\"invalid centerline_yellow value\") }\n            if (typeof data[i].centerline_red != \"number\") { throw new Error(\"invalid centerline_red value\") }\n            if (data[i].centerline_warn != undefined && typeof data[i].centerline_warn != \"number\") { throw new Error(\"invalid centerline_warn value\") }\n            if (data[i].centerline_alarm != undefined && typeof data[i].centerline_alarm != \"number\") { throw new Error(\"invalid centerline_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3(start_date: string, end_date: string, link_up_id: number): Promise<DashboardCenterlineLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/centerline/v1/l3?link_up_id=${link_up_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardCenterlineLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].centerline_id != \"number\") { throw new Error(\"invalid dashboard centerline_id value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid dashboard parameter_name value\") }\n            if (typeof data[i].centerline_tipe != \"string\") { throw new Error(\"invalid dashboard centerline_tipe value\") }\n            if (typeof data[i].centerline_green != \"number\") { throw new Error(\"invalid centerline_green value\") }\n            if (typeof data[i].centerline_yellow != \"number\") { throw new Error(\"invalid centerline_yellow value\") }\n            if (typeof data[i].centerline_red != \"number\") { throw new Error(\"invalid centerline_red value\") }\n\n            if (!data[i].last_centerline_data) { throw new Error(\"missing last_centerline_data\") }\n            if (typeof data[i].last_centerline_data.centerline_id !== \"number\") { throw new Error(\"invalid last_centerline_data.centerline_id\") }\n            if (typeof data[i].last_centerline_data.value !== \"number\") { throw new Error(\"invalid last_centerline_data.value\") }\n            if (data[i].last_centerline_data.warning_limit != undefined && typeof data[i].last_centerline_data.warning_limit !== \"number\") { throw new Error(\"invalid last_centerline_data.warning_limit\") }\n            if (data[i].last_centerline_data.alarm_limit != undefined && typeof data[i].last_centerline_data.alarm_limit !== \"number\") { throw new Error(\"invalid last_centerline_data.alarm_limit\") }\n            if (data[i].last_centerline_data.warning_limit_bottom != undefined && typeof data[i].last_centerline_data.warning_limit_bottom !== \"number\") { throw new Error(\"invalid last_centerline_data.warning_limit_bottom\") }\n            if (data[i].last_centerline_data.alarm_limit_bottom != undefined && typeof data[i].last_centerline_data.alarm_limit_bottom !== \"number\") { throw new Error(\"invalid last_centerline_data.alarm_limit_bottom\") }\n            if (typeof data[i].last_centerline_data.created_at !== \"string\") { throw new Error(\"invalid last_centerline_data.created_at\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4(start_date: string, end_date: string, centerline_id: number): Promise<CenterlineData[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/centerline/v1/data?centerline_id=${centerline_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: CenterlineData[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].value != \"number\") { throw new Error(\"invalid value value\") }\n            if (data[i].warning_limit != undefined && typeof data[i].warning_limit != \"number\") { throw new Error(\"invalid warning_limit value\") }\n            if (data[i].alarm_limit != undefined && typeof data[i].alarm_limit != \"number\") { throw new Error(\"invalid alarm_limit value\") }\n            if (data[i].warning_limit_bottom != undefined && typeof data[i].warning_limit_bottom != \"number\") { throw new Error(\"invalid warning_limit_bottom value\") }\n            if (data[i].alarm_limit_bottom != undefined && typeof data[i].alarm_limit_bottom != \"number\") { throw new Error(\"invalid alarm_limit_bottom value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel1Realtime(): Promise<DashboardCenterlineLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/centerline/v1/l1/realtime`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardCenterlineLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].centerline_id_ool)) { throw new Error(\"invalid centerline_id_ool value\") }\n            if (typeof data[i].centerline_green != \"number\") { throw new Error(\"invalid centerline_green value\") }\n            if (typeof data[i].centerline_yellow != \"number\") { throw new Error(\"invalid centerline_yellow value\") }\n            if (typeof data[i].centerline_red != \"number\") { throw new Error(\"invalid centerline_red value\") }\n            if (data[i].centerline_warn != undefined && typeof data[i].centerline_warn != \"number\") { throw new Error(\"invalid centerline_warn value\") }\n            if (data[i].centerline_alarm != undefined && typeof data[i].centerline_alarm != \"number\") { throw new Error(\"invalid centerline_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2Realtime(business_unit_id: number): Promise<DashboardCenterlineLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/centerline/v1/l2/realtime?business_unit_id=${business_unit_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardCenterlineLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].centerline_id_ool)) { throw new Error(\"invalid centerline_id_ool value\") }\n            if (typeof data[i].centerline_green != \"number\") { throw new Error(\"invalid centerline_green value\") }\n            if (typeof data[i].centerline_yellow != \"number\") { throw new Error(\"invalid centerline_yellow value\") }\n            if (typeof data[i].centerline_red != \"number\") { throw new Error(\"invalid centerline_red value\") }\n            if (data[i].centerline_warn != undefined && typeof data[i].centerline_warn != \"number\") { throw new Error(\"invalid centerline_warn value\") }\n            if (data[i].centerline_alarm != undefined && typeof data[i].centerline_alarm != \"number\") { throw new Error(\"invalid centerline_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3Realtime(link_up_id: number): Promise<DashboardCenterlineLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/centerline/v1/l3/realtime?link_up_id=${link_up_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardCenterlineLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].centerline_id != \"number\") { throw new Error(\"invalid dashboard centerline_id value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid dashboard parameter_name value\") }\n            if (typeof data[i].centerline_tipe != \"string\") { throw new Error(\"invalid dashboard centerline_tipe value\") }\n            if (typeof data[i].centerline_green != \"number\") { throw new Error(\"invalid centerline_green value\") }\n            if (typeof data[i].centerline_yellow != \"number\") { throw new Error(\"invalid centerline_yellow value\") }\n            if (typeof data[i].centerline_red != \"number\") { throw new Error(\"invalid centerline_red value\") }\n\n            if (!data[i].last_centerline_data) { throw new Error(\"missing last_centerline_data\") }\n            if (typeof data[i].last_centerline_data.centerline_id !== \"number\") { throw new Error(\"invalid last_centerline_data.centerline_id\") }\n            if (typeof data[i].last_centerline_data.value !== \"number\") { throw new Error(\"invalid last_centerline_data.value\") }\n            if (data[i].last_centerline_data.warning_limit != undefined && typeof data[i].last_centerline_data.warning_limit !== \"number\") { throw new Error(\"invalid last_centerline_data.warning_limit\") }\n            if (data[i].last_centerline_data.alarm_limit != undefined && typeof data[i].last_centerline_data.alarm_limit !== \"number\") { throw new Error(\"invalid last_centerline_data.alarm_limit\") }\n            if (data[i].last_centerline_data.warning_limit_bottom != undefined && typeof data[i].last_centerline_data.warning_limit_bottom !== \"number\") { throw new Error(\"invalid last_centerline_data.warning_limit_bottom\") }\n            if (data[i].last_centerline_data.alarm_limit_bottom != undefined && typeof data[i].last_centerline_data.alarm_limit_bottom !== \"number\") { throw new Error(\"invalid last_centerline_data.alarm_limit_bottom\") }\n            if (typeof data[i].last_centerline_data.created_at !== \"string\") { throw new Error(\"invalid last_centerline_data.created_at\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4Realtime(centerline_id: number): Promise<CenterlineData[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/centerline/v1/data/realtime?centerline_id=${centerline_id}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: CenterlineData[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].value != \"number\") { throw new Error(\"invalid value value\") }\n            if (data[i].warning_limit != undefined && typeof data[i].warning_limit != \"number\") { throw new Error(\"invalid warning_limit value\") }\n            if (data[i].alarm_limit != undefined && typeof data[i].alarm_limit != \"number\") { throw new Error(\"invalid alarm_limit value\") }\n            if (data[i].warning_limit_bottom != undefined && typeof data[i].warning_limit_bottom != \"number\") { throw new Error(\"invalid warning_limit_bottom value\") }\n            if (data[i].alarm_limit_bottom != undefined && typeof data[i].alarm_limit_bottom != \"number\") { throw new Error(\"invalid alarm_limit_bottom value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n}\n\nexport { CenterlineService, DashboardCenterlineService }","import React, { useMemo } from 'react'\nimport ReactSpeedometer from 'react-d3-speedometer'\n\ninterface GaugeProps {\n    value: number\n    topLimitWarn?: number\n    topLimitAlarm?: number\n    bottomLimitWarn?: number\n    bottomLimitAlarm?: number\n    minValue?: number\n    maxValue?: number\n    needleColor?: string\n    segmentColors?: string[]\n    segments?: number\n    width?: number | string\n    height?: number | string\n    unit?: string\n}\n\nconst Gauge: React.FC<GaugeProps> = ({\n    value,\n    topLimitWarn,\n    topLimitAlarm,\n    bottomLimitWarn,\n    bottomLimitAlarm,\n    minValue,\n    maxValue,\n    needleColor = '#2e2e2e',\n    segmentColors = ['#118a7e'],\n    segments = 3,\n    width = '100%',\n    height = '100%',\n    unit = '',\n}) => {\n\n    const computedLimits = useMemo(() => {\n        const values = []\n        if (topLimitWarn != undefined) values.push(topLimitWarn)\n        if (topLimitAlarm != undefined) values.push(topLimitAlarm)\n        if (bottomLimitWarn != undefined) values.push(bottomLimitWarn)\n        if (bottomLimitAlarm != undefined) values.push(bottomLimitAlarm)\n\n        const rawMax = values.length == 0 ? 100 : Math.max(...values)\n        const rawMin = values.length == 0 ? 0 : Math.min(...values)\n\n        const delta = rawMax * 0.25\n\n        const autoMax = rawMax + delta\n        const autoMin = rawMin - delta\n\n        return {\n            min: minValue != undefined ? minValue : autoMin,\n            max: maxValue != undefined ? maxValue : autoMax,\n        }\n    }, [topLimitWarn, topLimitAlarm, bottomLimitWarn, bottomLimitAlarm, minValue, maxValue])\n\n    const { computedStops, computedSegmentColors } = useMemo(() => {\n        const stops: number[] = []\n        const colors: string[] = []\n\n        if (\n            bottomLimitAlarm != undefined &&\n            bottomLimitWarn != undefined &&\n            topLimitWarn != undefined &&\n            topLimitAlarm != undefined\n        ) {\n            stops.push(\n                computedLimits.min,\n                bottomLimitAlarm,\n                bottomLimitWarn,\n                topLimitWarn,\n                topLimitAlarm,\n                computedLimits.max\n            )\n\n            colors.push(\n                '#9f1e49',\n                '#ca9257',\n                '#118a7e',\n                '#ca9257',\n                '#9f1e49'\n            )\n\n            const sortedStops = [...stops].sort((a, b) => a - b)\n            return {\n                computedStops: sortedStops,\n                computedSegmentColors: colors,\n            }\n        }\n\n        return {\n            computedStops: undefined,\n            computedSegmentColors: segmentColors,\n        }\n    }, [\n        bottomLimitAlarm,\n        bottomLimitWarn,\n        topLimitWarn,\n        topLimitAlarm,\n        computedLimits.min,\n        computedLimits.max,\n        segmentColors,\n    ])\n\n    const gaugeKey = useMemo(() => {\n        return [\n            computedStops?.join(','),\n            computedLimits.min,\n            computedLimits.max,\n            computedSegmentColors.join(','),\n            segments,\n        ].join('|')\n    }, [computedStops, computedLimits.min, computedLimits.max, computedSegmentColors, segments])\n\n    const memoizedGauge = useMemo(() => (\n        <ReactSpeedometer\n            key={gaugeKey}\n            value={value > computedLimits.max ? computedLimits.max : value < computedLimits.min ? computedLimits.min : value}\n            minValue={computedLimits.min}\n            maxValue={computedLimits.max}\n            needleColor={needleColor}\n            segmentColors={computedSegmentColors}\n            customSegmentStops={computedStops}\n            segments={computedStops ? computedStops.length - 1 : segments}\n            textColor=\"white\"\n            width={typeof width === 'string' ? 250 : width}\n            height={typeof height === 'string' ? 200 : height}\n            currentValueText={`${value}  ${unit}`}\n        />\n    ), [\n        value,\n        computedLimits.min,\n        computedLimits.max,\n        needleColor,\n        computedSegmentColors,\n        computedStops?.join(','),\n        segments,\n        width,\n        height,\n        gaugeKey,\n        unit\n    ])\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                color: 'red',\n                height: '100%',\n                width: '100%',\n            }}\n        >\n            {memoizedGauge}\n        </div>\n    )\n}\n\nexport default Gauge\n"],"names":["_ref","realtime","refresh","filterDate","onFilterDateChange","context","useContext","AppContext","contextVersion","version","contextAccessToken","contextShowAlertFunc","contextShowLoadingFunc","navigate","stateShowLoading","useNavigate","location","useLocation","linkUpId","useParams","link_up","state","machineCenterlineData","setMachineCenterlineData","useState","tableDataCenterline","setTableDataCenterline","level2Data","setLevel2Data","generateDataCenterline","async","resp","DashboardCenterlineService","DashboardLevel3Realtime","Number","start_date","Date","end_date","localStorage","removeItem","formatDate","DashboardLevel3","setItem","JSON","stringify","data","newLevel2ByType","i","length","row","centerline_id","machine","Object","values","flat","find","m","machineType","centerline_tipe","link_up_id","centerline_green","centerline_yellow","centerline_red","machine_ool","push","type","Array","from","Set","error","AlertEntity","message","Error","toString","level","generateData","undefined","centerline","resetAllData","promise","Promise","any","prev","reset","useEffect","keys","timeout","refreshfunc","setTimeout","clearTimeout","CenterlineService","GetAllCenterline","generateDataMachineCenterline","_jsx","className","styles","noData","children","_jsxs","src","noDataImg","alt","width","height","cardWrapper","style","gridTemplateColumns","gridAutoRows","map","val","_level2Data$val$machi","_level2Data$val","_level2Data$val$machi2","_level2Data$val2","_level2Data$val3","cardParent","cardParentHeader","titleHeader","bodyHeader","bodyHeaderLeft","itemHeaderLeft","oolNumber","cenNumberNormal","cenNumberAlarm","bodyHeaderRight","imgWrapper","sensorImage","imgHeader","cardParentBodyWrapper","cardParentBody","_data$last_centerline","_data$last_centerline2","_data$last_centerline3","_data$last_centerline4","gridItemCenter","onClick","dashboard_type","parameter_name","_Fragment","gridCenterHeader","last_centerline_data","created_at","gridCenterContent","centerline_display_type","warningAlarm","alarmColorBox","alarm_limit_bottom","warning_limit_bottom","warnColorBox","alarm_limit","warning_limit","gaugeContent","Gauge","value","topLimitWarn","topLimitAlarm","bottomLimitWarn","bottomLimitAlarm","unit","centerline_unit","booleanContent","notOk","booleanLeft","booleanRight","booleanStatus","FaRegCircleCheck","size","MdOutlineCancel","uri","BASE_URL","FetchUtils","fetchAuth","status","isArray","centerline_warn","centerline_alarm","centerline_bottom_warn","centerline_bottom_alarm","AddCenterline","method","body","headers","UpdateCenterline","fields","DeleteCenterline","GetLinkUpConfig","_row$centerline_warn","_row$centerline_alarm","UpsertLinkupConfig","GetBusinessUnitConfig","business_unit_id","_row$centerline_warn2","_row$centerline_alarm2","UpsertBusinessUnitConfig","DashboardLevel1","business_unit","centerline_id_ool","DashboardLevel2","DashboardLevel4","DashboardLevel1Realtime","DashboardLevel2Realtime","DashboardLevel4Realtime","minValue","maxValue","needleColor","segmentColors","segments","computedLimits","useMemo","rawMax","Math","max","rawMin","min","delta","computedStops","computedSegmentColors","stops","colors","sort","a","b","gaugeKey","join","memoizedGauge","ReactSpeedometer","customSegmentStops","textColor","currentValueText","display","justifyContent","color"],"sourceRoot":""}