{"version":3,"file":"static/js/132.445b5256.chunk.js","mappings":"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","sources":["utils/excel.ts","services/dashboard.ts","utils/filter-utils.ts","features/Dashboard/DashboardLevel4/DashboardLevel4Vibration.tsx","components/Observer/observer.tsx"],"sourcesContent":["import { format } from \"date-fns\"\nimport ExcelJS from \"exceljs\"\n\n/**\n * @typedef {Object} ExcelUtils\n * @property {Method} export - Export to excel from column (Array of String) and values (Object)\n * @property {Method} import - Import from excel returning Array of Sheet, with Sheet being Array of Object\n */\nclass ExcelUtils {\n    static export(export_name: string, column: string[], values: { [key: string]: string }[]) {\n        // Create a new workbook\n        const workbook = new ExcelJS.Workbook()\n        const worksheet = workbook.addWorksheet(export_name)\n\n        const numberToLetter = (number: number) => {\n            const letters = [\n                \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n                \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\",\n                \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\",\n                \"Y\", \"Z\",\n                \"AA\", \"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"AG\", \"AH\",\n                \"AI\", \"AJ\", \"AK\", \"AL\", \"AM\", \"AN\", \"AO\", \"AP\",\n                \"AQ\", \"AR\", \"AS\", \"AT\", \"AU\", \"AV\", \"AW\", \"AX\",\n                \"AY\", \"AZ\"\n            ]\n\n            if (number >= 0 && number <= 51) {\n                return letters[number]\n            }\n\n            return \"Invalid number\"\n        }\n\n        const startRow = 2\n        column.map((key, index) => {\n            worksheet.getColumn(`${numberToLetter(index)}`).width = 20\n            worksheet.getCell(`${numberToLetter(index)}${startRow - 1}`).value = String(key.toUpperCase())\n            worksheet.getCell(`${numberToLetter(index)}${startRow - 1}`).style = {\n                fill: {\n                    type: \"pattern\",\n                    pattern: \"solid\",\n                    fgColor: { argb: \"c8c8c8\" }, // Yellow background\n                },\n                font: {\n                    bold: true, // Bold font style\n                },\n                alignment: {\n                    vertical: \"middle\", // Align vertically at the middle\n                    horizontal: \"center\",\n                },\n                border: {\n                    top: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    left: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    right: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    bottom: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                },\n            }\n        })\n\n        // Add table data\n        values.map((val, index) => {\n            const row: string[] = []\n            column.map((key) => {\n                if (val[key] != null) {\n                    row.push(val[key])\n                } else {\n                    row.push('')\n                }\n            })\n            const dataRow = worksheet.addRow(row)\n            dataRow.eachCell((cell) => {\n                cell.style = {\n                    alignment: {\n                        vertical: \"middle\",\n                        horizontal: \"center\",\n                    },\n                    border: {\n                        top: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        left: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        right: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        bottom: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                    },\n                }\n            })\n        })\n\n        // Generate the Excel file\n        workbook.xlsx.writeBuffer().then((buffer) => {\n            // Create a Blob from the buffer\n            const blob = new Blob([buffer], {\n                type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            })\n\n            // Create a download link\n            const link = document.createElement(\"a\")\n            link.href = window.URL.createObjectURL(blob)\n            link.download = `${export_name}.xlsx`\n\n            // Simulate a click on the link to trigger the download\n            link.click()\n\n            // Clean up the URL object\n            window.URL.revokeObjectURL(link.href)\n        })\n    }\n\n    static async import(data: ArrayBuffer): Promise<{ [key: string]: string }[]> {\n        // Create a new workbook\n        const workbook = new ExcelJS.Workbook()\n        await workbook.xlsx.load(data)\n        const book: { [key: string | number]: any }[][] = []\n        workbook.eachSheet((worksheet) => {\n            const sheet: { [key: string | number]: any }[] = []\n            worksheet.eachRow((row) => {\n                sheet.push(row.values)\n            })\n            book.push(sheet)\n        })\n        // we only read sheet number 1\n        if (book.length > 0) {\n            const sheet = book[0]\n            const result: { [key: string]: string }[] = []\n            for (let i = 1; i < sheet.length; i++) {\n                const obj: { [key: string]: string } = {}\n                for (let j = 0; j < sheet[i].length; j++) {\n                    if (sheet[0][j] == null || typeof (sheet[0][j]) != 'string') continue\n                    if (sheet[i][j] instanceof Date) {\n                        obj[sheet[0][j].toLowerCase()] = format(sheet[i][j], \"yyyy-MM-dd HH:mm:ss\")\n                    } else {\n                        obj[sheet[0][j].toLowerCase()] = typeof (sheet[i][j]) == 'object' ? sheet[i][j].result : sheet[i][j] ?? ''\n                    }\n                }\n                result.push(obj)\n            }\n            return result\n        } else {\n            return []\n        }\n    }\n}\n\nexport default ExcelUtils","import { BASE_URL } from \"../constants\"\nimport { DashboardLevel1Entity, DashboardLevel2Entity, DashboardLevel3Entity, DashboardV4PressureEntity, DashboardV4VibrationEntity } from \"../entities/DashboardEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\nclass DashboardService {\n    static async GetDashboardLevel1(start_date: string, end_date: string): Promise<DashboardLevel1Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l1?start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel1Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n            \n            result.push({\n                business_unit_id: row.business_unit_id,\n                business_unit: row.business_unit,\n                business_unit_warn: row.business_unit_warn,\n                business_unit_alarm: row.business_unit_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel2(business_unit_id: number, start_date: string, end_date: string): Promise<DashboardLevel2Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l2?business_unit_id=${encodeURIComponent(business_unit_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel2Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            result.push({\n                link_up_id: row.link_up_id,\n                link_up: row.link_up,\n                link_up_warn: row.link_up_warn,\n                link_up_alarm: row.link_up_alarm,\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel3(link_up_id: number, start_date: string, end_date: string): Promise<DashboardLevel3Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l3?link_up_id=${encodeURIComponent(link_up_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel3Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            result.push({\n                machine_id: row.machine_id,\n                machine: row.machine,\n                machine_warn: row.machine_warn,\n                machine_alarm: row.machine_alarm,\n                machine_type: row.machine_type,\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel4Pressure(machine_id: number, start_date: string, end_date: string): Promise<DashboardV4PressureEntity[]> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/pressure/l4?machine_id=${encodeURIComponent(machine_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const rawData = Array.isArray(resp.data) ? resp.data : []\n        const data: DashboardV4PressureEntity[] = []\n\n        for (let i = 0; i < rawData.length; i++) {\n            data.push({\n                pressure: rawData[i].pressure,\n                pressure_max_alarm: rawData[i].pressure_max_alarm,\n                pressure_max_warn: rawData[i].pressure_max_warn,\n                pressure_min_alarm: rawData[i].pressure_min_alarm,\n                pressure_min_warn: rawData[i].pressure_min_warn,\n                timestamp: rawData[i].timestamp,\n            })\n        }\n\n        return data\n    }\n    \n    static async GetDashboardLevel4Vibration(machine_id: number, start_date: string, end_date: string): Promise<DashboardV4VibrationEntity[]> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/vibration/l4?machine_id=${encodeURIComponent(machine_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const rawData = Array.isArray(resp.data) ? resp.data : []\n        const data: DashboardV4VibrationEntity[] = []\n\n        for (let i = 0; i < rawData.length; i++) {\n            data.push({\n                x: rawData[i].x,\n                x_base: rawData[i].x_base,\n                x_warn: rawData[i].x_warn,\n                x_alarm: rawData[i].x_alarm,\n                z: rawData[i].z,\n                z_base: rawData[i].z_base,\n                z_warn: rawData[i].z_warn,\n                z_alarm: rawData[i].z_alarm,\n                x_acc: rawData[i].x_acc,\n                x_acc_base: rawData[i].x_acc_base,\n                x_acc_warn: rawData[i].x_acc_warn,\n                x_acc_alarm: rawData[i].x_acc_alarm,\n                z_acc: rawData[i].z_acc,\n                z_acc_base: rawData[i].z_acc_base,\n                z_acc_warn: rawData[i].z_acc_warn,\n                z_acc_alarm: rawData[i].z_acc_alarm,\n                temp: rawData[i].temp,\n                temp_warn: rawData[i].temp_warn,\n                temp_alarm: rawData[i].temp_alarm,\n                timestamp: rawData[i].timestamp,\n            })\n        }\n\n        return data\n    }\n}\n\nclass DashboardRealtimeService {\n    static async GetDashboardLevel1(): Promise<DashboardLevel1Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l1`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel1Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            const mergedArray = row.machine_ool_pressure.concat(row.machine_ool_vibration)\n            const mergedSet = Array.from(new Set(mergedArray))\n\n            result.push({\n                business_unit_id: row.business_unit_id,\n                business_unit: row.business_unit,\n                business_unit_warn: row.business_unit_warn,\n                business_unit_alarm: row.business_unit_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n                \n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel2(business_unit_id: number): Promise<DashboardLevel2Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l2?business_unit_id=${encodeURIComponent(business_unit_id)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel2Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            result.push({\n                link_up_id: row.link_up_id,\n                link_up: row.link_up,\n                link_up_warn: row.link_up_warn,\n                link_up_alarm: row.link_up_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel3(link_up_id: number,): Promise<DashboardLevel3Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l3?link_up_id=${encodeURIComponent(link_up_id)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel3Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            result.push({\n                machine_id: row.machine_id,\n                machine: row.machine,\n                machine_type: row.machine_type,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_warn: row.machine_warn,\n                machine_alarm: row.machine_alarm,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n            })\n        }\n\n        return result\n    }\n}\n\nexport { DashboardService, DashboardRealtimeService }","class FilterUtils {\n    static FilterTable = (row: any, tableDataFilter: { [key: string]: string }) => {\n        let keys = Object.keys(row)\n        for (let indexKey = 0; indexKey < keys.length; indexKey++) {\n            const key = keys[indexKey]\n            if (tableDataFilter[key]) {\n                if (row != undefined && row[key] != null) {\n                    if (tableDataFilter[key] !== \"\") {\n                        if (\n                            row[key]\n                                .toString()\n                                .toLowerCase()\n                                .includes(tableDataFilter[key].toString().toLowerCase()) == false\n                        ) {\n                            return false\n                        }\n                    }\n                } else {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    static SortingTable = (a: any, b: any, sortChoosed: string) => {\n        if (sortChoosed != null && sortChoosed != undefined) {\n            if (a[sortChoosed] !== undefined && b[sortChoosed] !== undefined) {\n                if (typeof a[sortChoosed] === 'string' && typeof b[sortChoosed] === 'string') {\n                    return a[sortChoosed].localeCompare(b[sortChoosed])\n                } else if (typeof a[sortChoosed] === 'number' && typeof b[sortChoosed] === 'number') {\n                    return a[sortChoosed] - b[sortChoosed]\n                }\n            }\n        }\n        return 0\n    }\n\n    static FastIsEmpty = (arr: any[]) => {\n        for (const _ in arr) {\n            return false\n        }\n        return true\n    }\n}\n\nexport default FilterUtils","import { useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { DashboardV4VibrationEntity } from '../../../entities/DashboardEntity'\nimport styles from './DashboardLevel4.module.css'\nimport { format, formatDate } from \"date-fns\"\nimport AppContext from \"../../../context\"\nimport filterUtils from \"../../../utils/filter-utils\"\nimport { AlertEntity } from \"../../../layouts/Alert/AlertEntity\"\nimport { FaAngleLeft, FaAngleRight, FaChartLine, FaSortDown, FaSortUp, FaTable } from \"react-icons/fa\"\nimport { DashboardService } from \"../../../services/dashboard\"\nimport { useParams } from \"react-router-dom\"\nimport TableObserved from \"../../../components/Observer/observer\"\nimport { GrLineChart } from \"react-icons/gr\"\nimport { TbTable } from \"react-icons/tb\"\nimport { BASE_URL } from '../../../constants'\n\n\n// ========================================= CHART IMPORT =========================================  //\nimport {\n    Chart as ChartJS,\n    LineElement,\n    PointElement,\n    LinearScale,\n    Title,\n    CategoryScale,\n    Tooltip,\n    Legend,\n    ChartData,\n    ChartOptions,\n    defaults\n} from 'chart.js'\n\nimport { Plugin } from 'chart.js'\nimport { Line } from 'react-chartjs-2'\nimport ExcelUtils from '../../../utils/excel'\n\nChartJS.register(\n    LineElement,\n    PointElement,\n    LinearScale,\n    Title,\n    CategoryScale,\n    Tooltip,\n    Legend\n)\n\ndefaults.maintainAspectRatio = false\ndefaults.responsive = true\n// ========================================= CHART IMPORT =========================================  //\n\n\ninterface VibrationPageProps {\n    realtime: boolean\n    setRealtime: (value: boolean) => void\n    refresh: number\n    start_date: Date\n    end_date: Date\n    setHandleGenerateExcel: (fn: (() => void) | null) => void\n}\n\n\n// ========================================= VIBRATION CONFIGURATION =========================================  //\ninterface VibrationAreaData {\n    warn: number\n    alarm: number\n}\ninterface VibrationAreaDataRealtime {\n    warn: number\n    alarm: number\n}\n\ntype VibrationChartType = \"x\" | \"x_acc\" | \"z\" | \"z_acc\" | \"temp\"\n\nconst VIBRATION_TYPES: VibrationChartType[] = [\"x\", \"x_acc\", \"z\", \"z_acc\", \"temp\"]\n\nconst LABEL_MAP: Record<VibrationChartType, string> = {\n    x: \"X Axis\",\n    x_acc: \"X Acceleration\",\n    z: \"Z Axis\",\n    z_acc: \"Z Acceleration\",\n    temp: \"Temperature\"\n}\n// ========================================= VIBRATION CONFIGURATION =========================================  //\n\n\nconst VibrationPage: React.FC<VibrationPageProps> = ({ realtime, setRealtime, refresh, start_date, end_date, setHandleGenerateExcel }) => {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n\n    const { machineId } = useParams()\n\n    const CHART_COLORS = {\n        chartLine: '#fb8500',\n        graphicGood: 'rgba(41, 191, 18, 0.21)',\n        graphicWarn: 'rgba(244, 188, 20, 0.28)',\n        graphicAlarm: 'rgba(213, 14, 81, 0.2)',\n    }\n\n    const [activeHourIndex, setActiveHourIndex] = useState(new Date())\n    const [isAuto, setIsAuto] = useState(true)\n    const [chartSplit, setChartSplit] = useState<\"hour\" | \"minutes_10\" | \"all\">(\"minutes_10\")\n    const [viewMode, setViewMode] = useState<'chart' | 'table' | 'table-ool'>('chart')\n    const [vibrationTypeChart, setVibrationTypeChart] = useState<VibrationChartType>(\"x\")\n\n    const [sortedCols, setSortedCols] = useState<keyof DashboardV4VibrationEntity | null>(null)\n    const [sortedColsType, setSortedColsType] = useState<\"ascending\" | \"descending\">(\"ascending\")\n\n    // ========================================= STATE VIBRATION BY DATE =========================================  //\n    const [tableData, setTableData] = useState<DashboardV4VibrationEntity[]>([])\n    const [tableDataCache, setTableDataCache] = useState<DashboardV4VibrationEntity[]>([])\n\n    const mappedDataRef = useRef<{ [key: string]: DashboardV4VibrationEntity[] }>({})\n\n    const [tableDataFilter, setTableDataFilter] = useState<{ [key: string]: string }>({})\n\n    const [chartData, setChartData] = useState<ChartData<'line'>>({ labels: [], datasets: [] })\n    const [chartOptions, setChartOptions] = useState<ChartOptions<'line'>>({})\n\n    const firstData = useRef<VibrationAreaData | null>(null)\n    // ========================================= STATE VIBRATION BY DATE =========================================  //\n\n\n    // ========================================= STATE VIBRATION REALTIME =========================================  //\n    let vibrationSocket: WebSocket | null = null\n    let reconnectVibration = true\n\n    const [tableDataRealtime, setTableDataRealtime] = useState<DashboardV4VibrationEntity[]>([])\n    const [tableDataRealtimeCache, setTableDataRealtimeCache] = useState<DashboardV4VibrationEntity[]>([])\n\n    const [tableDataRealtimeFilter, setTableDataRealtimeFilter] = useState<{ [key: string]: string }>({})\n\n    const [chartDataRealtime, setChartDataRealtime] = useState<ChartData<'line'>>({ labels: [], datasets: [] })\n    const [chartOptionsRealtime, setChartOptionsRealtime] = useState<ChartOptions<'line'>>({})\n\n    const firstDataRealtime = useRef<VibrationAreaDataRealtime | null>(null)\n    // ========================================= STATE VIBRATION REALTIME =========================================  //\n\n\n    const columns = [\n        { key: \"timestamp\", label: \"Waktu\" },\n        { key: \"x\", label: \"X\" },\n        { key: \"x_base\", label: \"X Base\" },\n        { key: \"x_warn\", label: \"X Warn\" },\n        { key: \"x_alarm\", label: \"X Alarm\" },\n        { key: \"z\", label: \"Z\" },\n        { key: \"z_base\", label: \"Z Base\" },\n        { key: \"z_warn\", label: \"Z Warn\" },\n        { key: \"z_alarm\", label: \"Z Alarm\" },\n        { key: \"x_acc\", label: \"X Acc\" },\n        { key: \"x_acc_base\", label: \"X Acc Base\" },\n        { key: \"x_acc_warn\", label: \"X Acc Warn\" },\n        { key: \"x_acc_alarm\", label: \"X Acc Alarm\" },\n        { key: \"z_acc\", label: \"Z Acc\" },\n        { key: \"z_acc_base\", label: \"Z Acc Base\" },\n        { key: \"z_acc_warn\", label: \"Z Acc Warn\" },\n        { key: \"z_acc_alarm\", label: \"Z Acc Alarm\" },\n        { key: \"temp\", label: \"Temp\" },\n        { key: \"temp_warn\", label: \"Temp Warn\" },\n        { key: \"temp_alarm\", label: \"Temp Alarm\" },\n    ]\n    function splitDataToMap(data: DashboardV4VibrationEntity[]) {\n        const map: { [key: string]: DashboardV4VibrationEntity[] } = {}\n\n        if (chartSplit == \"all\") {\n            return { \"all\": [...data].toReversed() }\n        }\n\n        data.toReversed().forEach(item => {\n            const date = new Date(item.timestamp)\n            const rounded = new Date(date)\n            rounded.setMinutes(Math.floor(date.getMinutes() / 10) * 10)\n            rounded.setSeconds(0)\n            rounded.setMilliseconds(0)\n\n            let key = format(rounded, \"yyyy-MM-dd HH:00:00\")\n            switch (chartSplit) {\n                case \"hour\": {\n                    key = format(rounded, \"yyyy-MM-dd HH:00:00\")\n                    break\n                }\n                case 'minutes_10': {\n                    key = format(rounded, \"yyyy-MM-dd HH:mm:00\")\n                    break\n                }\n                default:\n                    break;\n            }\n\n            if (map[key] == undefined) {\n                map[key] = []\n            } else {\n                map[key].push(item)\n            }\n        })\n\n        return map\n    }\n    function prepareChartData(mapData: { [key: string]: DashboardV4VibrationEntity[] }, vibrationType: VibrationChartType, activeHourIndex: Date) {\n        const map: { [key: string]: DashboardV4VibrationEntity[] } = mapData\n\n        // Find the group for the current activeHourIndex\n        const flooredMinutes = `${Math.floor(activeHourIndex.getMinutes() / 10)}0`\n\n        let key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n        switch (chartSplit) {\n            case \"hour\": {\n                key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n                break\n            }\n            case 'minutes_10': {\n                key = format(activeHourIndex, `yyyy-MM-dd HH:${flooredMinutes}:00`)\n                break\n            }\n            case 'all': {\n                key = \"all\"\n                break\n            }\n            default:\n                break;\n        }\n\n        const groupData = map[key] ?? []\n\n        // Get Labels & Data\n        const newLabels = groupData.map(msg => formatDate(msg.timestamp, key == \"all\" ? \"MM-dd HH:mm\" : \"HH:mm:ss\"))\n        const newData = groupData.map(item => item[vibrationType])\n\n        const groupDataReversed = groupData.toReversed()\n        // Get Area Warn, Alarm & Good\n        if (groupDataReversed[0]) {\n            if (realtime) {\n                firstDataRealtime.current = {\n                    alarm: groupData[0][`${vibrationType}_alarm`] ?? 0,\n                    warn: groupData[0][`${vibrationType}_warn`] ?? 0,\n                }\n            } else {\n                firstData.current = {\n                    alarm: groupData[0][`${vibrationType}_alarm`] ?? 0,\n                    warn: groupData[0][`${vibrationType}_warn`] ?? 0,\n                }\n            }\n        }\n\n        // Calculate min & max y\n        const dataMin = Math.min(...newData)\n        const dataMax = Math.max(...newData)\n        const range = dataMax - dataMin || 1\n        const padding = 0.2\n\n        const customMin = dataMin - range * padding\n        const customMax = dataMax + range * padding\n\n        return {\n            chartData: {\n                labels: newLabels,\n                datasets: [\n                    {\n                        label: `${LABEL_MAP[vibrationType]}`,\n                        data: newData,\n                        borderColor: CHART_COLORS.chartLine,\n                        pointBackgroundColor: CHART_COLORS.chartLine,\n                        pointBorderColor: \"#ffffff\",\n                        pointHoverBackgroundColor: \"#ffffff\",\n                        pointHoverBorderColor: CHART_COLORS.chartLine,\n                        borderWidth: 4,\n                        pointRadius: 0,\n                    },\n                ],\n            },\n            customMin,\n            customMax,\n        }\n    }\n\n\n    // ========================================= FUNCTIONS VIBRATION BY DATE =========================================  //\n    const statusArea: Plugin<'line'> = {\n        id: 'statusArea',\n        beforeDatasetsDraw(chart) {\n            const vibrationData = firstData.current\n\n            const { ctx, chartArea, scales } = chart\n            if (!chartArea || !scales.x || !scales.y) {\n                return\n            }\n\n            if (!vibrationData || (vibrationData.warn === 0 || vibrationData.warn == null) && (vibrationData.alarm === 0 || vibrationData.alarm == null)) {\n                return\n            }\n\n            ctx.save()\n\n            // --- Area Normal (Green) ---\n            const startNormalArea = scales.y.min\n            const endNormalArea = vibrationData ? vibrationData.warn : 0\n\n            const startNormalAreaPixel = scales.y.getPixelForValue(startNormalArea)\n            const endNormalAreaPixel = scales.y.getPixelForValue(endNormalArea)\n\n            ctx.fillStyle = CHART_COLORS.graphicGood\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startNormalAreaPixel, endNormalAreaPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startNormalAreaPixel - endNormalAreaPixel)\n            )\n\n            // --- Area Warn (Kuning) ---\n            const startMinWarn = vibrationData ? vibrationData.warn : 0\n            const endMinWarn = vibrationData ? vibrationData.alarm : 0\n\n            const startMinWarnPixel = scales.y.getPixelForValue(startMinWarn)\n            const endMinWarnPixel = scales.y.getPixelForValue(endMinWarn)\n\n            ctx.fillStyle = CHART_COLORS.graphicWarn\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinWarnPixel, endMinWarnPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinWarnPixel - endMinWarnPixel)\n            )\n\n            // --- Area Alarm (Merah) ---\n            const startMinAlarm = vibrationData ? vibrationData.alarm : 0\n            const endMinAlarm = scales.y.max\n\n            const startMinAlarmPixel = scales.y.getPixelForValue(startMinAlarm)\n            const endMinAlarmPixel = scales.y.getPixelForValue(endMinAlarm)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixel, endMinAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixel - endMinAlarmPixel)\n            )\n\n            ctx.restore()\n        }\n    }\n    const updateChart = (mapData: { [key: string]: DashboardV4VibrationEntity[] }, vibrationType: VibrationChartType, activeHourIndex: Date) => {\n        const { chartData, customMin, customMax } = prepareChartData(mapData, vibrationType, activeHourIndex)\n        setChartData(chartData)\n\n        setChartOptions({\n            responsive: true,\n            maintainAspectRatio: false,\n            animation: {\n                duration: 800,\n                easing: 'easeInOutCubic',\n            },\n            plugins: {\n                legend: {\n                    position: 'top',\n                    labels: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 14,\n                            weight: 500,\n                            family: \"'Inter', 'Segoe UI', sans-serif\",\n                        },\n                        usePointStyle: true,\n                        pointStyle: 'rectRounded',\n                    },\n                },\n                tooltip: {\n                    backgroundColor: '#1f2937',\n                    titleColor: '#f8fafc',\n                    bodyColor: '#cbd5e1',\n                    padding: 12,\n                    borderColor: '#0077b6',\n                    borderWidth: 1,\n                    cornerRadius: 8,\n                    titleFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 14,\n                        weight: 600,\n                    },\n                    bodyFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 13,\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        maxRotation: 45,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        padding: 8,\n                    },\n                    min: customMin,\n                    max: customMax,\n                },\n            },\n            layout: {\n                padding: {\n                    top: 10,\n                    bottom: 10,\n                    left: 10,\n                    right: 10,\n                },\n            },\n            elements: {\n                line: {\n                    borderJoinStyle: 'round',\n                },\n                point: {\n                    pointStyle: 'circle',\n                },\n            },\n        })\n    }\n\n    const handleFilterAndSort = () => {\n        const table_filtered = tableDataCache.filter((row) => {\n            return filterUtils.FilterTable(row, tableDataFilter)\n        }).sort((a, b) => {\n            if (!sortedCols) { return 0 }\n            if (sortedColsType == \"ascending\") {\n                return filterUtils.SortingTable(a, b, sortedCols)\n            } else {\n                return filterUtils.SortingTable(b, a, sortedCols)\n            }\n        })\n        setTableData(table_filtered)\n    }\n    const filterTable = (column: keyof DashboardV4VibrationEntity, columnnName?: string) => {\n        return <div>\n            <input style={{ fontSize: \"12px\", marginTop: \"0.5dvh\", width: \"150px\" }} type=\"text\" value={tableDataFilter[column] ?? \"\"}\n                placeholder={`${columnnName ?? column} ...`}\n                onChange={(event) => {\n                    setTableDataFilter((prev) => {\n                        const newData = { ...prev }\n                        newData[column] = event.target.value\n                        return newData\n                    })\n                }}\n            />\n        </div>\n    }\n    const headerTable = (column: keyof DashboardV4VibrationEntity, columnName?: string) => {\n        return <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", gap: \"3px\", whiteSpace: \"nowrap\", cursor: \"pointer\" }}\n            onClick={() => {\n                setSortedCols(column)\n                if (sortedColsType === \"ascending\") {\n                    setSortedColsType(\"descending\")\n                } else {\n                    setSortedColsType(\"ascending\")\n                }\n            }}\n        >\n            <div>{columnName ?? column}</div>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0\", alignItems: \"center\", justifyItems: \"center\" }}>\n                <FaSortUp style={{ color: ((sortedCols == column && sortedColsType == \"descending\") ? \"var(--secondary-color)\" : \"silver\"), margin: 0, padding: 0, height: '18px' }} />\n                <FaSortDown style={{ color: ((sortedCols == column && sortedColsType == \"ascending\") ? \"var(--secondary-color)\" : \"silver\"), margin: \"-18px\", padding: 0, height: '18px' }} />\n            </div>\n        </div>\n    }\n\n    const generateData = async (withLoading: boolean) => {\n        if (withLoading) {\n            contextShowLoadingFunc(true)\n        }\n\n        try {\n            const resp = await DashboardService.GetDashboardLevel4Vibration(\n                Number(machineId),\n                formatDate(start_date, 'yyyy-MM-dd'),\n                formatDate(end_date, 'yyyy-MM-dd')\n            )\n            setTableData(resp)\n            setTableDataCache(resp)\n\n            const map = splitDataToMap(resp)\n            mappedDataRef.current = map\n\n            const keys = Object.keys(map)\n            if (keys.length > 0 && chartSplit != \"all\") {\n                const newDate = new Date(keys[keys.length - 1])\n                setActiveHourIndex(newDate)\n                updateChart(mappedDataRef.current, vibrationTypeChart, newDate)\n            } else {\n                updateChart(mappedDataRef.current, vibrationTypeChart, activeHourIndex)\n            }\n\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({\n                message: error instanceof Error ? error.message : error.toString(),\n                level: 3\n            }))\n        } finally {\n            contextShowLoadingFunc(false)\n        }\n    }\n    const vibrationDataRows = (index: number, row: DashboardV4VibrationEntity) => {\n        const styleX = getCollorRows(row.x, row.x_warn, row.x_alarm)\n        const styleXAcc = getCollorRows(row.x_acc, row.x_acc_warn, row.x_acc_alarm)\n        const styleZ = getCollorRows(row.z, row.z_warn, row.z_alarm)\n        const styleZAcc = getCollorRows(row.z_acc, row.z_acc_warn, row.z_acc_alarm)\n        const styleTemp = getCollorRows(row.temp, row.temp_warn, row.temp_alarm)\n\n        return <>\n            <td>{index + 1}</td>\n            <td>{format(row.timestamp, `yyyy-MM-dd HH:mm:ss`)}</td>\n            <td style={{ color: styleX.color, fontWeight: styleX.weight }}>{row.x}</td>\n            <td>{row.x_base}</td>\n            <td>{row.x_warn}</td>\n            <td>{row.x_alarm}</td>\n            <td style={{ color: styleZ.color, fontWeight: styleZ.weight }}>{row.z}</td>\n            <td>{row.z_base}</td>\n            <td>{row.z_warn}</td>\n            <td>{row.z_alarm}</td>\n            <td style={{ color: styleXAcc.color, fontWeight: styleXAcc.weight }}>{row.x_acc}</td>\n            <td>{row.x_acc_base}</td>\n            <td>{row.x_acc_warn}</td>\n            <td>{row.x_acc_alarm}</td>\n            <td style={{ color: styleZAcc.color, fontWeight: styleZAcc.weight }}>{row.z_acc}</td>\n            <td>{row.z_acc_base}</td>\n            <td>{row.z_acc_warn}</td>\n            <td>{row.z_acc_alarm}</td>\n            <td style={{ color: styleTemp.color, fontWeight: styleTemp.weight }}>{row.temp}</td>\n            <td>{row.temp_warn}</td>\n            <td>{row.temp_alarm}</td>\n        </>\n    }\n\n    const getCollorRows = (value: number, warn: number | undefined, alarm: number | undefined) => {\n        let valueColor = 'black'\n        let valueWeight = '400'\n\n        if (warn != undefined && value < warn) {\n            valueColor = 'green'\n            valueWeight = 'bold'\n        }\n\n        if (warn != undefined && value >= warn) {\n            valueColor = 'orange'\n            valueWeight = 'bold'\n        }\n\n        if (alarm != undefined && value >= alarm) {\n            valueColor = 'red'\n            valueWeight = 'bold'\n        }\n\n        return {\n            color: valueColor,\n            weight: valueWeight\n        }\n    }\n\n    useEffect(() => {\n        handleFilterAndSort()\n    }, [tableDataFilter, sortedCols, sortedColsType])\n    useEffect(() => {\n        // no loading on first open\n        generateData(refresh != 0)\n    }, [refresh])\n    // ========================================= FUNCTIONS VIBRATION BY DATE =========================================  //\n\n\n    // ========================================= FUNCTIONS VIBRATION REALTIME =========================================  //\n    const statusAreaRealtime: Plugin<'line'> = {\n        id: 'statusAreaRealtime',\n        beforeDatasetsDraw(chart) {\n            const vibrationData = firstDataRealtime.current\n\n            const { ctx, chartArea, scales } = chart\n            if (!chartArea || !scales.x || !scales.y) {\n                return\n            }\n\n            if (!vibrationData || ((vibrationData.warn === 0 || vibrationData.warn == null) && (vibrationData.alarm === 0 || vibrationData.alarm == null))) {\n                return\n            }\n\n            ctx.save()\n\n            // --- Area Normal (Green) ---\n            const startNormalArea = scales.y.min\n            const endNormalArea = vibrationData ? vibrationData.warn : 0\n\n            const startNormalAreaPixel = scales.y.getPixelForValue(startNormalArea)\n            const endNormalAreaPixel = scales.y.getPixelForValue(endNormalArea)\n\n            ctx.fillStyle = CHART_COLORS.graphicGood\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startNormalAreaPixel, endNormalAreaPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startNormalAreaPixel - endNormalAreaPixel)\n            )\n\n            // --- Area Warn (Kuning) ---\n            const startMinWarn = vibrationData ? vibrationData.warn : 0\n            const endMinWarn = vibrationData ? vibrationData.alarm : 0\n\n            const startMinWarnPixel = scales.y.getPixelForValue(startMinWarn)\n            const endMinWarnPixel = scales.y.getPixelForValue(endMinWarn)\n\n            ctx.fillStyle = CHART_COLORS.graphicWarn\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinWarnPixel, endMinWarnPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinWarnPixel - endMinWarnPixel)\n            )\n\n            // --- Area Alarm (Merah) ---\n            const startMinAlarm = vibrationData ? vibrationData.alarm : 0\n            const endMinAlarm = scales.y.max\n\n            const startMinAlarmPixel = scales.y.getPixelForValue(startMinAlarm)\n            const endMinAlarmPixel = scales.y.getPixelForValue(endMinAlarm)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixel, endMinAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixel - endMinAlarmPixel)\n            )\n\n            ctx.restore()\n        }\n    }\n    const updateChartRealtime = (mapData: { [key: string]: DashboardV4VibrationEntity[] }, vibrationType: VibrationChartType, activeHourIndex: Date) => {\n        const { chartData, customMin, customMax } = prepareChartData(\n            mapData,\n            vibrationType,\n            activeHourIndex\n        )\n        setChartDataRealtime(chartData)\n\n        setChartOptionsRealtime({\n            responsive: true,\n            maintainAspectRatio: false,\n            animation: {\n                duration: 800,\n                easing: 'easeInOutCubic',\n            },\n            plugins: {\n                legend: {\n                    position: 'top',\n                    labels: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 14,\n                            weight: 500,\n                            family: \"'Inter', 'Segoe UI', sans-serif\",\n                        },\n                        usePointStyle: true,\n                        pointStyle: 'rectRounded',\n                    },\n                },\n                tooltip: {\n                    backgroundColor: '#1f2937',\n                    titleColor: '#f8fafc',\n                    bodyColor: '#cbd5e1',\n                    padding: 12,\n                    borderColor: '#0077b6',\n                    borderWidth: 1,\n                    cornerRadius: 8,\n                    titleFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 14,\n                        weight: 600,\n                    },\n                    bodyFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 13,\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        maxRotation: 45,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        padding: 8,\n                    },\n                    min: customMin,\n                    max: customMax,\n                },\n            },\n            layout: {\n                padding: {\n                    top: 10,\n                    bottom: 10,\n                    left: 10,\n                    right: 10,\n                },\n            },\n            elements: {\n                line: {\n                    borderJoinStyle: 'round',\n                },\n                point: {\n                    pointStyle: 'circle',\n                },\n            }\n        })\n    }\n\n    const handleFilterAndSortRealtime = () => {\n        const table_filtered = tableDataRealtimeCache.filter((row) => {\n            return filterUtils.FilterTable(row, tableDataRealtimeFilter)\n        }).sort((a, b) => {\n            if (!sortedCols) { return 0 }\n            if (sortedColsType == \"ascending\") {\n                return filterUtils.SortingTable(a, b, sortedCols)\n            } else {\n                return filterUtils.SortingTable(b, a, sortedCols)\n            }\n        })\n        setTableDataRealtime(table_filtered)\n    }\n    const filterTableRealtime = (column: keyof DashboardV4VibrationEntity, columnnName?: string) => {\n        return <div>\n            <input style={{ fontSize: \"12px\", marginTop: \"0.5dvh\", width: \"150px\" }} type=\"text\" value={tableDataRealtimeFilter[column] ?? \"\"}\n                placeholder={`${columnnName ?? column} ...`}\n                onChange={(event) => {\n                    setTableDataRealtimeFilter((prev) => {\n                        const newData = { ...prev }\n                        newData[column] = event.target.value\n                        return newData\n                    })\n                }}\n            />\n        </div>\n    }\n    const headerTableRealtime = (column: keyof DashboardV4VibrationEntity, columnName?: string) => {\n        return <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", gap: \"3px\", whiteSpace: \"nowrap\", cursor: \"pointer\" }}\n            onClick={() => {\n                setSortedCols(column)\n                if (sortedColsType === \"ascending\") {\n                    setSortedColsType(\"descending\")\n                } else {\n                    setSortedColsType(\"ascending\")\n                }\n            }}\n        >\n            <div>{columnName ?? column}</div>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0\", alignItems: \"center\", justifyItems: \"center\" }}>\n                <FaSortUp style={{ color: ((sortedCols == column && sortedColsType == \"descending\") ? \"var(--secondary-color)\" : \"silver\"), margin: 0, padding: 0, height: '18px' }} />\n                <FaSortDown style={{ color: ((sortedCols == column && sortedColsType == \"ascending\") ? \"var(--secondary-color)\" : \"silver\"), margin: \"-18px\", padding: 0, height: '18px' }} />\n            </div>\n        </div>\n    }\n\n    const connectVibration = () => {\n        if (!reconnectVibration) {\n            console.log(\"canceled\")\n            return\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n                vibrationSocket = new WebSocket(`${BASE_URL}/ws/realtime/vibration`)\n\n                vibrationSocket.onmessage = (event: MessageEvent) => {\n                    try {\n                        const response = JSON.parse(event.data)\n                        setTableDataRealtime(response.data)\n                        setTableDataRealtimeCache(response.data)\n                    } catch (error: any) {\n                        console.log(\"Invalid response: \", error.message)\n                    }\n                }\n\n                vibrationSocket.onerror = (err) => {\n                    console.error(\"WebSocket error:\", err)\n                    vibrationSocket?.close()\n                }\n\n                vibrationSocket.onclose = async () => {\n                    console.log(\"vibrationSocket closed.\")\n                    console.log(\"Try reconnecting...\")\n                    try {\n                        await connectVibration()\n                    } catch (error) {\n                        console.log(\"Failed to reconnect\")\n                    }\n                }\n\n                vibrationSocket.onopen = () => {\n                    console.log(\"vibrationSocket connected\")\n                    const machineIdPayload = {\n                        type: \"subscribe\",\n                        machine_id: machineId,\n                    }\n                    vibrationSocket?.send(JSON.stringify(machineIdPayload))\n                    resolve(true)\n                }\n            } catch (error) {\n                console.log(\"Error reconnect: \", error)\n                reject(false)\n            }\n        })\n    }\n\n    useEffect(() => {\n        if (vibrationSocket == null || vibrationSocket.readyState == WebSocket.CLOSED) {\n            console.log(\"Connecting ws vibration...\")\n            connectVibration()\n        }\n        return () => {\n            if (vibrationSocket != null) {\n                console.log(\"Disconnecting ws vibration...\")\n                vibrationSocket.close()\n            }\n            reconnectVibration = false\n        }\n    }, [vibrationSocket])\n    useEffect(() => {\n        handleFilterAndSortRealtime()\n    }, [tableDataRealtimeFilter, sortedCols, sortedColsType])\n    // ========================================= FUNCTIONS VIBRATION REALTIME =========================================  //\n\n\n    // Auto mode\n    useEffect(() => {\n        if (!realtime) { return }\n        if (!isAuto) { return }\n\n        const map = splitDataToMap(tableDataRealtime)\n        const newDate = new Date()\n        newDate.setMinutes(Math.floor(newDate.getMinutes() / 10) * 10)\n\n        setActiveHourIndex(newDate)\n        updateChartRealtime(map, vibrationTypeChart, newDate)\n    }, [isAuto, realtime, tableDataRealtime, vibrationTypeChart, chartSplit])\n\n    // Manual mode\n    useEffect(() => {\n        if (!realtime) { return }\n        if (isAuto) { return }\n\n        const map = splitDataToMap(tableDataRealtime)\n        updateChartRealtime(map, vibrationTypeChart, activeHourIndex)\n    }, [isAuto, realtime, tableDataRealtime, vibrationTypeChart, activeHourIndex, chartSplit])\n\n    // by date\n    useEffect(() => {\n        if (realtime) { return }\n        updateChart(mappedDataRef.current, vibrationTypeChart, activeHourIndex)\n    }, [realtime, mappedDataRef.current, vibrationTypeChart, activeHourIndex])\n\n    // cache update\n    useEffect(() => {\n        const map = splitDataToMap(tableData)\n        mappedDataRef.current = map\n\n        const keys = Object.keys(map)\n        if (chartSplit != \"all\" && keys.length > 0) {\n            const newDate = new Date(keys[keys.length - 1])\n            setActiveHourIndex(newDate)\n        } else {\n            setActiveHourIndex(new Date())\n        }\n\n    }, [realtime, chartSplit])\n\n    // title chart\n    const titleChart = useMemo(() => {\n        if (chartSplit == \"all\") {\n            return \"All Data\"\n        } else if (chartSplit == \"hour\") {\n            return formatDate(activeHourIndex, \"dd MMM yyyy HH:00\")\n        } else if (chartSplit == \"minutes_10\") {\n            return formatDate(activeHourIndex, \"dd MMM yyyy HH:mm\")\n        }\n    }, [activeHourIndex, chartSplit])\n\n    const handleChangeActiveHourIndex = (amount: number, unit: 'hours' | 'minutes') => {\n        setIsAuto(false)\n        const newDate = new Date(activeHourIndex)\n        const flooredMinutes = Math.floor(newDate.getMinutes() / 10) * 10\n        if (unit === 'hours') {\n            newDate.setHours(newDate.getHours() + amount, flooredMinutes, 0, 0)\n        } else if (unit === 'minutes') {\n            newDate.setHours(newDate.getHours(), flooredMinutes + amount, 0, 0)\n        }\n\n        setActiveHourIndex(newDate)\n    }\n\n    const handleSetPage = (page: \"chart\" | \"table\" | \"table-ool\", realtime: boolean) => {\n        // set state\n        setViewMode(page);\n        setRealtime(realtime);\n\n        // reset everything\n        setSortedCols(null);\n        setSortedColsType(\"ascending\")\n\n        // update chart\n        if (page == \"chart\") {\n            if (realtime) {\n                const map = splitDataToMap(tableDataRealtime)\n                updateChartRealtime(map, vibrationTypeChart, activeHourIndex)\n            } else {\n                updateChart(mappedDataRef.current, vibrationTypeChart, activeHourIndex)\n            }\n        }\n    }\n\n    const handleToggle = () => {\n        setIsAuto((prev) => !prev)\n    }\n\n    // excel\n    const generateExcelRealtime = () => {\n        if (tableDataRealtime.length == 0) { return contextShowAlertFunc(new AlertEntity({ message: \"NO DATA!\", level: 3 })); }\n\n        const column = [\n            \"timestamp\", \"x\", \"x_base\", \"x_warn\", \"x_alarm\",\n            \"z\", \"z_base\", \"z_warn\", \"z_alarm\",\n            \"x_acc\", \"x_acc_base\", \"x_acc_warn\", \"x_acc_alarm\",\n            \"z_acc\", \"z_acc_base\", \"z_acc_warn\", \"z_acc_alarm\",\n            \"temp\", \"temp_warn\", \"temp_alarm\",\n        ]\n\n        let values: { [key: string]: string }[] = []\n\n        for (let i = 0; i < tableData.length; i++) {\n            const item = tableData[i] as DashboardV4VibrationEntity\n\n            values.push({\n                timestamp: format(\n                    typeof item.timestamp === \"string\" ? new Date(item.timestamp) : item.timestamp,\n                    \"yyyy-MM-dd HH:mm:ss\"\n                ),\n\n                x: `${item.x}`,\n                x_base: `${item.x_base}`,\n                x_warn: `${item.x_warn ?? \"\"}`,\n                x_alarm: `${item.x_alarm ?? \"\"}`,\n\n                z: `${item.z}`,\n                z_base: `${item.z_base}`,\n                z_warn: `${item.z_warn ?? \"\"}`,\n                z_alarm: `${item.z_alarm ?? \"\"}`,\n\n                x_acc: `${item.x_acc}`,\n                x_acc_base: `${item.x_acc_base}`,\n                x_acc_warn: `${item.x_acc_warn ?? \"\"}`,\n                x_acc_alarm: `${item.x_acc_alarm ?? \"\"}`,\n\n                z_acc: `${item.z_acc}`,\n                z_acc_base: `${item.z_acc_base}`,\n                z_acc_warn: `${item.z_acc_warn ?? \"\"}`,\n                z_acc_alarm: `${item.z_acc_alarm ?? \"\"}`,\n\n                temp: `${item.temp}`,\n                temp_warn: `${item.temp_warn ?? \"\"}`,\n                temp_alarm: `${item.temp_alarm ?? \"\"}`\n            })\n        }\n\n        ExcelUtils.export(`Vibration Data Realtime`, column, values)\n    }\n    const generateExcel = () => {\n        if (tableData.length === 0) {\n            return contextShowAlertFunc(new AlertEntity({ message: \"NO DATA!\", level: 3 }))\n        }\n\n        const column = [\n            \"timestamp\", \"x\", \"x_base\", \"x_warn\", \"x_alarm\",\n            \"z\", \"z_base\", \"z_warn\", \"z_alarm\",\n            \"x_acc\", \"x_acc_base\", \"x_acc_warn\", \"x_acc_alarm\",\n            \"z_acc\", \"z_acc_base\", \"z_acc_warn\", \"z_acc_alarm\",\n            \"temp\", \"temp_warn\", \"temp_alarm\",\n        ]\n\n        let values: { [key: string]: string }[] = []\n\n        for (let i = 0; i < tableData.length; i++) {\n            const item = tableData[i] as DashboardV4VibrationEntity\n\n            values.push({\n                timestamp: format(\n                    typeof item.timestamp === \"string\" ? new Date(item.timestamp) : item.timestamp,\n                    \"yyyy-MM-dd HH:mm:ss\"\n                ),\n\n                x: `${item.x}`,\n                x_base: `${item.x_base}`,\n                x_warn: `${item.x_warn ?? \"\"}`,\n                x_alarm: `${item.x_alarm ?? \"\"}`,\n\n                z: `${item.z}`,\n                z_base: `${item.z_base}`,\n                z_warn: `${item.z_warn ?? \"\"}`,\n                z_alarm: `${item.z_alarm ?? \"\"}`,\n\n                x_acc: `${item.x_acc}`,\n                x_acc_base: `${item.x_acc_base}`,\n                x_acc_warn: `${item.x_acc_warn ?? \"\"}`,\n                x_acc_alarm: `${item.x_acc_alarm ?? \"\"}`,\n\n                z_acc: `${item.z_acc}`,\n                z_acc_base: `${item.z_acc_base}`,\n                z_acc_warn: `${item.z_acc_warn ?? \"\"}`,\n                z_acc_alarm: `${item.z_acc_alarm ?? \"\"}`,\n\n                temp: `${item.temp}`,\n                temp_warn: `${item.temp_warn ?? \"\"}`,\n                temp_alarm: `${item.temp_alarm ?? \"\"}`\n            })\n        }\n\n        ExcelUtils.export(\"Vibration Data\", column, values)\n    }\n\n    useEffect(() => {\n        if (realtime) {\n            setHandleGenerateExcel(() => generateExcelRealtime)\n        } else {\n            setHandleGenerateExcel(() => generateExcel)\n        }\n\n        return () => {\n            setHandleGenerateExcel(null)\n        }\n    }, [realtime, tableDataRealtime, tableData])\n\n    return <>\n        <div className={styles.cardBodyHeader}>\n\n            {/* Realtime */}\n            {viewMode === 'chart' && realtime && (\n                <>\n                    <div className={styles.headerChart}>\n                        <div className={styles.chartButtons}>\n                            {VIBRATION_TYPES.map((type) => (\n                                <button\n                                    key={type}\n                                    onClick={() => setVibrationTypeChart(type)}\n                                    className={vibrationTypeChart === type ? styles.activeBtn : \"\"}\n                                >\n                                    {LABEL_MAP[type]}\n                                </button>\n                            ))}\n                        </div>\n                        <div className={styles.titleChart}>{titleChart}</div>\n                        <div className={styles.chartButtons} style={{ justifyContent: \"end\" }}>\n                            <button onClick={() => setChartSplit(\"hour\")} className={chartSplit === \"hour\" ? styles.activeBtn : \"\"}>\n                                Hour\n                            </button>\n                            <button onClick={() => setChartSplit(\"minutes_10\")} className={chartSplit === \"minutes_10\" ? styles.activeBtn : \"\"}>\n                                Minute\n                            </button>\n                            <button onClick={() => setChartSplit(\"all\")} className={chartSplit === \"all\" ? styles.activeBtn : \"\"}>\n                                All\n                            </button>\n                        </div>\n                    </div>\n                    <div className={styles.bodyChart}>\n                        <button className={styles.buttonChart1} style={{ borderRadius: '0 0 0 12px' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(-1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(-10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleLeft /></button>\n                        <div className={styles.wrapperChart}>\n                            <Line data={chartDataRealtime} options={chartOptionsRealtime} plugins={[statusAreaRealtime]} />\n                        </div>\n                        <button className={styles.buttonChart2} style={{ borderRadius: '0 0 12px 0' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleRight /></button>\n                    </div>\n                </>\n            )}\n            {viewMode === 'table' && realtime && (\n                <>\n                    <div style={{ flex: 1, overflowY: \"auto\" }} className=\"ordering-table\">\n                        <table className=\"tableclickcell\">\n                            <thead>\n                                <tr>\n                                    <th>No</th>\n                                    {columns.map((col) => (\n                                        <th\n                                            key={col.key}\n                                            className={col.key === \"timestamp\" ? \"wide-timestamp\" : \"\"}\n                                        >\n                                            {headerTableRealtime(col.key as keyof DashboardV4VibrationEntity, col.label)}\n                                            {filterTableRealtime(col.key as keyof DashboardV4VibrationEntity, col.label)}\n                                        </th>\n                                    ))}\n                                </tr>\n                            </thead>\n                            {!filterUtils.FastIsEmpty(tableDataRealtime)\n                                ? <tbody>\n                                    <TableObserved\n                                        tableData={tableDataRealtime}\n                                        rowFunction={vibrationDataRows}\n                                        rowsCount={250}\n                                        rowsIncrement={50}\n                                    />\n                                </tbody>\n                                : <tbody><tr><td colSpan={1000}>No Data Available Yet !</td></tr></tbody>\n                            }\n                        </table>\n                    </div>\n                </>\n            )}\n\n            {/* By Date */}\n            {viewMode === 'chart' && !realtime && (\n                <>\n                    <div className={styles.headerChart}>\n                        <div className={styles.chartButtons}>\n                            {VIBRATION_TYPES.map((type) => (\n                                <button\n                                    key={type}\n                                    onClick={() => { setVibrationTypeChart(type); }}\n                                    className={vibrationTypeChart === type ? styles.activeBtn : \"\"}\n                                >\n                                    {LABEL_MAP[type]}\n                                </button>\n                            ))}\n                        </div>\n                        <div className={styles.titleChart}>{titleChart}</div>\n                        <div className={styles.chartButtons} style={{ justifyContent: \"end\" }}>\n                            <button onClick={() => setChartSplit(\"hour\")} className={chartSplit === \"hour\" ? styles.activeBtn : \"\"}>\n                                Hour\n                            </button>\n                            <button onClick={() => setChartSplit(\"minutes_10\")} className={chartSplit === \"minutes_10\" ? styles.activeBtn : \"\"}>\n                                Minute\n                            </button>\n                            <button onClick={() => setChartSplit(\"all\")} className={chartSplit === \"all\" ? styles.activeBtn : \"\"}>\n                                All\n                            </button>\n                        </div>\n                    </div>\n                    <div className={styles.bodyChart}>\n                        <button className={styles.buttonChart1} style={{ borderRadius: '0 0 0 12px' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(-1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(-10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleLeft /></button>\n                        <div className={styles.wrapperChart}>\n                            <Line data={chartData} options={chartOptions} plugins={[statusArea]} />\n                        </div>\n                        <button className={styles.buttonChart2} style={{ borderRadius: '0 0 12px 0' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleRight /></button>\n                    </div>\n                </>\n            )}\n            {viewMode === 'table' && !realtime && (\n                <>\n                    <div style={{ flex: 1, overflowY: \"auto\" }} className=\"ordering-table\">\n                        <table className=\"tableclickcell\">\n                            <thead>\n                                <tr>\n                                    <th>No</th>\n                                    {columns.map((col) => (\n                                        <th\n                                            key={col.key}\n                                            className={col.key === \"timestamp\" ? \"wide-timestamp\" : \"\"}\n                                        >\n                                            {headerTable(col.key as keyof DashboardV4VibrationEntity, col.label)}\n                                            {filterTable(col.key as keyof DashboardV4VibrationEntity, col.label)}\n                                        </th>\n                                    ))}\n                                </tr>\n                            </thead>\n                            {!filterUtils.FastIsEmpty(tableData)\n                                ? <tbody>\n                                    <TableObserved\n                                        tableData={tableData}\n                                        rowFunction={vibrationDataRows}\n                                        rowsCount={250}\n                                        rowsIncrement={50}\n                                    />\n                                </tbody>\n                                : <tbody><tr><td colSpan={1000}>No Data Available Yet !</td></tr></tbody>\n                            }\n                        </table>\n                    </div>\n                </>\n            )}\n\n        </div>\n\n        <div className={styles.cardBodyFooter}>\n            <div className={styles.footerLeft}>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'chart' && realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage(\"chart\", true) }}>\n                    <GrLineChart />\n                    <span className={styles.tooltipText}>Realtime Chart</span>\n                </button>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'table' && realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage(\"table\", true) }}>\n                    <TbTable />\n                    <span className={styles.tooltipText}>Realtime Table</span>\n                </button>\n            </div>\n            <div className={styles.footerMid}>\n                {viewMode === 'chart' && realtime && (\n                    <div className={styles.switchGroup}>\n                        <label htmlFor=\"auto\">Auto</label>\n                        <label className={styles.switch}>\n                            <input type=\"checkbox\" id=\"auto\" checked={isAuto} onChange={handleToggle} />\n                            <span className={styles.slider}></span>\n                        </label>\n                    </div>\n                )}\n            </div>\n            <div className={styles.footerRight}>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'chart' && !realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage(\"chart\", false) }}>\n                    <FaChartLine />\n                    <span className={styles.tooltipText}>Chart</span>\n                </button>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'table' && !realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage(\"table\", false) }}>\n                    <FaTable />\n                    <span className={styles.tooltipText}>Table</span>\n                </button>\n            </div>\n        </div>\n    </>\n}\n\nexport default VibrationPage\n","import { useEffect, useMemo, useState } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\n\nfunction MultipleObserver(props: { content: React.JSX.Element; onVisible: () => any, }) {\n    const { onVisible, content } = props;\n\n    const { ref } = useInView({\n        threshold: 0.1, triggerOnce: false, initialInView: false,\n        onChange: (inView, entry) => { if (inView) { onVisible() } }\n    });\n\n    return <tr ref={ref}>\n        {content}\n    </tr>\n}\n\ninterface TableObservedProps {\n    tableData: any[],\n    rowFunction: (index: number, row: any) => JSX.Element,\n    onRowClick?: (row: any) => void\n    rowsCount: number,\n    rowsIncrement: number,\n}\n\nexport default function TableObserved(props: TableObservedProps) {\n    const { tableData, rowFunction, onRowClick, rowsCount, rowsIncrement } = props;\n\n    const ROWS_MAX_COUNT = rowsCount\n    const ROWS_INCREMENT = rowsIncrement\n\n    const [limit, setLimit] = useState(ROWS_MAX_COUNT)\n\n    const data = useMemo((() => {\n        const elements = []\n        for (let index = 0; index < tableData.length; index++) {\n            if (index < limit - ROWS_MAX_COUNT || index > limit) {\n                continue\n            }\n\n            const row = tableData[index]\n            elements.push(<>\n                {index == limit\n                    ? <MultipleObserver\n                        content={<></>}\n                        onVisible={function () {\n                            setLimit((prev) => prev + ROWS_INCREMENT)\n                            // non react way but fuck it\n                            setTimeout(() => { document.getElementById(`rows_${index}`)?.scrollIntoView() })\n                        }} />\n                    : <></>\n                }\n                {index == limit - ROWS_MAX_COUNT && index != 0\n                    ? <MultipleObserver\n                        content={<></>}\n                        onVisible={function () {\n                            setLimit((prev) => {\n                                return prev - ROWS_INCREMENT < ROWS_MAX_COUNT ? ROWS_MAX_COUNT : prev - ROWS_INCREMENT\n                            })\n                            // non react way but fuck it\n                            setTimeout(() => { document.getElementById(`rows_${index}`)?.scrollIntoView() })\n                        }} />\n                    : <></>\n                }\n                <tr id={`rows_${index}`} style={{ whiteSpace: \"nowrap\" }} onClick={() => { if (onRowClick != null) { onRowClick(row) } }}>\n                    {rowFunction(index, row)}\n                </tr>\n                {index == tableData.length - 1\n                    ? <tr><td colSpan={1000}>END OF DATA</td></tr>\n                    : <></>}\n            </>)\n        }\n        return elements\n    }), [limit, tableData])\n\n    useEffect(() => {\n        setLimit(ROWS_MAX_COUNT)\n    }, [tableData])\n\n    return data.map((val) => { return val })\n}"],"names":["export","export_name","column","values","workbook","ExcelJS","worksheet","addWorksheet","numberToLetter","number","map","key","index","getColumn","width","getCell","value","String","toUpperCase","style","fill","type","pattern","fgColor","argb","font","bold","alignment","vertical","horizontal","border","top","color","left","right","bottom","val","row","push","addRow","eachCell","cell","xlsx","writeBuffer","then","buffer","blob","Blob","link","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","import","data","load","book","eachSheet","sheet","eachRow","length","result","i","obj","j","_sheet$i$j","Date","toLowerCase","format","DashboardService","GetDashboardLevel1","start_date","end_date","resp","FetchUtils","fetchAuth","BASE_URL","encodeURIComponent","status","Error","Array","isArray","machine_ool_pressure","machine_ool_vibration","business_unit_id","business_unit","business_unit_warn","business_unit_alarm","ool_pressure","ool_vibration","ool_temperature","sensor_vibration_connected","sensor_vibration_total","sensor_pressure_connected","sensor_pressure_total","GetDashboardLevel2","link_up_id","link_up","link_up_warn","link_up_alarm","GetDashboardLevel3","machine_id","machine","machine_warn","machine_alarm","machine_type","GetDashboardLevel4Pressure","message","rawData","pressure","pressure_max_alarm","pressure_max_warn","pressure_min_alarm","pressure_min_warn","timestamp","GetDashboardLevel4Vibration","x","x_base","x_warn","x_alarm","z","z_base","z_warn","z_alarm","x_acc","x_acc_base","x_acc_warn","x_acc_alarm","z_acc","z_acc_base","z_acc_warn","z_acc_alarm","temp","temp_warn","temp_alarm","DashboardRealtimeService","mergedArray","concat","from","Set","FilterUtils","FilterTable","tableDataFilter","keys","Object","indexKey","undefined","toString","includes","SortingTable","a","b","sortChoosed","localeCompare","FastIsEmpty","arr","_","ChartJS","register","LineElement","PointElement","LinearScale","Title","CategoryScale","Tooltip","Legend","defaults","maintainAspectRatio","responsive","VIBRATION_TYPES","LABEL_MAP","_ref","realtime","setRealtime","refresh","setHandleGenerateExcel","context","useContext","AppContext","contextShowAlertFunc","contextAccessToken","contextShowLoadingFunc","machineId","stateShowLoading","useParams","CHART_COLORS","activeHourIndex","setActiveHourIndex","useState","isAuto","setIsAuto","chartSplit","setChartSplit","viewMode","setViewMode","vibrationTypeChart","setVibrationTypeChart","sortedCols","setSortedCols","sortedColsType","setSortedColsType","tableData","setTableData","tableDataCache","setTableDataCache","mappedDataRef","useRef","setTableDataFilter","chartData","setChartData","labels","datasets","chartOptions","setChartOptions","firstData","vibrationSocket","reconnectVibration","tableDataRealtime","setTableDataRealtime","tableDataRealtimeCache","setTableDataRealtimeCache","tableDataRealtimeFilter","setTableDataRealtimeFilter","chartDataRealtime","setChartDataRealtime","chartOptionsRealtime","setChartOptionsRealtime","firstDataRealtime","columns","label","splitDataToMap","toReversed","forEach","item","date","rounded","setMinutes","Math","floor","getMinutes","setSeconds","setMilliseconds","prepareChartData","mapData","vibrationType","_map$key","flooredMinutes","groupData","newLabels","msg","formatDate","newData","_groupData$","_groupData$2","_groupData$3","_groupData$4","current","alarm","warn","dataMin","min","dataMax","max","range","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","borderWidth","pointRadius","customMin","customMax","statusArea","id","beforeDatasetsDraw","chart","vibrationData","ctx","chartArea","scales","y","save","startNormalArea","endNormalArea","startNormalAreaPixel","getPixelForValue","endNormalAreaPixel","fillStyle","fillRect","abs","startMinWarn","endMinWarn","startMinWarnPixel","endMinWarnPixel","startMinAlarm","endMinAlarm","startMinAlarmPixel","endMinAlarmPixel","restore","updateChart","animation","duration","easing","plugins","legend","position","size","weight","family","usePointStyle","pointStyle","tooltip","backgroundColor","titleColor","bodyColor","padding","cornerRadius","titleFont","bodyFont","grid","ticks","maxRotation","minRotation","layout","elements","line","borderJoinStyle","point","filterTable","columnnName","_tableDataFilter$colu","_jsx","children","fontSize","marginTop","placeholder","onChange","event","prev","target","vibrationDataRows","styleX","getCollorRows","styleXAcc","styleZ","styleZAcc","styleTemp","_jsxs","_Fragment","fontWeight","valueColor","valueWeight","useEffect","handleFilterAndSort","table_filtered","filter","filterUtils","sort","async","withLoading","Number","newDate","error","AlertEntity","level","generateData","statusAreaRealtime","updateChartRealtime","filterTableRealtime","_tableDataRealtimeFil","connectVibration","Promise","resolve","reject","WebSocket","onmessage","response","JSON","parse","console","log","onerror","err","_vibrationSocket","close","onclose","onopen","_vibrationSocket2","machineIdPayload","send","stringify","readyState","CLOSED","handleFilterAndSortRealtime","titleChart","useMemo","handleChangeActiveHourIndex","amount","unit","setHours","getHours","handleSetPage","page","generateExcelRealtime","_item$x_warn","_item$x_alarm","_item$z_warn","_item$z_alarm","_item$x_acc_warn","_item$x_acc_alarm","_item$z_acc_warn","_item$z_acc_alarm","_item$temp_warn","_item$temp_alarm","ExcelUtils","generateExcel","_item$x_warn2","_item$x_alarm2","_item$z_warn2","_item$z_alarm2","_item$x_acc_warn2","_item$x_acc_alarm2","_item$z_acc_warn2","_item$z_acc_alarm2","_item$temp_warn2","_item$temp_alarm2","className","styles","cardBodyHeader","headerChart","chartButtons","onClick","activeBtn","justifyContent","bodyChart","buttonChart1","borderRadius","FaAngleLeft","wrapperChart","Line","options","buttonChart2","FaAngleRight","flex","overflowY","col","columnName","display","flexDirection","gap","whiteSpace","cursor","alignItems","justifyItems","FaSortUp","margin","height","FaSortDown","headerTableRealtime","colSpan","TableObserved","rowFunction","rowsCount","rowsIncrement","headerTable","cardBodyFooter","footerLeft","buttonFooter","active","GrLineChart","tooltipText","TbTable","footerMid","switchGroup","htmlFor","switch","checked","handleToggle","slider","footerRight","FaChartLine","FaTable","MultipleObserver","props","onVisible","content","ref","useInView","threshold","triggerOnce","initialInView","inView","entry","onRowClick","ROWS_MAX_COUNT","ROWS_INCREMENT","limit","setLimit","setTimeout","_document$getElementB","getElementById","scrollIntoView","_document$getElementB2"],"sourceRoot":""}