{"version":3,"file":"static/js/273.564bb9e5.chunk.js","mappings":"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","sources":["utils/excel.ts","utils/filter-utils.ts","components/Observer/observer.tsx","services/quality_factor.ts","features/Dashboard/DashboardLevel4/DashboardLevel4Quality.tsx"],"sourcesContent":["import { format } from \"date-fns\"\nimport ExcelJS from \"exceljs\"\n\n/**\n * @typedef {Object} ExcelUtils\n * @property {Method} export - Export to excel from column (Array of String) and values (Object)\n * @property {Method} import - Import from excel returning Array of Sheet, with Sheet being Array of Object\n */\nclass ExcelUtils {\n    static export(export_name: string, column: string[], values: { [key: string]: string }[]) {\n        // Create a new workbook\n        const workbook = new ExcelJS.Workbook()\n        const worksheet = workbook.addWorksheet(export_name)\n\n        const numberToLetter = (number: number) => {\n            const letters = [\n                \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n                \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\",\n                \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\",\n                \"Y\", \"Z\",\n                \"AA\", \"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"AG\", \"AH\",\n                \"AI\", \"AJ\", \"AK\", \"AL\", \"AM\", \"AN\", \"AO\", \"AP\",\n                \"AQ\", \"AR\", \"AS\", \"AT\", \"AU\", \"AV\", \"AW\", \"AX\",\n                \"AY\", \"AZ\"\n            ]\n\n            if (number >= 0 && number <= 51) {\n                return letters[number]\n            }\n\n            return \"Invalid number\"\n        }\n\n        const startRow = 2\n        column.map((key, index) => {\n            worksheet.getColumn(`${numberToLetter(index)}`).width = 20\n            worksheet.getCell(`${numberToLetter(index)}${startRow - 1}`).value = String(key.toUpperCase())\n            worksheet.getCell(`${numberToLetter(index)}${startRow - 1}`).style = {\n                fill: {\n                    type: \"pattern\",\n                    pattern: \"solid\",\n                    fgColor: { argb: \"c8c8c8\" }, // Yellow background\n                },\n                font: {\n                    bold: true, // Bold font style\n                },\n                alignment: {\n                    vertical: \"middle\", // Align vertically at the middle\n                    horizontal: \"center\",\n                },\n                border: {\n                    top: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    left: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    right: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    bottom: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                },\n            }\n        })\n\n        // Add table data\n        values.map((val, index) => {\n            const row: string[] = []\n            column.map((key) => {\n                if (val[key] != null) {\n                    row.push(val[key])\n                } else {\n                    row.push('')\n                }\n            })\n            const dataRow = worksheet.addRow(row)\n            dataRow.eachCell((cell) => {\n                cell.style = {\n                    alignment: {\n                        vertical: \"middle\",\n                        horizontal: \"center\",\n                    },\n                    border: {\n                        top: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        left: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        right: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        bottom: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                    },\n                }\n            })\n        })\n\n        // Generate the Excel file\n        workbook.xlsx.writeBuffer().then((buffer) => {\n            // Create a Blob from the buffer\n            const blob = new Blob([buffer], {\n                type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            })\n\n            // Create a download link\n            const link = document.createElement(\"a\")\n            link.href = window.URL.createObjectURL(blob)\n            link.download = `${export_name}.xlsx`\n\n            // Simulate a click on the link to trigger the download\n            link.click()\n\n            // Clean up the URL object\n            window.URL.revokeObjectURL(link.href)\n        })\n    }\n\n    static async import(data: ArrayBuffer): Promise<{ [key: string]: string }[]> {\n        // Create a new workbook\n        const workbook = new ExcelJS.Workbook()\n        await workbook.xlsx.load(data)\n        const book: { [key: string | number]: any }[][] = []\n        workbook.eachSheet((worksheet) => {\n            const sheet: { [key: string | number]: any }[] = []\n            worksheet.eachRow((row) => {\n                sheet.push(row.values)\n            })\n            book.push(sheet)\n        })\n        // we only read sheet number 1\n        if (book.length > 0) {\n            const sheet = book[0]\n            const result: { [key: string]: string }[] = []\n            for (let i = 1; i < sheet.length; i++) {\n                const obj: { [key: string]: string } = {}\n                for (let j = 0; j < sheet[i].length; j++) {\n                    if (sheet[0][j] == null || typeof (sheet[0][j]) != 'string') continue\n                    if (sheet[i][j] instanceof Date) {\n                        obj[sheet[0][j].toLowerCase()] = format(sheet[i][j], \"yyyy-MM-dd HH:mm:ss\")\n                    } else {\n                        obj[sheet[0][j].toLowerCase()] = typeof (sheet[i][j]) == 'object' ? sheet[i][j].result : sheet[i][j] ?? ''\n                    }\n                }\n                result.push(obj)\n            }\n            return result\n        } else {\n            return []\n        }\n    }\n}\n\nexport default ExcelUtils","class FilterUtils {\n    static FilterTable = (row: any, tableDataFilter: { [key: string]: string }) => {\n        let keys = Object.keys(row)\n        for (let indexKey = 0; indexKey < keys.length; indexKey++) {\n            const key = keys[indexKey]\n            if (tableDataFilter[key]) {\n                if (row != undefined && row[key] != null) {\n                    if (tableDataFilter[key] !== \"\") {\n                        if (\n                            row[key]\n                                .toString()\n                                .toLowerCase()\n                                .includes(tableDataFilter[key].toString().toLowerCase()) == false\n                        ) {\n                            return false\n                        }\n                    }\n                } else {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    static SortingTable = (a: any, b: any, sortChoosed: string) => {\n        if (sortChoosed != null && sortChoosed != undefined) {\n            if (a[sortChoosed] !== undefined && b[sortChoosed] !== undefined) {\n                if (typeof a[sortChoosed] === 'string' && typeof b[sortChoosed] === 'string') {\n                    return a[sortChoosed].localeCompare(b[sortChoosed])\n                } else if (typeof a[sortChoosed] === 'number' && typeof b[sortChoosed] === 'number') {\n                    return a[sortChoosed] - b[sortChoosed]\n                }\n            }\n        }\n        return 0\n    }\n\n    static FastIsEmpty = (arr: any[]) => {\n        for (const _ in arr) {\n            return false\n        }\n        return true\n    }\n}\n\nexport default FilterUtils","import { useEffect, useMemo, useState } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\n\nfunction MultipleObserver(props: { content: React.JSX.Element; onVisible: () => any, }) {\n    const { onVisible, content } = props;\n\n    const { ref } = useInView({\n        threshold: 0.1, triggerOnce: false, initialInView: false,\n        onChange: (inView, entry) => { if (inView) { onVisible() } }\n    });\n\n    return <tr ref={ref}>\n        {content}\n    </tr>\n}\n\ninterface TableObservedProps {\n    tableData: any[],\n    rowFunction: (index: number, row: any) => JSX.Element,\n    onRowClick?: (row: any) => void\n    rowsCount: number,\n    rowsIncrement: number,\n}\n\nexport default function TableObserved(props: TableObservedProps) {\n    const { tableData, rowFunction, onRowClick, rowsCount, rowsIncrement } = props;\n\n    const ROWS_MAX_COUNT = rowsCount\n    const ROWS_INCREMENT = rowsIncrement\n\n    const [limit, setLimit] = useState(ROWS_MAX_COUNT)\n\n    const data = useMemo((() => {\n        const elements = []\n        for (let index = 0; index < tableData.length; index++) {\n            if (index < limit - ROWS_MAX_COUNT || index > limit) {\n                continue\n            }\n\n            const row = tableData[index]\n            elements.push(<>\n                {index == limit\n                    ? <MultipleObserver\n                        content={<></>}\n                        onVisible={function () {\n                            setLimit((prev) => prev + ROWS_INCREMENT)\n                            // non react way but fuck it\n                            setTimeout(() => { document.getElementById(`rows_${index}`)?.scrollIntoView() })\n                        }} />\n                    : <></>\n                }\n                {index == limit - ROWS_MAX_COUNT && index != 0\n                    ? <MultipleObserver\n                        content={<></>}\n                        onVisible={function () {\n                            setLimit((prev) => {\n                                return prev - ROWS_INCREMENT < ROWS_MAX_COUNT ? ROWS_MAX_COUNT : prev - ROWS_INCREMENT\n                            })\n                            // non react way but fuck it\n                            setTimeout(() => { document.getElementById(`rows_${index}`)?.scrollIntoView() })\n                        }} />\n                    : <></>\n                }\n                <tr id={`rows_${index}`} style={{ whiteSpace: \"nowrap\" }} onClick={() => { if (onRowClick != null) { onRowClick(row) } }}>\n                    {rowFunction(index, row)}\n                </tr>\n                {index == tableData.length - 1\n                    ? <tr><td colSpan={1000}>END OF DATA</td></tr>\n                    : <></>}\n            </>)\n        }\n        return elements\n    }), [limit, tableData])\n\n    useEffect(() => {\n        setLimit(ROWS_MAX_COUNT)\n    }, [tableData])\n\n    return data.map((val) => { return val })\n}","import { BASE_URL } from \"../constants\"\nimport { BusinessUnitConfigQualityFactor, QualityFactorData, QualityFactorEntity, QualityFactorInsertEntity, QualityFactorUpdateEntity, DashboardQualityFactorLevel1, DashboardQualityFactorLevel2, DashboardQualityFactorLevel3, FormBusinessUnitQualityFactor, FormLinkupQualityFactor, LinkUpConfigQualityFactor, } from \"../entities/QualityFactorEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\nclass QualityFactorService {\n    static async GetAllQualityFactor(link_up_id?: string): Promise<QualityFactorEntity[]> {\n\n        let uri = `${BASE_URL}/api/extension/quality_factor/v1`\n        if (link_up_id != null) {\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: QualityFactorEntity[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].quality_factor_id != \"number\") { throw new Error(\"invalid quality_factor_id value\") }\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid parameter_name value\") }\n            if (typeof data[i].quality_factor_tipe != \"string\") { throw new Error(\"invalid quality_factor_tipe value\") }\n            if (data[i].quality_factor_warn != undefined && typeof data[i].quality_factor_warn != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (data[i].quality_factor_alarm != undefined && typeof data[i].quality_factor_alarm != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n            if (data[i].quality_factor_bottom_warn != undefined && typeof data[i].quality_factor_bottom_warn != \"number\") { throw new Error(\"invalid quality_factor_bottom_warn value\") }\n            if (data[i].quality_factor_bottom_alarm != undefined && typeof data[i].quality_factor_bottom_alarm != \"number\") { throw new Error(\"invalid quality_factor_bottom_alarm value\") }\n            if (typeof data[i].quality_factor_display_type != \"string\") { throw new Error(\"invalid quality_factor_display_type value\") }\n            if (typeof data[i].quality_factor_unit != \"string\") { throw new Error(\"invalid quality_factor_unit value\") }\n        }\n\n        return data\n    }\n\n    static async AddQualityFactor(data: QualityFactorInsertEntity): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1`,\n            {\n                method: 'POST',\n                body: JSON.stringify({ ...data }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async UpdateQualityFactor(quality_factor_id: number, fields: QualityFactorUpdateEntity): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1`,\n            {\n                method: 'PATCH',\n                body: JSON.stringify({ quality_factor_id, fields }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async DeleteQualityFactor(quality_factor_id: number): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1`,\n            {\n                method: 'DELETE',\n                body: JSON.stringify({ quality_factor_id }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async GetLinkUpConfig(link_up_id?: number): Promise<LinkUpConfigQualityFactor[]> {\n        let uri = `${BASE_URL}/api/extension/quality_factor/v1/linkup`\n        if (link_up_id != null) {\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid link up config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof (row.quality_factor_warn ?? 0) != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (typeof (row.quality_factor_alarm ?? 0) != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertLinkupConfig(link_up_id: number, fields: FormLinkupQualityFactor): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1/linkup`, {\n            method: 'PATCH',\n            body: JSON.stringify({ link_up_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async GetBusinessUnitConfig(business_unit_id?: number): Promise<BusinessUnitConfigQualityFactor[]> {\n        let uri = `${BASE_URL}/api/extension/quality_factor/v1/business`\n        if (business_unit_id != null) {\n            uri += `?business_unit_id=${business_unit_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid link up config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof (row.quality_factor_warn ?? 0) != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (typeof (row.quality_factor_alarm ?? 0) != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertBusinessUnitConfig(business_unit_id: number, fields: FormBusinessUnitQualityFactor): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1/business`, {\n            method: 'PATCH',\n            body: JSON.stringify({ business_unit_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n}\n\nclass DashboardQualityFactorService {\n    static async DashboardLevel1(start_date: string, end_date: string): Promise<DashboardQualityFactorLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/quality_factor/v1/l1?start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].quality_factor_id_ool)) { throw new Error(\"invalid quality_factor_id_ool value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n            if (data[i].quality_factor_warn != undefined && typeof data[i].quality_factor_warn != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (data[i].quality_factor_alarm != undefined && typeof data[i].quality_factor_alarm != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2(start_date: string, end_date: string, business_unit_id: number): Promise<DashboardQualityFactorLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/quality_factor/v1/l2?business_unit_id=${business_unit_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].quality_factor_id_ool)) { throw new Error(\"invalid quality_factor_id_ool value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n            if (data[i].quality_factor_warn != undefined && typeof data[i].quality_factor_warn != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (data[i].quality_factor_alarm != undefined && typeof data[i].quality_factor_alarm != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3(start_date: string, end_date: string, link_up_id: number): Promise<DashboardQualityFactorLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/quality_factor/v1/l3?link_up_id=${link_up_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].quality_factor_id != \"number\") { throw new Error(\"invalid dashboard quality_factor_id value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid dashboard parameter_name value\") }\n            if (typeof data[i].quality_factor_tipe != \"string\") { throw new Error(\"invalid dashboard quality_factor_tipe value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n\n            if (!data[i].last_quality_factor_data) { throw new Error(\"missing last_quality_factor_data\") }\n            if (typeof data[i].last_quality_factor_data.quality_factor_id !== \"number\") { throw new Error(\"invalid last_quality_factor_data.quality_factor_id\") }\n            if (typeof data[i].last_quality_factor_data.value !== \"number\") { throw new Error(\"invalid last_quality_factor_data.value\") }\n            if (data[i].last_quality_factor_data.warning_limit != undefined && typeof data[i].last_quality_factor_data.warning_limit !== \"number\") { throw new Error(\"invalid last_quality_factor_data.warning_limit\") }\n            if (data[i].last_quality_factor_data.alarm_limit != undefined && typeof data[i].last_quality_factor_data.alarm_limit !== \"number\") { throw new Error(\"invalid last_quality_factor_data.alarm_limit\") }\n            if (data[i].last_quality_factor_data.warning_limit_bottom != undefined && typeof data[i].last_quality_factor_data.warning_limit_bottom !== \"number\") { throw new Error(\"invalid last_quality_factor_data.warning_limit_bottom\") }\n            if (data[i].last_quality_factor_data.alarm_limit_bottom != undefined && typeof data[i].last_quality_factor_data.alarm_limit_bottom !== \"number\") { throw new Error(\"invalid last_quality_factor_data.alarm_limit_bottom\") }\n            if (typeof data[i].last_quality_factor_data.created_at !== \"string\") { throw new Error(\"invalid last_quality_factor_data.created_at\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4(start_date: string, end_date: string, quality_factor_id: number): Promise<QualityFactorData[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/quality_factor/v1/data?quality_factor_id=${quality_factor_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: QualityFactorData[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].value != \"number\") { throw new Error(\"invalid value value\") }\n            if (data[i].warning_limit != undefined && typeof data[i].warning_limit != \"number\") { throw new Error(\"invalid warning_limit value\") }\n            if (data[i].alarm_limit != undefined && typeof data[i].alarm_limit != \"number\") { throw new Error(\"invalid alarm_limit value\") }\n            if (data[i].warning_limit_bottom != undefined && typeof data[i].warning_limit_bottom != \"number\") { throw new Error(\"invalid warning_limit_bottom value\") }\n            if (data[i].alarm_limit_bottom != undefined && typeof data[i].alarm_limit_bottom != \"number\") { throw new Error(\"invalid alarm_limit_bottom value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel1Realtime(): Promise<DashboardQualityFactorLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1/l1/realtime`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].quality_factor_id_ool)) { throw new Error(\"invalid quality_factor_id_ool value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n            if (data[i].quality_factor_warn != undefined && typeof data[i].quality_factor_warn != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (data[i].quality_factor_alarm != undefined && typeof data[i].quality_factor_alarm != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2Realtime(business_unit_id: number): Promise<DashboardQualityFactorLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1/l2/realtime?business_unit_id=${business_unit_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].quality_factor_id_ool)) { throw new Error(\"invalid quality_factor_id_ool value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n            if (data[i].quality_factor_warn != undefined && typeof data[i].quality_factor_warn != \"number\") { throw new Error(\"invalid quality_factor_warn value\") }\n            if (data[i].quality_factor_alarm != undefined && typeof data[i].quality_factor_alarm != \"number\") { throw new Error(\"invalid quality_factor_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3Realtime(link_up_id: number): Promise<DashboardQualityFactorLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/quality_factor/v1/l3/realtime?link_up_id=${link_up_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardQualityFactorLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].quality_factor_id != \"number\") { throw new Error(\"invalid dashboard quality_factor_id value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid dashboard parameter_name value\") }\n            if (typeof data[i].quality_factor_tipe != \"string\") { throw new Error(\"invalid dashboard quality_factor_tipe value\") }\n            if (typeof data[i].quality_factor_green != \"number\") { throw new Error(\"invalid quality_factor_green value\") }\n            if (typeof data[i].quality_factor_yellow != \"number\") { throw new Error(\"invalid quality_factor_yellow value\") }\n            if (typeof data[i].quality_factor_red != \"number\") { throw new Error(\"invalid quality_factor_red value\") }\n\n            if (!data[i].last_quality_factor_data) { throw new Error(\"missing last_quality_factor_data\") }\n            if (typeof data[i].last_quality_factor_data.quality_factor_id !== \"number\") { throw new Error(\"invalid last_quality_factor_data.quality_factor_id\") }\n            if (typeof data[i].last_quality_factor_data.value !== \"number\") { throw new Error(\"invalid last_quality_factor_data.value\") }\n            if (data[i].last_quality_factor_data.warning_limit != undefined && typeof data[i].last_quality_factor_data.warning_limit !== \"number\") { throw new Error(\"invalid last_quality_factor_data.warning_limit\") }\n            if (data[i].last_quality_factor_data.alarm_limit != undefined && typeof data[i].last_quality_factor_data.alarm_limit !== \"number\") { throw new Error(\"invalid last_quality_factor_data.alarm_limit\") }\n            if (data[i].last_quality_factor_data.warning_limit_bottom != undefined && typeof data[i].last_quality_factor_data.warning_limit_bottom !== \"number\") { throw new Error(\"invalid last_quality_factor_data.warning_limit_bottom\") }\n            if (data[i].last_quality_factor_data.alarm_limit_bottom != undefined && typeof data[i].last_quality_factor_data.alarm_limit_bottom !== \"number\") { throw new Error(\"invalid last_quality_factor_data.alarm_limit_bottom\") }\n            if (typeof data[i].last_quality_factor_data.created_at !== \"string\") { throw new Error(\"invalid last_quality_factor_data.created_at\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4Realtime(quality_factor_id: number): Promise<QualityFactorData[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/quality_factor/v1/data/realtime?quality_factor_id=${quality_factor_id}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: QualityFactorData[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].value != \"number\") { throw new Error(\"invalid value value\") }\n            if (data[i].warning_limit != undefined && typeof data[i].warning_limit != \"number\") { throw new Error(\"invalid warning_limit value\") }\n            if (data[i].alarm_limit != undefined && typeof data[i].alarm_limit != \"number\") { throw new Error(\"invalid alarm_limit value\") }\n            if (data[i].warning_limit_bottom != undefined && typeof data[i].warning_limit_bottom != \"number\") { throw new Error(\"invalid warning_limit_bottom value\") }\n            if (data[i].alarm_limit_bottom != undefined && typeof data[i].alarm_limit_bottom != \"number\") { throw new Error(\"invalid alarm_limit_bottom value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n}\n\nexport { QualityFactorService, DashboardQualityFactorService }","import { useContext, useEffect, useMemo, useRef, useState } from \"react\"\nimport styles from './DashboardLevel4.module.css'\nimport { format, formatDate } from \"date-fns\"\nimport AppContext from \"../../../context\"\nimport filterUtils from \"../../../utils/filter-utils\"\nimport { AlertEntity } from \"../../../layouts/Alert/AlertEntity\"\nimport { FaAngleLeft, FaAngleRight, FaChartLine, FaSortDown, FaSortUp, FaTable } from \"react-icons/fa\"\nimport { useParams } from \"react-router-dom\"\nimport TableObserved from \"../../../components/Observer/observer\"\nimport { GrLineChart } from \"react-icons/gr\"\nimport { TbTable } from \"react-icons/tb\"\n\n// ========================================= CHART IMPORT =========================================  //\nimport {\n    Chart as ChartJS,\n    LineElement,\n    PointElement,\n    LinearScale,\n    Title,\n    CategoryScale,\n    Tooltip,\n    Legend,\n    ChartData,\n    ChartOptions,\n    defaults\n} from 'chart.js'\n\nimport { Plugin } from 'chart.js'\nimport { Line } from 'react-chartjs-2'\nimport { QualityFactorData } from \"../../../entities/QualityFactorEntity\"\nimport { DashboardQualityFactorService } from \"../../../services/quality_factor\"\nimport ExcelUtils from \"../../../utils/excel\"\n\nChartJS.register(\n    LineElement,\n    PointElement,\n    LinearScale,\n    Title,\n    CategoryScale,\n    Tooltip,\n    Legend\n)\n\ndefaults.maintainAspectRatio = false\ndefaults.responsive = true\n// ========================================= CHART IMPORT =========================================  //\n\n\ninterface QualityFactorPageProps {\n    realtime: boolean\n    setRealtime: (value: boolean) => void\n    refresh: number\n    start_date: Date\n    end_date: Date\n    setHandleGenerateExcel: (fn: (() => void) | null) => void\n}\n\n\nconst QualityFactorPage: React.FC<QualityFactorPageProps> = ({ realtime, setRealtime, refresh, start_date, end_date, setHandleGenerateExcel }) => {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n\n    const { machineId } = useParams()\n\n    const CHART_COLORS = {\n        chartLine: '#fb8500',\n        graphicGood: 'rgba(41, 191, 18, 0.21)',\n        graphicWarn: 'rgba(244, 188, 20, 0.28)',\n        graphicAlarm: 'rgba(213, 14, 81, 0.2)',\n    }\n\n    const [activeHourIndex, setActiveHourIndex] = useState(new Date())\n    const [isAuto, setIsAuto] = useState(true)\n    const [chartSplit, setChartSplit] = useState<\"hour\" | \"minutes_10\" | \"all\">(\"minutes_10\")\n    const [viewMode, setViewMode] = useState<'chart' | 'table' | 'table-ool'>('chart')\n    const [sortedCols, setSortedCols] = useState<keyof QualityFactorData | null>(null)\n    const [sortedColsType, setSortedColsType] = useState<\"ascending\" | \"descending\">(\"ascending\")\n\n\n    // ========================================= STATE  QUALITY BY DATE =========================================  //\n    const [tableData, setTableData] = useState<QualityFactorData[]>([])\n    const [tableDataCache, setTableDataCache] = useState<QualityFactorData[]>([])\n    const mappedDataRef = useRef<{ [key: string]: QualityFactorData[] }>({})\n\n    const [tableDataFilter, setTableDataFilter] = useState<{ [key: string]: string }>({})\n\n    const [chartData, setChartData] = useState<ChartData<'line'>>({ labels: [], datasets: [] })\n    const [chartOptions, setChartOptions] = useState<ChartOptions<'line'>>({})\n\n    const firstData = useRef<QualityFactorData | null>(null)\n    // ========================================= STATE  QUALITY BY DATE =========================================  //\n\n\n    // ========================================= STATE  QUALITY REALTIME =========================================  //\n    const [tableDataRealtime, setTableDataRealtime] = useState<QualityFactorData[]>([])\n    const [tableDataRealtimeCache, setTableDataRealtimeCache] = useState<QualityFactorData[]>([])\n\n    const [tableDataRealtimeFilter, setTableDataRealtimeFilter] = useState<{ [key: string]: string }>({})\n\n    const [chartDataRealtime, setChartDataRealtime] = useState<ChartData<'line'>>({ labels: [], datasets: [], })\n    const [chartOptionsRealtime, setChartOptionsRealtime] = useState<ChartOptions<'line'>>({})\n\n    const firstDataRealtime = useRef<QualityFactorData | null>(null)\n    // ========================================= STATE  QUALITY REALTIME =========================================  //\n\n\n    function splitDataToMap(data: QualityFactorData[]) {\n        const map: { [key: string]: QualityFactorData[] } = {}\n\n        if (chartSplit == \"all\") {\n            return { \"all\": [...data].toReversed() }\n        }\n\n        data.toReversed().forEach(item => {\n            const date = new Date(item.created_at)\n            const rounded = new Date(date)\n            rounded.setMinutes(Math.floor(date.getMinutes() / 10) * 10)\n            rounded.setSeconds(0)\n            rounded.setMilliseconds(0)\n\n            let key = format(rounded, \"yyyy-MM-dd HH:00:00\")\n            switch (chartSplit) {\n                case \"hour\": {\n                    key = format(rounded, \"yyyy-MM-dd HH:00:00\")\n                    break\n                }\n                case 'minutes_10': {\n                    key = format(rounded, \"yyyy-MM-dd HH:mm:00\")\n                    break\n                }\n                default:\n                    break;\n            }\n\n            if (map[key] == undefined) {\n                map[key] = []\n            } else {\n                map[key].push(item)\n            }\n        })\n\n        return map\n    }\n\n\n    // ========================================= FUNCTIONS  QUALITY BY DATE =========================================  //\n    const statusArea: Plugin<'line'> = {\n        id: 'statusArea',\n        beforeDatasetsDraw(chart) {\n            const quality_factorData = firstData.current\n\n            const { ctx, chartArea, scales } = chart\n            if (\n                !chartArea ||\n                !scales.x ||\n                !scales.y ||\n                quality_factorData?.warning_limit == null ||\n                quality_factorData?.alarm_limit == null ||\n                quality_factorData?.warning_limit_bottom == null ||\n                quality_factorData?.alarm_limit_bottom == null\n            ) return\n\n            ctx.save()\n\n            // --- Area Alarm Bottom (Merah) ---\n            const startMinAlarmBottom = scales.y.min\n            const endMinAlarmBottom = quality_factorData.alarm_limit_bottom ?? 0\n\n            const startMinAlarmPixelBottom = scales.y.getPixelForValue(startMinAlarmBottom)\n            const endMinAlarmPixelBottom = scales.y.getPixelForValue(endMinAlarmBottom)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixelBottom, endMinAlarmPixelBottom),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixelBottom - endMinAlarmPixelBottom)\n            )\n\n            // --- Area Warn Bottom (Kuning) ---\n            // const startMinWarnBottom = quality_factorData.alarm_limit_bottom ?? 0\n            // const endMinWarnBottom = quality_factorData.warning_limit_bottom ?? 0\n\n            // const startMinWarnPixelBottom = scales.y.getPixelForValue(startMinWarnBottom)\n            // const endMinWarnPixelBottom = scales.y.getPixelForValue(endMinWarnBottom)\n\n            // ctx.fillStyle = CHART_COLORS.graphicWarn\n            // ctx.fillRect(\n            //     chartArea.left,\n            //     Math.min(startMinWarnPixelBottom, endMinWarnPixelBottom),\n            //     chartArea.right - chartArea.left,\n            //     Math.abs(startMinWarnPixelBottom - endMinWarnPixelBottom)\n            // )\n\n            // --- Area Normal (Green) ---\n            const startNormalArea = quality_factorData.alarm_limit_bottom ?? 0\n            const endNormalArea = quality_factorData.alarm_limit ?? 0\n\n            const startNormalAreaPixel = scales.y.getPixelForValue(startNormalArea)\n            const endNormalAreaPixel = scales.y.getPixelForValue(endNormalArea)\n\n            ctx.fillStyle = CHART_COLORS.graphicGood\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startNormalAreaPixel, endNormalAreaPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startNormalAreaPixel - endNormalAreaPixel)\n            )\n\n            // --- Area Warn (Kuning) ---\n            // const startMinWarn = quality_factorData.warning_limit ?? 0\n            // const endMinWarn = quality_factorData.alarm_limit ?? 0\n\n            // const startMinWarnPixel = scales.y.getPixelForValue(startMinWarn)\n            // const endMinWarnPixel = scales.y.getPixelForValue(endMinWarn)\n\n            // ctx.fillStyle = CHART_COLORS.graphicWarn\n            // ctx.fillRect(\n            //     chartArea.left,\n            //     Math.min(startMinWarnPixel, endMinWarnPixel),\n            //     chartArea.right - chartArea.left,\n            //     Math.abs(startMinWarnPixel - endMinWarnPixel)\n            // )\n\n            // --- Area Alarm (Merah) ---\n            const startMinAlarm = quality_factorData.alarm_limit ?? 0\n            const endMinAlarm = scales.y.max\n\n            const startMinAlarmPixel = scales.y.getPixelForValue(startMinAlarm)\n            const endMinAlarmPixel = scales.y.getPixelForValue(endMinAlarm)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixel, endMinAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixel - endMinAlarmPixel)\n            )\n\n            ctx.restore()\n        }\n    }\n    const updateChart = (mapData: { [key: string]: QualityFactorData[] }, activeHourIndex: Date) => {\n        // Get Data by activeHourIndex\n        const flooredMinutes = `${Math.floor(activeHourIndex.getMinutes() / 10)}0`\n\n        let key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n        switch (chartSplit) {\n            case \"hour\": {\n                key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n                break\n            }\n            case 'minutes_10': {\n                key = format(activeHourIndex, `yyyy-MM-dd HH:${flooredMinutes}:00`)\n                break\n            }\n            case 'all': {\n                key = \"all\"\n                break\n            }\n            default:\n                break;\n        }\n\n        const groupData = mapData[key] ?? []\n\n        if (!groupData) {\n            return\n        }\n\n        // Get Labels & Data\n        const newLabels = groupData.map(msg => format(msg.created_at, \"HH:mm:ss\"))\n        const newData = groupData.map(msg => msg.value)\n\n        // Get Area Warn, Alarm & Good\n        const reversedData = groupData.toReversed()\n        firstData.current = reversedData[0]\n\n        // Calculate min & max y\n        const dataMin = Math.min(...newData)\n        const dataMax = Math.max(...newData)\n        const range = dataMax - dataMin || 1\n        const padding = 0.2\n\n        const customMin = dataMin - range * padding\n        const customMax = dataMax + range * padding\n\n        setChartData({\n            labels: newLabels,\n            datasets: [\n                {\n                    label: \"QualityFactor\",\n                    data: newData,\n                    borderColor: CHART_COLORS.chartLine,\n                    pointBackgroundColor: CHART_COLORS.chartLine,\n                    pointBorderColor: '#ffffff',\n                    pointHoverBackgroundColor: '#ffffff',\n                    pointHoverBorderColor: CHART_COLORS.chartLine,\n\n                    borderWidth: 4,\n                    pointRadius: 0,\n                },\n            ],\n        })\n\n        setChartOptions({\n            responsive: true,\n            maintainAspectRatio: false,\n            animation: {\n                duration: 800,\n                easing: 'easeInOutCubic',\n            },\n            plugins: {\n                legend: {\n                    position: 'top',\n                    labels: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 14,\n                            weight: 500,\n                            family: \"'Inter', 'Segoe UI', sans-serif\",\n                        },\n                        usePointStyle: true,\n                        pointStyle: 'rectRounded',\n                    },\n                },\n                tooltip: {\n                    backgroundColor: '#1f2937',\n                    titleColor: '#f8fafc',\n                    bodyColor: '#cbd5e1',\n                    padding: 12,\n                    borderColor: '#0077b6',\n                    borderWidth: 1,\n                    cornerRadius: 8,\n                    titleFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 14,\n                        weight: 600,\n                    },\n                    bodyFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 13,\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        maxRotation: 45,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        padding: 8,\n                    },\n                    min: customMin,\n                    max: customMax,\n                },\n            },\n            layout: {\n                padding: {\n                    top: 10,\n                    bottom: 10,\n                    left: 10,\n                    right: 10,\n                },\n            },\n            elements: {\n                line: {\n                    borderJoinStyle: 'round',\n                },\n                point: {\n                    pointStyle: 'circle',\n                },\n            },\n        })\n    }\n\n    const handleFilterAndSort = () => {\n        const table_filtered = tableDataCache.filter((row) => {\n            return filterUtils.FilterTable(row, tableDataFilter)\n        }).sort((a, b) => {\n            if (!sortedCols) { return 0 }\n            if (sortedColsType == \"ascending\") {\n                return filterUtils.SortingTable(a, b, sortedCols)\n            } else {\n                return filterUtils.SortingTable(b, a, sortedCols)\n            }\n        })\n        setTableData(table_filtered)\n    }\n    const filterTable = (column: keyof QualityFactorData, columnnName?: string) => {\n        return <div>\n            <input style={{ fontSize: \"12px\", marginTop: \"0.5dvh\", width: \"150px\" }} type=\"text\" value={tableDataFilter[column] ?? \"\"}\n                placeholder={`${columnnName ?? column} ...`}\n                onChange={(event) => {\n                    setTableDataFilter((prev) => {\n                        const newData = { ...prev }\n                        newData[column] = event.target.value\n                        return newData\n                    })\n                }}\n            />\n        </div>\n    }\n    const headerTable = (column: keyof QualityFactorData, columnName?: string) => {\n        return <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", gap: \"3px\", whiteSpace: \"nowrap\", cursor: \"pointer\" }}\n            onClick={() => {\n                setSortedCols(column)\n                if (sortedColsType === \"ascending\") {\n                    setSortedColsType(\"descending\")\n                } else {\n                    setSortedColsType(\"ascending\")\n                }\n            }}\n        >\n            <div>{columnName ?? column}</div>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0\", alignItems: \"center\", justifyItems: \"center\" }}>\n                <FaSortUp style={{ color: ((sortedCols == column && sortedColsType == \"descending\") ? \"var(--secondary-color)\" : \"silver\"), margin: 0, padding: 0, height: '18px' }} />\n                <FaSortDown style={{ color: ((sortedCols == column && sortedColsType == \"ascending\") ? \"var(--secondary-color)\" : \"silver\"), margin: \"-18px\", padding: 0, height: '18px' }} />\n            </div>\n        </div>\n    }\n\n    const generateData = async (withLoading: boolean) => {\n        if (withLoading) {\n            contextShowLoadingFunc(true)\n        }\n\n        try {\n            const resp = await DashboardQualityFactorService.DashboardLevel4(\n                formatDate(start_date, 'yyyy-MM-dd'),\n                formatDate(end_date, 'yyyy-MM-dd'),\n                Number(machineId)\n            )\n            setTableData(resp)\n            setTableDataCache(resp)\n\n            const map = splitDataToMap(resp)\n            mappedDataRef.current = map\n\n            const keys = Object.keys(map)\n            if (keys.length > 0) {\n                const newDate = new Date(keys[keys.length - 1])\n                setActiveHourIndex(newDate)\n                updateChart(mappedDataRef.current, newDate)\n            } else {\n                updateChart(mappedDataRef.current, activeHourIndex)\n            }\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({\n                message: error instanceof Error ? error.message : error.toString(),\n                level: 3\n            }))\n        } finally {\n            contextShowLoadingFunc(false)\n        }\n    }\n    const quality_factorDataRows = (index: number, row: QualityFactorData) => {\n        let valueColor = 'black'\n        let valueWeight = '400'\n\n        const { value, warning_limit, warning_limit_bottom, alarm_limit, alarm_limit_bottom } = row\n\n        if (\n            alarm_limit !== undefined &&\n            alarm_limit_bottom !== undefined &&\n            value < alarm_limit &&\n            value > alarm_limit_bottom\n        ) {\n            valueColor = 'green'\n            valueWeight = 'bold'\n        }\n\n        // if (\n        //     warning_limit !== undefined &&\n        //     warning_limit_bottom !== undefined &&\n        //     (value >= warning_limit || value <= warning_limit_bottom)\n        // ) {\n        //     valueColor = 'orange'\n        //     valueWeight = 'bold'\n        // }\n\n        if (\n            alarm_limit !== undefined &&\n            alarm_limit_bottom !== undefined &&\n            (value >= alarm_limit || value <= alarm_limit_bottom)\n        ) {\n            valueColor = 'red'\n            valueWeight = 'bold'\n        }\n\n        return (\n            <>\n                <td>{index + 1}</td>\n                <td>{format(row.created_at, `yyyy-MM-dd HH:mm:ss`)}</td>\n                <td style={{ color: valueColor, fontWeight: valueWeight }}>{value}</td>\n                <td>{warning_limit}</td>\n                <td>{alarm_limit}</td>\n                <td>{warning_limit_bottom}</td>\n                <td>{alarm_limit_bottom}</td>\n            </>\n        )\n    }\n\n    useEffect(() => {\n        handleFilterAndSort()\n    }, [tableDataFilter, sortedCols, sortedColsType])\n    useEffect(() => {\n        // no loading on first open\n        generateData(refresh != 0)\n    }, [refresh])\n    // ========================================= FUNCTIONS  QUALITY BY DATE =========================================  //\n\n\n    // ========================================= FUNCTIONS  QUALITY REALTIME =========================================  //\n    const statusAreaRealtime: Plugin<'line'> = {\n        id: 'statusAreaRealtime',\n        beforeDatasetsDraw(chart) {\n            const quality_factorData = firstDataRealtime.current\n\n            const { ctx, chartArea, scales } = chart\n            if (!chartArea || !scales.x || !scales.y) {\n                return\n            }\n\n            if (\n                !chartArea ||\n                !scales.x ||\n                !scales.y ||\n                quality_factorData?.warning_limit == null ||\n                quality_factorData?.alarm_limit == null ||\n                quality_factorData?.warning_limit_bottom == null ||\n                quality_factorData?.alarm_limit_bottom == null\n            ) return\n\n            ctx.save()\n\n            // --- Area Alarm Bottom (Merah) ---\n            const startMinAlarmBottom = scales.y.min\n            const endMinAlarmBottom = quality_factorData.alarm_limit_bottom ?? 0\n\n            const startMinAlarmPixelBottom = scales.y.getPixelForValue(startMinAlarmBottom)\n            const endMinAlarmPixelBottom = scales.y.getPixelForValue(endMinAlarmBottom)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixelBottom, endMinAlarmPixelBottom),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixelBottom - endMinAlarmPixelBottom)\n            )\n\n            // --- Area Warn Bottom (Kuning) ---\n            // const startMinWarnBottom = quality_factorData.alarm_limit_bottom ?? 0\n            // const endMinWarnBottom = quality_factorData.warning_limit_bottom ?? 0\n\n            // const startMinWarnPixelBottom = scales.y.getPixelForValue(startMinWarnBottom)\n            // const endMinWarnPixelBottom = scales.y.getPixelForValue(endMinWarnBottom)\n\n            // ctx.fillStyle = CHART_COLORS.graphicWarn\n            // ctx.fillRect(\n            //     chartArea.left,\n            //     Math.min(startMinWarnPixelBottom, endMinWarnPixelBottom),\n            //     chartArea.right - chartArea.left,\n            //     Math.abs(startMinWarnPixelBottom - endMinWarnPixelBottom)\n            // )\n\n            // --- Area Normal (Green) ---\n            const startNormalArea = quality_factorData.alarm_limit_bottom ?? 0\n            const endNormalArea = quality_factorData.alarm_limit ?? 0\n\n            const startNormalAreaPixel = scales.y.getPixelForValue(startNormalArea)\n            const endNormalAreaPixel = scales.y.getPixelForValue(endNormalArea)\n\n            ctx.fillStyle = CHART_COLORS.graphicGood\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startNormalAreaPixel, endNormalAreaPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startNormalAreaPixel - endNormalAreaPixel)\n            )\n\n            // --- Area Warn (Kuning) ---\n            // const startMinWarn = quality_factorData.warning_limit ?? 0\n            // const endMinWarn = quality_factorData.alarm_limit ?? 0\n\n            // const startMinWarnPixel = scales.y.getPixelForValue(startMinWarn)\n            // const endMinWarnPixel = scales.y.getPixelForValue(endMinWarn)\n\n            // ctx.fillStyle = CHART_COLORS.graphicWarn\n            // ctx.fillRect(\n            //     chartArea.left,\n            //     Math.min(startMinWarnPixel, endMinWarnPixel),\n            //     chartArea.right - chartArea.left,\n            //     Math.abs(startMinWarnPixel - endMinWarnPixel)\n            // )\n\n            // --- Area Alarm (Merah) ---\n            const startMinAlarm = quality_factorData.alarm_limit ?? 0\n            const endMinAlarm = scales.y.max\n\n            const startMinAlarmPixel = scales.y.getPixelForValue(startMinAlarm)\n            const endMinAlarmPixel = scales.y.getPixelForValue(endMinAlarm)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixel, endMinAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixel - endMinAlarmPixel)\n            )\n\n            ctx.restore()\n        }\n    }\n    const updateChartRealtime = (mapData: { [key: string]: QualityFactorData[] }, activeHourIndex: Date) => {\n        // Get Data by activeHourIndex\n        const flooredMinutes = `${Math.floor(activeHourIndex.getMinutes() / 10)}0`\n\n        let key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n        switch (chartSplit) {\n            case \"hour\": {\n                key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n                break\n            }\n            case 'minutes_10': {\n                key = format(activeHourIndex, `yyyy-MM-dd HH:${flooredMinutes}:00`)\n                break\n            }\n            case 'all': {\n                key = \"all\"\n                break\n            }\n            default:\n                break;\n        }\n\n        const groupData = mapData[key] ?? []\n\n        if (!groupData) {\n            return\n        }\n\n        // Get Labels & Data\n        const newLabels = groupData.map(msg => format(msg.created_at, \"HH:mm:ss\"))\n        const newData = groupData.map(msg => msg.value)\n\n        // Get Area Warn, Alarm & Good\n        const firstData = groupData[0]\n        firstDataRealtime.current = firstData\n\n        // Calculate min & max y\n        const dataMin = Math.min(...newData)\n        const dataMax = Math.max(...newData)\n        const range = dataMax - dataMin || 1\n        const padding = 0.2\n\n        const customMin = dataMin - range * padding\n        const customMax = dataMax + range * padding\n\n\n        setChartDataRealtime({\n            labels: newLabels,\n            datasets: [\n                {\n                    label: \"QualityFactor\",\n                    data: newData,\n                    borderColor: CHART_COLORS.chartLine,\n                    pointBackgroundColor: CHART_COLORS.chartLine,\n                    pointBorderColor: '#ffffff',\n                    pointHoverBackgroundColor: '#ffffff',\n                    pointHoverBorderColor: CHART_COLORS.chartLine,\n\n                    borderWidth: 4,\n                    pointRadius: 0\n                },\n            ],\n        })\n\n        setChartOptionsRealtime({\n            responsive: true,\n            maintainAspectRatio: false,\n            animation: {\n                duration: 800,\n                easing: 'easeInOutCubic',\n            },\n            plugins: {\n                legend: {\n                    position: 'top',\n                    labels: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 14,\n                            weight: 500,\n                            family: \"'Inter', 'Segoe UI', sans-serif\",\n                        },\n                        usePointStyle: true,\n                        pointStyle: 'rectRounded',\n                    },\n                },\n                tooltip: {\n                    backgroundColor: '#1f2937',\n                    titleColor: '#f8fafc',\n                    bodyColor: '#cbd5e1',\n                    padding: 12,\n                    borderColor: '#0077b6',\n                    borderWidth: 1,\n                    cornerRadius: 8,\n                    titleFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 14,\n                        weight: 600,\n                    },\n                    bodyFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 13,\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        maxRotation: 45,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        padding: 8,\n                    },\n                    min: customMin,\n                    max: customMax,\n                },\n            },\n            layout: {\n                padding: {\n                    top: 10,\n                    bottom: 10,\n                    left: 10,\n                    right: 10,\n                },\n            },\n            elements: {\n                line: {\n                    borderJoinStyle: 'round',\n                },\n                point: {\n                    pointStyle: 'circle',\n                },\n            },\n        })\n    }\n\n    const handleFilterAndSortRealtime = () => {\n        const table_filtered = tableDataRealtimeCache.filter((row) => {\n            return filterUtils.FilterTable(row, tableDataRealtimeFilter)\n        }).sort((a, b) => {\n            if (!sortedCols) { return 0 }\n            if (sortedColsType == \"ascending\") {\n                return filterUtils.SortingTable(a, b, sortedCols)\n            } else {\n                return filterUtils.SortingTable(b, a, sortedCols)\n            }\n        })\n        setTableDataRealtime(table_filtered)\n    }\n    const filterTableRealtime = (column: keyof QualityFactorData, columnnName?: string) => {\n        return <div>\n            <input style={{ fontSize: \"12px\", marginTop: \"0.5dvh\", width: \"150px\" }} type=\"text\" value={tableDataRealtimeFilter[column] ?? \"\"}\n                placeholder={`${columnnName ?? column} ...`}\n                onChange={(event) => {\n                    setTableDataRealtimeFilter((prev) => {\n                        const newData = { ...prev }\n                        newData[column] = event.target.value\n                        return newData\n                    })\n                }}\n            />\n        </div>\n    }\n    const headerTableRealtime = (column: keyof QualityFactorData, columnName?: string) => {\n        return <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", gap: \"3px\", whiteSpace: \"nowrap\", cursor: \"pointer\" }}\n            onClick={() => {\n                setSortedCols(column)\n                if (sortedColsType === \"ascending\") {\n                    setSortedColsType(\"descending\")\n                } else {\n                    setSortedColsType(\"ascending\")\n                }\n            }}\n        >\n            <div>{columnName ?? column}</div>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0\", alignItems: \"center\", justifyItems: \"center\" }}>\n                <FaSortUp style={{ color: ((sortedCols == column && sortedColsType == \"descending\") ? \"var(--secondary-color)\" : \"silver\"), margin: 0, padding: 0, height: '18px' }} />\n                <FaSortDown style={{ color: ((sortedCols == column && sortedColsType == \"ascending\") ? \"var(--secondary-color)\" : \"silver\"), margin: \"-18px\", padding: 0, height: '18px' }} />\n            </div>\n        </div>\n    }\n\n    const generateDataRealtime = async () => {\n        try {\n            const resp = await DashboardQualityFactorService.DashboardLevel4Realtime(Number(machineId))\n\n            setTableDataRealtime(resp)\n            setTableDataRealtimeCache(resp)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3 }))\n        } finally {\n            contextShowLoadingFunc(false)\n        }\n    }\n\n    useEffect(() => {\n        if (realtime) {\n            generateDataRealtime()\n            const interval = setInterval(generateDataRealtime, 3000)\n            return () => { clearInterval(interval) }\n        }\n    }, [contextAccessToken, realtime])\n    useEffect(() => {\n        handleFilterAndSortRealtime()\n    }, [tableDataRealtimeFilter, sortedCols, sortedColsType])\n    // ========================================= FUNCTIONS  QUALITY REALTIME =========================================  //\n\n    // Auto mode\n    useEffect(() => {\n        if (!realtime) return\n        if (!isAuto) return\n\n        const map = splitDataToMap(tableDataRealtime)\n        const newDate = new Date()\n        newDate.setMinutes(Math.floor(newDate.getMinutes() / 10) * 10)\n\n        setActiveHourIndex(newDate)\n        updateChartRealtime(map, newDate)\n    }, [isAuto, realtime, tableDataRealtime, chartSplit])\n\n    // Manual mode\n    useEffect(() => {\n        if (!realtime) return\n        if (isAuto) return\n\n        const map = splitDataToMap(tableDataRealtime)\n        updateChartRealtime(map, activeHourIndex)\n    }, [isAuto, realtime, tableDataRealtime, activeHourIndex, chartSplit])\n\n    // by date\n    useEffect(() => {\n        if (realtime) { return }\n        updateChart(mappedDataRef.current, activeHourIndex)\n    }, [realtime, mappedDataRef.current, activeHourIndex])\n\n    // cache update\n    useEffect(() => {\n        const map = splitDataToMap(tableData)\n        mappedDataRef.current = map\n\n        const keys = Object.keys(map)\n        if (chartSplit != \"all\" && keys.length > 0) {\n            const newDate = new Date(keys[keys.length - 1])\n            setActiveHourIndex(newDate)\n        } else {\n            setActiveHourIndex(new Date())\n        }\n\n    }, [realtime, chartSplit])\n\n    // title chart\n    const titleChart = useMemo(() => {\n        if (chartSplit == \"all\") {\n            return \"All Data\"\n        } else if (chartSplit == \"hour\") {\n            return formatDate(activeHourIndex, \"dd MMM yyyy HH:00\")\n        } else if (chartSplit == \"minutes_10\") {\n            return formatDate(activeHourIndex, \"dd MMM yyyy HH:mm\")\n        }\n    }, [activeHourIndex, chartSplit])\n\n    const handleChangeActiveHourIndex = (amount: number, unit: 'hours' | 'minutes') => {\n        setIsAuto(false)\n        const newDate = new Date(activeHourIndex)\n        const flooredMinutes = Math.floor(newDate.getMinutes() / 10) * 10\n        if (unit === 'hours') {\n            newDate.setHours(newDate.getHours() + amount, flooredMinutes, 0, 0)\n        } else if (unit === 'minutes') {\n            newDate.setHours(newDate.getHours(), flooredMinutes + amount, 0, 0)\n        }\n        setActiveHourIndex(newDate)\n        if (!realtime) {\n            updateChart(mappedDataRef.current, newDate)\n        }\n    }\n\n    const handleToggle = () => {\n        setIsAuto((prev) => !prev)\n    }\n\n    const handleSetPage = (page: \"chart\" | \"table\" | \"table-ool\", realtime: boolean) => {\n        // set state\n        setViewMode(page);\n        setRealtime(realtime);\n\n        // reset everything\n        setSortedCols(null);\n        setSortedColsType(\"ascending\")\n        setTableDataRealtimeFilter({})\n\n        // update chart\n        if (page == \"chart\") {\n            if (realtime) {\n                const map = splitDataToMap(tableDataRealtime)\n                updateChartRealtime(map, activeHourIndex)\n            } else {\n                updateChart(mappedDataRef.current, activeHourIndex)\n            }\n        }\n    }\n\n    // excel\n    const generateExcelRealtime = () => {\n        if (tableDataRealtime.length == 0) { return contextShowAlertFunc(new AlertEntity({ message: \"NO DATA!\", level: 3 })); }\n\n        const column = [\n            \"created_at\", \"value\", \"warning_limit\",\n            \"alarm_limit\", \"warning_limit_bottom\", \"alarm_limit_bottom\"\n        ]\n        let values: { [key: string]: string }[] = []\n        for (let i = 0; i < tableDataRealtime.length; i++) {\n            values.push({\n                created_at: format(\n                    typeof tableDataRealtime[i].created_at === \"string\"\n                        ? new Date(tableDataRealtime[i].created_at)\n                        : tableDataRealtime[i].created_at,\n                    \"yyyy-MM-dd HH:mm:ss\"\n                ),\n                value: `${tableDataRealtime[i].value}`,\n                warning_limit: `${tableDataRealtime[i].warning_limit ?? \"\"}`,\n                alarm_limit: `${tableDataRealtime[i].alarm_limit ?? \"\"}`,\n                warning_limit_bottom: `${tableDataRealtime[i].warning_limit_bottom ?? \"\"}`,\n                alarm_limit_bottom: `${tableDataRealtime[i].alarm_limit_bottom ?? \"\"}`,\n            })\n        }\n\n        ExcelUtils.export(`QualityFactor Data Realtime`, column, values)\n    }\n    const generateExcel = () => {\n        if (tableData.length == 0) { return contextShowAlertFunc(new AlertEntity({ message: \"NO DATA!\", level: 3 })); }\n\n        const column = [\n            \"created_at\", \"value\", \"warning_limit\",\n            \"alarm_limit\", \"warning_limit_bottom\", \"alarm_limit_bottom\"\n        ]\n        let values: { [key: string]: string }[] = []\n        for (let i = 0; i < tableDataRealtime.length; i++) {\n            values.push({\n                created_at: format(\n                    typeof tableDataRealtime[i].created_at === \"string\"\n                        ? new Date(tableDataRealtime[i].created_at)\n                        : tableDataRealtime[i].created_at,\n                    \"yyyy-MM-dd HH:mm:ss\"\n                ),\n                value: `${tableDataRealtime[i].value}`,\n                warning_limit: `${tableDataRealtime[i].warning_limit ?? \"\"}`,\n                alarm_limit: `${tableDataRealtime[i].alarm_limit ?? \"\"}`,\n                warning_limit_bottom: `${tableDataRealtime[i].warning_limit_bottom ?? \"\"}`,\n                alarm_limit_bottom: `${tableDataRealtime[i].alarm_limit_bottom ?? \"\"}`,\n            })\n        }\n\n        ExcelUtils.export(`QualityFactor Data`, column, values)\n    }\n\n    useEffect(() => {\n        if (realtime) {\n            setHandleGenerateExcel(() => generateExcelRealtime)\n        } else {\n            setHandleGenerateExcel(() => generateExcel)\n        }\n\n        return () => {\n            setHandleGenerateExcel(null)\n        }\n    }, [realtime, tableDataRealtime, tableData])\n\n    return <>\n        <div className={styles.cardBodyHeader}>\n\n            {viewMode === 'chart' && realtime && (\n                <>\n                    <div className={styles.headerChart}>\n                        <div></div>\n                        <div className={styles.titleChart}>{titleChart}</div>\n                        <div className={styles.chartButtons} style={{ justifyContent: \"end\" }}>\n                            <button onClick={() => setChartSplit(\"hour\")} className={chartSplit === \"hour\" ? styles.activeBtn : \"\"}>\n                                Hour\n                            </button>\n                            <button onClick={() => setChartSplit(\"minutes_10\")} className={chartSplit === \"minutes_10\" ? styles.activeBtn : \"\"}>\n                                Minute\n                            </button>\n                            <button onClick={() => setChartSplit(\"all\")} className={chartSplit === \"all\" ? styles.activeBtn : \"\"}>\n                                All\n                            </button>\n                        </div>\n                    </div>\n                    <div className={styles.bodyChart}>\n                        <button className={styles.buttonChart1} style={{ borderRadius: '12px 0 0 12px' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(-1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(-10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleLeft /></button>\n                        <div className={styles.wrapperChart}>\n                            <Line data={chartDataRealtime} options={chartOptionsRealtime} plugins={[statusAreaRealtime]} />\n                        </div>\n                        <button className={styles.buttonChart2} style={{ borderRadius: '0 0 12px 0' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleRight /></button>\n                    </div>\n                </>\n            )}\n            {viewMode === 'table' && realtime && (\n                <>\n                    <div style={{ flex: 1, overflowY: \"auto\" }} className=\"ordering-table\">\n                        <table className=\"tableclickcell\">\n                            <thead>\n                                <tr>\n                                    <th>No</th>\n                                    <th>\n                                        {headerTableRealtime(\"created_at\", \"Waktu\")}\n                                        {filterTableRealtime(\"created_at\", \"Waktu\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"value\", \"QualityFactor\")}\n                                        {filterTableRealtime(\"value\", \"QualityFactor\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"warning_limit\", \"Warning Limit\")}\n                                        {filterTableRealtime(\"warning_limit\", \"Warning Limit\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"alarm_limit\", \"Alarm Limit\")}\n                                        {filterTableRealtime(\"alarm_limit\", \"Alarm Limit\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"warning_limit_bottom\", \"Warning Limit Bottom\")}\n                                        {filterTableRealtime(\"warning_limit_bottom\", \"Warning Limit Bottom\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"alarm_limit_bottom\", \"Alarm Limit Bottom\")}\n                                        {filterTableRealtime(\"alarm_limit_bottom\", \"Alarm Limit Bottom\")}\n                                    </th>\n                                </tr>\n                            </thead>\n                            {!filterUtils.FastIsEmpty(tableDataRealtime)\n                                ? <tbody>\n                                    <TableObserved\n                                        tableData={tableDataRealtime}\n                                        rowFunction={quality_factorDataRows}\n                                        rowsCount={250}\n                                        rowsIncrement={50}\n                                    />\n                                </tbody>\n                                : <tbody><tr><td colSpan={1000}>No Data Available Yet !</td></tr></tbody>\n                            }\n                        </table>\n                    </div>\n                </>\n            )}\n\n            {viewMode === 'chart' && !realtime && (\n                <>\n                    <div className={styles.headerChart}>\n                        <div></div>\n                        <div className={styles.titleChart}>{titleChart}</div>\n                        <div className={styles.chartButtons} style={{ justifyContent: \"end\" }}>\n                            <button onClick={() => setChartSplit(\"hour\")} className={chartSplit === \"hour\" ? styles.activeBtn : \"\"}>\n                                Hour\n                            </button>\n                            <button onClick={() => setChartSplit(\"minutes_10\")} className={chartSplit === \"minutes_10\" ? styles.activeBtn : \"\"}>\n                                Minute\n                            </button>\n                            <button onClick={() => setChartSplit(\"all\")} className={chartSplit === \"all\" ? styles.activeBtn : \"\"}>\n                                All\n                            </button>\n                        </div>\n                    </div>\n                    <div className={styles.bodyChart}>\n                        <button className={styles.buttonChart1} style={{ borderRadius: '12px 0 0 12px' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(-1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(-10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleLeft /></button>\n                        <div className={styles.wrapperChart}>\n                            <Line data={chartData} options={chartOptions} plugins={[statusArea]} />\n                        </div>\n                        <button className={styles.buttonChart2} style={{ borderRadius: '0 0 12px 0' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleRight /></button>\n                    </div>\n                </>\n            )}\n            {viewMode === 'table' && !realtime && (\n                <>\n                    <div style={{ flex: 1, overflowY: \"auto\" }} className=\"ordering-table\">\n                        <table className=\"tableclickcell\">\n                            <thead>\n                                <tr>\n                                    <th>No</th>\n                                    <th>\n                                        {headerTable(\"created_at\", \"Waktu\")}\n                                        {filterTable(\"created_at\", \"Waktu\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"value\", \"QualityFactor\")}\n                                        {filterTable(\"value\", \"QualityFactor\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"warning_limit\", \"Warning Limit\")}\n                                        {filterTable(\"warning_limit\", \"Warning Limit\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"alarm_limit\", \"Alarm Limit\")}\n                                        {filterTable(\"alarm_limit\", \"Alarm Limit\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"warning_limit_bottom\", \"Warning Limit Bottom\")}\n                                        {filterTable(\"warning_limit_bottom\", \"Warning Limit Bottom\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"alarm_limit_bottom\", \"Alarm Limit Bottom\")}\n                                        {filterTable(\"alarm_limit_bottom\", \"Alarm Limit Bottom\")}\n                                    </th>\n                                </tr>\n                            </thead>\n                            {!filterUtils.FastIsEmpty(tableData)\n                                ? <tbody>\n                                    <TableObserved\n                                        tableData={tableData}\n                                        rowFunction={quality_factorDataRows}\n                                        rowsCount={250}\n                                        rowsIncrement={50}\n                                    />\n                                </tbody>\n                                : <tbody><tr><td colSpan={1000}>No Data Available Yet !</td></tr></tbody>\n                            }\n                        </table>\n                    </div>\n                </>\n            )}\n\n        </div>\n\n        <div className={styles.cardBodyFooter}>\n            <div className={styles.footerLeft}>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'chart' && realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('chart', true) }}>\n                    <GrLineChart />\n                    <span className={styles.tooltipText}>Realtime Chart</span>\n                </button>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'table' && realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('table', true) }}>\n                    <TbTable />\n                    <span className={styles.tooltipText}>Realtime Table</span>\n                </button>\n            </div>\n\n            <div className={styles.footerMid}>\n                {viewMode === 'chart' && realtime && (\n                    <div className={styles.switchGroup}>\n                        <label htmlFor=\"auto\">Auto</label>\n                        <label className={styles.switch}>\n                            <input type=\"checkbox\" id=\"auto\" checked={isAuto} onChange={handleToggle} />\n                            <span className={styles.slider}></span>\n                        </label>\n                    </div>\n                )}\n            </div>\n\n            <div className={styles.footerRight}>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'chart' && !realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('chart', false) }}>\n                    <FaChartLine />\n                    <span className={styles.tooltipText}>Chart</span>\n                </button>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'table' && !realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('table', false) }}>\n                    <FaTable />\n                    <span className={styles.tooltipText}>Table</span>\n                </button>\n            </div>\n        </div>\n    </>\n}\n\nexport default QualityFactorPage\n"],"names":["export","export_name","column","values","workbook","ExcelJS","worksheet","addWorksheet","numberToLetter","number","map","key","index","getColumn","width","getCell","value","String","toUpperCase","style","fill","type","pattern","fgColor","argb","font","bold","alignment","vertical","horizontal","border","top","color","left","right","bottom","val","row","push","addRow","eachCell","cell","xlsx","writeBuffer","then","buffer","blob","Blob","link","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","import","data","load","book","eachSheet","sheet","eachRow","length","result","i","obj","j","_sheet$i$j","Date","toLowerCase","format","FilterUtils","FilterTable","tableDataFilter","keys","Object","indexKey","undefined","toString","includes","SortingTable","a","b","sortChoosed","localeCompare","FastIsEmpty","arr","_","MultipleObserver","props","onVisible","content","ref","useInView","threshold","triggerOnce","initialInView","onChange","inView","entry","_jsx","children","TableObserved","tableData","rowFunction","onRowClick","rowsCount","rowsIncrement","ROWS_MAX_COUNT","ROWS_INCREMENT","limit","setLimit","useState","useMemo","elements","_jsxs","_Fragment","prev","setTimeout","_document$getElementB","getElementById","scrollIntoView","_document$getElementB2","id","whiteSpace","onClick","colSpan","useEffect","QualityFactorService","GetAllQualityFactor","link_up_id","uri","BASE_URL","resp","FetchUtils","fetchAuth","status","Error","message","Array","isArray","quality_factor_id","link_up","parameter_name","quality_factor_tipe","quality_factor_warn","quality_factor_alarm","quality_factor_bottom_warn","quality_factor_bottom_alarm","quality_factor_display_type","quality_factor_unit","AddQualityFactor","method","body","JSON","stringify","headers","UpdateQualityFactor","fields","DeleteQualityFactor","GetLinkUpConfig","_row$quality_factor_w","_row$quality_factor_a","UpsertLinkupConfig","GetBusinessUnitConfig","business_unit_id","_row$quality_factor_w2","_row$quality_factor_a2","UpsertBusinessUnitConfig","DashboardQualityFactorService","DashboardLevel1","start_date","end_date","business_unit","quality_factor_id_ool","quality_factor_green","quality_factor_yellow","quality_factor_red","DashboardLevel2","DashboardLevel3","last_quality_factor_data","warning_limit","alarm_limit","warning_limit_bottom","alarm_limit_bottom","created_at","DashboardLevel4","DashboardLevel1Realtime","DashboardLevel2Realtime","DashboardLevel3Realtime","DashboardLevel4Realtime","ChartJS","register","LineElement","PointElement","LinearScale","Title","CategoryScale","Tooltip","Legend","defaults","maintainAspectRatio","responsive","_ref","realtime","setRealtime","refresh","setHandleGenerateExcel","context","useContext","AppContext","contextAccessToken","contextShowAlertFunc","contextShowLoadingFunc","machineId","stateShowLoading","useParams","CHART_COLORS","activeHourIndex","setActiveHourIndex","isAuto","setIsAuto","chartSplit","setChartSplit","viewMode","setViewMode","sortedCols","setSortedCols","sortedColsType","setSortedColsType","setTableData","tableDataCache","setTableDataCache","mappedDataRef","useRef","setTableDataFilter","chartData","setChartData","labels","datasets","chartOptions","setChartOptions","firstData","tableDataRealtime","setTableDataRealtime","tableDataRealtimeCache","setTableDataRealtimeCache","tableDataRealtimeFilter","setTableDataRealtimeFilter","chartDataRealtime","setChartDataRealtime","chartOptionsRealtime","setChartOptionsRealtime","firstDataRealtime","splitDataToMap","toReversed","forEach","item","date","rounded","setMinutes","Math","floor","getMinutes","setSeconds","setMilliseconds","statusArea","beforeDatasetsDraw","chart","_quality_factorData$a","_quality_factorData$a2","_quality_factorData$a3","_quality_factorData$a4","quality_factorData","current","ctx","chartArea","scales","x","y","save","startMinAlarmBottom","min","endMinAlarmBottom","startMinAlarmPixelBottom","getPixelForValue","endMinAlarmPixelBottom","fillStyle","fillRect","abs","startNormalArea","endNormalArea","startNormalAreaPixel","endNormalAreaPixel","startMinAlarm","endMinAlarm","max","startMinAlarmPixel","endMinAlarmPixel","restore","updateChart","mapData","_mapData$key","flooredMinutes","groupData","newLabels","msg","newData","reversedData","dataMin","dataMax","range","customMin","customMax","label","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","borderWidth","pointRadius","animation","duration","easing","plugins","legend","position","size","weight","family","usePointStyle","pointStyle","tooltip","backgroundColor","titleColor","bodyColor","padding","cornerRadius","titleFont","bodyFont","grid","ticks","maxRotation","minRotation","layout","line","borderJoinStyle","point","filterTable","columnnName","_tableDataFilter$colu","fontSize","marginTop","placeholder","event","target","headerTable","columnName","display","flexDirection","justifyContent","gap","cursor","alignItems","justifyItems","FaSortUp","margin","height","FaSortDown","quality_factorDataRows","valueColor","valueWeight","fontWeight","handleFilterAndSort","table_filtered","filter","filterUtils","sort","async","withLoading","formatDate","Number","newDate","error","AlertEntity","level","generateData","statusAreaRealtime","_quality_factorData$a5","_quality_factorData$a6","_quality_factorData$a7","_quality_factorData$a8","updateChartRealtime","_mapData$key2","filterTableRealtime","_tableDataRealtimeFil","headerTableRealtime","generateDataRealtime","interval","setInterval","clearInterval","handleFilterAndSortRealtime","titleChart","handleChangeActiveHourIndex","amount","unit","setHours","getHours","handleSetPage","page","generateExcelRealtime","_tableDataRealtime$i$","_tableDataRealtime$i$2","_tableDataRealtime$i$3","_tableDataRealtime$i$4","ExcelUtils","generateExcel","_tableDataRealtime$i$5","_tableDataRealtime$i$6","_tableDataRealtime$i$7","_tableDataRealtime$i$8","className","styles","cardBodyHeader","headerChart","chartButtons","activeBtn","bodyChart","buttonChart1","borderRadius","FaAngleLeft","wrapperChart","Line","options","buttonChart2","FaAngleRight","flex","overflowY","cardBodyFooter","footerLeft","buttonFooter","active","GrLineChart","tooltipText","TbTable","footerMid","switchGroup","htmlFor","switch","checked","handleToggle","slider","footerRight","FaChartLine","FaTable"],"sourceRoot":""}