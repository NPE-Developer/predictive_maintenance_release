{"version":3,"file":"static/js/118.6c6e90c4.chunk.js","mappings":"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","sources":["utils/excel.ts","features/Dashboard/DashboardLevel4/DashboardLevel4Safety.tsx","utils/filter-utils.ts","components/Observer/observer.tsx","services/safety.ts"],"sourcesContent":["import { format } from \"date-fns\"\nimport ExcelJS from \"exceljs\"\n\n/**\n * @typedef {Object} ExcelUtils\n * @property {Method} export - Export to excel from column (Array of String) and values (Object)\n * @property {Method} import - Import from excel returning Array of Sheet, with Sheet being Array of Object\n */\nclass ExcelUtils {\n    static export(export_name: string, column: string[], values: { [key: string]: string }[]) {\n        // Create a new workbook\n        const workbook = new ExcelJS.Workbook()\n        const worksheet = workbook.addWorksheet(export_name)\n\n        const numberToLetter = (number: number) => {\n            const letters = [\n                \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n                \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\",\n                \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\",\n                \"Y\", \"Z\",\n                \"AA\", \"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"AG\", \"AH\",\n                \"AI\", \"AJ\", \"AK\", \"AL\", \"AM\", \"AN\", \"AO\", \"AP\",\n                \"AQ\", \"AR\", \"AS\", \"AT\", \"AU\", \"AV\", \"AW\", \"AX\",\n                \"AY\", \"AZ\"\n            ]\n\n            if (number >= 0 && number <= 51) {\n                return letters[number]\n            }\n\n            return \"Invalid number\"\n        }\n\n        const startRow = 2\n        column.map((key, index) => {\n            worksheet.getColumn(`${numberToLetter(index)}`).width = 20\n            worksheet.getCell(`${numberToLetter(index)}${startRow - 1}`).value = String(key.toUpperCase())\n            worksheet.getCell(`${numberToLetter(index)}${startRow - 1}`).style = {\n                fill: {\n                    type: \"pattern\",\n                    pattern: \"solid\",\n                    fgColor: { argb: \"c8c8c8\" }, // Yellow background\n                },\n                font: {\n                    bold: true, // Bold font style\n                },\n                alignment: {\n                    vertical: \"middle\", // Align vertically at the middle\n                    horizontal: \"center\",\n                },\n                border: {\n                    top: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    left: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    right: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                    bottom: {\n                        style: \"thin\",\n                        color: { argb: \"000000\" },\n                    },\n                },\n            }\n        })\n\n        // Add table data\n        values.map((val, index) => {\n            const row: string[] = []\n            column.map((key) => {\n                if (val[key] != null) {\n                    row.push(val[key])\n                } else {\n                    row.push('')\n                }\n            })\n            const dataRow = worksheet.addRow(row)\n            dataRow.eachCell((cell) => {\n                cell.style = {\n                    alignment: {\n                        vertical: \"middle\",\n                        horizontal: \"center\",\n                    },\n                    border: {\n                        top: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        left: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        right: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                        bottom: {\n                            style: \"thin\",\n                            color: { argb: \"000000\" },\n                        },\n                    },\n                }\n            })\n        })\n\n        // Generate the Excel file\n        workbook.xlsx.writeBuffer().then((buffer) => {\n            // Create a Blob from the buffer\n            const blob = new Blob([buffer], {\n                type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            })\n\n            // Create a download link\n            const link = document.createElement(\"a\")\n            link.href = window.URL.createObjectURL(blob)\n            link.download = `${export_name}.xlsx`\n\n            // Simulate a click on the link to trigger the download\n            link.click()\n\n            // Clean up the URL object\n            window.URL.revokeObjectURL(link.href)\n        })\n    }\n\n    static async import(data: ArrayBuffer): Promise<{ [key: string]: string }[]> {\n        // Create a new workbook\n        const workbook = new ExcelJS.Workbook()\n        await workbook.xlsx.load(data)\n        const book: { [key: string | number]: any }[][] = []\n        workbook.eachSheet((worksheet) => {\n            const sheet: { [key: string | number]: any }[] = []\n            worksheet.eachRow((row) => {\n                sheet.push(row.values)\n            })\n            book.push(sheet)\n        })\n        // we only read sheet number 1\n        if (book.length > 0) {\n            const sheet = book[0]\n            const result: { [key: string]: string }[] = []\n            for (let i = 1; i < sheet.length; i++) {\n                const obj: { [key: string]: string } = {}\n                for (let j = 0; j < sheet[i].length; j++) {\n                    if (sheet[0][j] == null || typeof (sheet[0][j]) != 'string') continue\n                    if (sheet[i][j] instanceof Date) {\n                        obj[sheet[0][j].toLowerCase()] = format(sheet[i][j], \"yyyy-MM-dd HH:mm:ss\")\n                    } else {\n                        obj[sheet[0][j].toLowerCase()] = typeof (sheet[i][j]) == 'object' ? sheet[i][j].result : sheet[i][j] ?? ''\n                    }\n                }\n                result.push(obj)\n            }\n            return result\n        } else {\n            return []\n        }\n    }\n}\n\nexport default ExcelUtils","import { useContext, useEffect, useMemo, useRef, useState } from \"react\"\nimport styles from './DashboardLevel4.module.css'\nimport { format, formatDate } from \"date-fns\"\nimport AppContext from \"../../../context\"\nimport filterUtils from \"../../../utils/filter-utils\"\nimport { AlertEntity } from \"../../../layouts/Alert/AlertEntity\"\nimport { FaAngleLeft, FaAngleRight, FaChartLine, FaSortDown, FaSortUp, FaTable } from \"react-icons/fa\"\nimport { useParams } from \"react-router-dom\"\nimport TableObserved from \"../../../components/Observer/observer\"\nimport { GrLineChart } from \"react-icons/gr\"\nimport { TbTable } from \"react-icons/tb\"\n\n// ========================================= CHART IMPORT =========================================  //\nimport {\n    Chart as ChartJS,\n    LineElement,\n    PointElement,\n    LinearScale,\n    Title,\n    CategoryScale,\n    Tooltip,\n    Legend,\n    ChartData,\n    ChartOptions,\n    defaults\n} from 'chart.js'\n\nimport { Plugin } from 'chart.js'\nimport { Line } from 'react-chartjs-2'\nimport { SafetyData } from \"../../../entities/SafetyEntity\"\nimport { DashboardSafetyService } from \"../../../services/safety\"\nimport ExcelUtils from \"../../../utils/excel\"\n\nChartJS.register(\n    LineElement,\n    PointElement,\n    LinearScale,\n    Title,\n    CategoryScale,\n    Tooltip,\n    Legend\n)\n\ndefaults.maintainAspectRatio = false\ndefaults.responsive = true\n// ========================================= CHART IMPORT =========================================  //\n\n\ninterface SafetyPageProps {\n    realtime: boolean\n    setRealtime: (value: boolean) => void\n    refresh: number\n    start_date: Date\n    end_date: Date\n    setHandleGenerateExcel: (fn: (() => void) | null) => void\n}\n\n\nconst SafetyPage: React.FC<SafetyPageProps> = ({ realtime, setRealtime, refresh, start_date, end_date, setHandleGenerateExcel }) => {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n\n    const { machineId } = useParams()\n\n    const CHART_COLORS = {\n        chartLine: '#fb8500',\n        graphicGood: 'rgba(41, 191, 18, 0.21)',\n        graphicWarn: 'rgba(244, 188, 20, 0.28)',\n        graphicAlarm: 'rgba(213, 14, 81, 0.2)',\n    }\n\n    const [activeHourIndex, setActiveHourIndex] = useState(new Date())\n    const [isAuto, setIsAuto] = useState(true)\n    const [chartSplit, setChartSplit] = useState<\"hour\" | \"minutes_10\" | \"all\">(\"minutes_10\")\n    const [viewMode, setViewMode] = useState<'chart' | 'table' | 'table-ool'>('chart')\n    const [sortedCols, setSortedCols] = useState<keyof SafetyData | null>(null)\n    const [sortedColsType, setSortedColsType] = useState<\"ascending\" | \"descending\">(\"ascending\")\n\n\n    // ========================================= STATE SAFETY BY DATE =========================================  //\n    const [tableData, setTableData] = useState<SafetyData[]>([])\n    const [tableDataCache, setTableDataCache] = useState<SafetyData[]>([])\n    const mappedDataRef = useRef<{ [key: string]: SafetyData[] }>({})\n\n    const [tableDataFilter, setTableDataFilter] = useState<{ [key: string]: string }>({})\n\n    const [chartData, setChartData] = useState<ChartData<'line'>>({ labels: [], datasets: [] })\n    const [chartOptions, setChartOptions] = useState<ChartOptions<'line'>>({})\n\n    const firstData = useRef<SafetyData | null>(null)\n    // ========================================= STATE SAFETY BY DATE =========================================  //\n\n\n    // ========================================= STATE SAFETY REALTIME =========================================  //\n    const [tableDataRealtime, setTableDataRealtime] = useState<SafetyData[]>([])\n    const [tableDataRealtimeCache, setTableDataRealtimeCache] = useState<SafetyData[]>([])\n\n    const [tableDataRealtimeFilter, setTableDataRealtimeFilter] = useState<{ [key: string]: string }>({})\n\n    const [chartDataRealtime, setChartDataRealtime] = useState<ChartData<'line'>>({ labels: [], datasets: [], })\n    const [chartOptionsRealtime, setChartOptionsRealtime] = useState<ChartOptions<'line'>>({})\n\n    const firstDataRealtime = useRef<SafetyData | null>(null)\n    // ========================================= STATE SAFETY REALTIME =========================================  //\n\n\n    function splitDataToMap(data: SafetyData[]) {\n        const map: { [key: string]: SafetyData[] } = {}\n\n        if (chartSplit == \"all\") {\n            return { \"all\": [...data].toReversed() }\n        }\n\n        data.toReversed().forEach(item => {\n            const date = new Date(item.created_at)\n            const rounded = new Date(date)\n            rounded.setMinutes(Math.floor(date.getMinutes() / 10) * 10)\n            rounded.setSeconds(0)\n            rounded.setMilliseconds(0)\n\n            let key = format(rounded, \"yyyy-MM-dd HH:00:00\")\n            switch (chartSplit) {\n                case \"hour\": {\n                    key = format(rounded, \"yyyy-MM-dd HH:00:00\")\n                    break\n                }\n                case 'minutes_10': {\n                    key = format(rounded, \"yyyy-MM-dd HH:mm:00\")\n                    break\n                }\n                default:\n                    break;\n            }\n\n            if (map[key] == undefined) {\n                map[key] = []\n            } else {\n                map[key].push(item)\n            }\n        })\n\n        return map\n    }\n\n\n    // ========================================= FUNCTIONS SAFETY BY DATE =========================================  //\n    const statusArea: Plugin<'line'> = {\n        id: 'statusArea',\n        beforeDatasetsDraw(chart) {\n            const safetyData = firstData.current\n\n            const { ctx, chartArea, scales } = chart\n            if (\n                !chartArea ||\n                !scales.x ||\n                !scales.y ||\n                safetyData?.warning_limit == null ||\n                safetyData?.alarm_limit == null ||\n                safetyData?.warning_limit_bottom == null ||\n                safetyData?.alarm_limit_bottom == null\n            ) return\n\n            ctx.save()\n\n            // --- Area Alarm Bottom (Merah) ---\n            const startMinAlarmBottom = scales.y.min\n            const endMinAlarmBottom = safetyData.alarm_limit_bottom ?? 0\n\n            const startMinAlarmPixelBottom = scales.y.getPixelForValue(startMinAlarmBottom)\n            const endMinAlarmPixelBottom = scales.y.getPixelForValue(endMinAlarmBottom)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixelBottom, endMinAlarmPixelBottom),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixelBottom - endMinAlarmPixelBottom)\n            )\n\n            // --- Area Warn Bottom (Kuning) ---\n            // const startMinWarnBottom = safetyData.alarm_limit_bottom ?? 0\n            // const endMinWarnBottom = safetyData.warning_limit_bottom ?? 0\n\n            // const startMinWarnPixelBottom = scales.y.getPixelForValue(startMinWarnBottom)\n            // const endMinWarnPixelBottom = scales.y.getPixelForValue(endMinWarnBottom)\n\n            // ctx.fillStyle = CHART_COLORS.graphicWarn\n            // ctx.fillRect(\n            //     chartArea.left,\n            //     Math.min(startMinWarnPixelBottom, endMinWarnPixelBottom),\n            //     chartArea.right - chartArea.left,\n            //     Math.abs(startMinWarnPixelBottom - endMinWarnPixelBottom)\n            // )\n\n            // --- Area Normal (Green) ---\n            const startNormalArea = safetyData.alarm_limit_bottom ?? 0\n            const endNormalArea = safetyData.alarm_limit ?? 0\n\n            const startNormalAreaPixel = scales.y.getPixelForValue(startNormalArea)\n            const endNormalAreaPixel = scales.y.getPixelForValue(endNormalArea)\n\n            ctx.fillStyle = CHART_COLORS.graphicGood\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startNormalAreaPixel, endNormalAreaPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startNormalAreaPixel - endNormalAreaPixel)\n            )\n\n            // --- Area Warn (Kuning) ---\n            // const startMinWarn = safetyData.warning_limit ?? 0\n            // const endMinWarn = safetyData.alarm_limit ?? 0\n\n            // const startMinWarnPixel = scales.y.getPixelForValue(startMinWarn)\n            // const endMinWarnPixel = scales.y.getPixelForValue(endMinWarn)\n\n            // ctx.fillStyle = CHART_COLORS.graphicWarn\n            // ctx.fillRect(\n            //     chartArea.left,\n            //     Math.min(startMinWarnPixel, endMinWarnPixel),\n            //     chartArea.right - chartArea.left,\n            //     Math.abs(startMinWarnPixel - endMinWarnPixel)\n            // )\n\n            // --- Area Alarm (Merah) ---\n            const startMinAlarm = safetyData.alarm_limit ?? 0\n            const endMinAlarm = scales.y.max\n\n            const startMinAlarmPixel = scales.y.getPixelForValue(startMinAlarm)\n            const endMinAlarmPixel = scales.y.getPixelForValue(endMinAlarm)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixel, endMinAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixel - endMinAlarmPixel)\n            )\n\n            ctx.restore()\n        }\n    }\n    const updateChart = (mapData: { [key: string]: SafetyData[] }, activeHourIndex: Date) => {\n        // Get Data by activeHourIndex\n        const flooredMinutes = `${Math.floor(activeHourIndex.getMinutes() / 10)}0`\n\n        let key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n        switch (chartSplit) {\n            case \"hour\": {\n                key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n                break\n            }\n            case 'minutes_10': {\n                key = format(activeHourIndex, `yyyy-MM-dd HH:${flooredMinutes}:00`)\n                break\n            }\n            case 'all': {\n                key = \"all\"\n                break\n            }\n            default:\n                break;\n        }\n\n        const groupData = mapData[key] ?? []\n\n        if (!groupData) {\n            return\n        }\n\n        // Get Labels & Data\n        const newLabels = groupData.map(msg => format(msg.created_at, \"HH:mm:ss\"))\n        const newData = groupData.map(msg => msg.value)\n\n        // Get Area Warn, Alarm & Good\n        const reversedData = groupData.toReversed()\n        firstData.current = reversedData[0]\n\n        // Calculate min & max y\n        const dataMin = Math.min(...newData)\n        const dataMax = Math.max(...newData)\n        const range = dataMax - dataMin || 1\n        const padding = 0.2\n\n        const customMin = dataMin - range * padding\n        const customMax = dataMax + range * padding\n\n        setChartData({\n            labels: newLabels,\n            datasets: [\n                {\n                    label: \"Safety\",\n                    data: newData,\n                    borderColor: CHART_COLORS.chartLine,\n                    pointBackgroundColor: CHART_COLORS.chartLine,\n                    pointBorderColor: '#ffffff',\n                    pointHoverBackgroundColor: '#ffffff',\n                    pointHoverBorderColor: CHART_COLORS.chartLine,\n\n                    borderWidth: 4,\n                    pointRadius: 0,\n                },\n            ],\n        })\n\n        setChartOptions({\n            responsive: true,\n            maintainAspectRatio: false,\n            animation: {\n                duration: 800,\n                easing: 'easeInOutCubic',\n            },\n            plugins: {\n                legend: {\n                    position: 'top',\n                    labels: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 14,\n                            weight: 500,\n                            family: \"'Inter', 'Segoe UI', sans-serif\",\n                        },\n                        usePointStyle: true,\n                        pointStyle: 'rectRounded',\n                    },\n                },\n                tooltip: {\n                    backgroundColor: '#1f2937',\n                    titleColor: '#f8fafc',\n                    bodyColor: '#cbd5e1',\n                    padding: 12,\n                    borderColor: '#0077b6',\n                    borderWidth: 1,\n                    cornerRadius: 8,\n                    titleFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 14,\n                        weight: 600,\n                    },\n                    bodyFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 13,\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        maxRotation: 45,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        padding: 8,\n                    },\n                    min: customMin,\n                    max: customMax,\n                },\n            },\n            layout: {\n                padding: {\n                    top: 10,\n                    bottom: 10,\n                    left: 10,\n                    right: 10,\n                },\n            },\n            elements: {\n                line: {\n                    borderJoinStyle: 'round',\n                },\n                point: {\n                    pointStyle: 'circle',\n                },\n            },\n        })\n    }\n\n    const handleFilterAndSort = () => {\n        const table_filtered = tableDataCache.filter((row) => {\n            return filterUtils.FilterTable(row, tableDataFilter)\n        }).sort((a, b) => {\n            if (!sortedCols) { return 0 }\n            if (sortedColsType == \"ascending\") {\n                return filterUtils.SortingTable(a, b, sortedCols)\n            } else {\n                return filterUtils.SortingTable(b, a, sortedCols)\n            }\n        })\n        setTableData(table_filtered)\n    }\n    const filterTable = (column: keyof SafetyData, columnnName?: string) => {\n        return <div>\n            <input style={{ fontSize: \"12px\", marginTop: \"0.5dvh\", width: \"150px\" }} type=\"text\" value={tableDataFilter[column] ?? \"\"}\n                placeholder={`${columnnName ?? column} ...`}\n                onChange={(event) => {\n                    setTableDataFilter((prev) => {\n                        const newData = { ...prev }\n                        newData[column] = event.target.value\n                        return newData\n                    })\n                }}\n            />\n        </div>\n    }\n    const headerTable = (column: keyof SafetyData, columnName?: string) => {\n        return <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", gap: \"3px\", whiteSpace: \"nowrap\", cursor: \"pointer\" }}\n            onClick={() => {\n                setSortedCols(column)\n                if (sortedColsType === \"ascending\") {\n                    setSortedColsType(\"descending\")\n                } else {\n                    setSortedColsType(\"ascending\")\n                }\n            }}\n        >\n            <div>{columnName ?? column}</div>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0\", alignItems: \"center\", justifyItems: \"center\" }}>\n                <FaSortUp style={{ color: ((sortedCols == column && sortedColsType == \"descending\") ? \"var(--secondary-color)\" : \"silver\"), margin: 0, padding: 0, height: '18px' }} />\n                <FaSortDown style={{ color: ((sortedCols == column && sortedColsType == \"ascending\") ? \"var(--secondary-color)\" : \"silver\"), margin: \"-18px\", padding: 0, height: '18px' }} />\n            </div>\n        </div>\n    }\n\n    const generateData = async (withLoading: boolean) => {\n        if (withLoading) {\n            contextShowLoadingFunc(true)\n        }\n\n        try {\n            const resp = await DashboardSafetyService.DashboardLevel4(\n                formatDate(start_date, 'yyyy-MM-dd'),\n                formatDate(end_date, 'yyyy-MM-dd'),\n                Number(machineId)\n            )\n            setTableData(resp)\n            setTableDataCache(resp)\n\n            const map = splitDataToMap(resp)\n            mappedDataRef.current = map\n\n            const keys = Object.keys(map)\n            if (keys.length > 0 && chartSplit != \"all\") {\n                const newDate = new Date(keys[keys.length - 1])\n                setActiveHourIndex(newDate)\n                updateChart(mappedDataRef.current, newDate)\n            } else {\n                updateChart(mappedDataRef.current, activeHourIndex)\n            }\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({\n                message: error instanceof Error ? error.message : error.toString(),\n                level: 3\n            }))\n        } finally {\n            contextShowLoadingFunc(false)\n        }\n    }\n    const safetyDataRows = (index: number, row: SafetyData) => {\n        let valueColor = 'black'\n        let valueWeight = '400'\n\n        const { value, warning_limit, warning_limit_bottom, alarm_limit, alarm_limit_bottom } = row\n\n        if (\n            alarm_limit !== undefined &&\n            alarm_limit_bottom !== undefined &&\n            value < alarm_limit &&\n            value > alarm_limit_bottom\n        ) {\n            valueColor = 'green'\n            valueWeight = 'bold'\n        }\n\n        // if (\n        //     warning_limit !== undefined &&\n        //     warning_limit_bottom !== undefined &&\n        //     (value >= warning_limit || value <= warning_limit_bottom)\n        // ) {\n        //     valueColor = 'orange'\n        //     valueWeight = 'bold'\n        // }\n\n        if (\n            alarm_limit !== undefined &&\n            alarm_limit_bottom !== undefined &&\n            (value >= alarm_limit || value <= alarm_limit_bottom)\n        ) {\n            valueColor = 'red'\n            valueWeight = 'bold'\n        }\n\n        return (\n            <>\n                <td>{index + 1}</td>\n                <td>{format(row.created_at, `yyyy-MM-dd HH:mm:ss`)}</td>\n                <td style={{ color: valueColor, fontWeight: valueWeight }}>{value}</td>\n                <td>{warning_limit}</td>\n                <td>{alarm_limit}</td>\n                <td>{warning_limit_bottom}</td>\n                <td>{alarm_limit_bottom}</td>\n            </>\n        )\n    }\n\n    useEffect(() => {\n        handleFilterAndSort()\n    }, [tableDataFilter, sortedCols, sortedColsType])\n    useEffect(() => {\n        // no loading on first open\n        generateData(refresh != 0)\n    }, [refresh])\n    // ========================================= FUNCTIONS SAFETY BY DATE =========================================  //\n\n\n    // ========================================= FUNCTIONS SAFETY REALTIME =========================================  //\n    const statusAreaRealtime: Plugin<'line'> = {\n        id: 'statusAreaRealtime',\n        beforeDatasetsDraw(chart) {\n            const safetyData = firstDataRealtime.current\n\n            const { ctx, chartArea, scales } = chart\n            if (!chartArea || !scales.x || !scales.y) {\n                return\n            }\n\n            if (\n                !chartArea ||\n                !scales.x ||\n                !scales.y ||\n                safetyData?.warning_limit == null ||\n                safetyData?.alarm_limit == null ||\n                safetyData?.warning_limit_bottom == null ||\n                safetyData?.alarm_limit_bottom == null\n            ) return\n\n            ctx.save()\n\n            // --- Area Alarm Bottom (Merah) ---\n            const startMinAlarmBottom = scales.y.min\n            const endMinAlarmBottom = safetyData.alarm_limit_bottom ?? 0\n\n            const startMinAlarmPixelBottom = scales.y.getPixelForValue(startMinAlarmBottom)\n            const endMinAlarmPixelBottom = scales.y.getPixelForValue(endMinAlarmBottom)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixelBottom, endMinAlarmPixelBottom),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixelBottom - endMinAlarmPixelBottom)\n            )\n\n            // --- Area Warn Bottom (Kuning) ---\n            // const startMinWarnBottom = safetyData.alarm_limit_bottom ?? 0\n            // const endMinWarnBottom = safetyData.warning_limit_bottom ?? 0\n\n            // const startMinWarnPixelBottom = scales.y.getPixelForValue(startMinWarnBottom)\n            // const endMinWarnPixelBottom = scales.y.getPixelForValue(endMinWarnBottom)\n\n            // ctx.fillStyle = CHART_COLORS.graphicWarn\n            // ctx.fillRect(\n            //     chartArea.left,\n            //     Math.min(startMinWarnPixelBottom, endMinWarnPixelBottom),\n            //     chartArea.right - chartArea.left,\n            //     Math.abs(startMinWarnPixelBottom - endMinWarnPixelBottom)\n            // )\n\n            // --- Area Normal (Green) ---\n            const startNormalArea = safetyData.alarm_limit_bottom ?? 0\n            const endNormalArea = safetyData.alarm_limit ?? 0\n\n            const startNormalAreaPixel = scales.y.getPixelForValue(startNormalArea)\n            const endNormalAreaPixel = scales.y.getPixelForValue(endNormalArea)\n\n            ctx.fillStyle = CHART_COLORS.graphicGood\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startNormalAreaPixel, endNormalAreaPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startNormalAreaPixel - endNormalAreaPixel)\n            )\n\n            // --- Area Warn (Kuning) ---\n            // const startMinWarn = safetyData.warning_limit ?? 0\n            // const endMinWarn = safetyData.alarm_limit ?? 0\n\n            // const startMinWarnPixel = scales.y.getPixelForValue(startMinWarn)\n            // const endMinWarnPixel = scales.y.getPixelForValue(endMinWarn)\n\n            // ctx.fillStyle = CHART_COLORS.graphicWarn\n            // ctx.fillRect(\n            //     chartArea.left,\n            //     Math.min(startMinWarnPixel, endMinWarnPixel),\n            //     chartArea.right - chartArea.left,\n            //     Math.abs(startMinWarnPixel - endMinWarnPixel)\n            // )\n\n            // --- Area Alarm (Merah) ---\n            const startMinAlarm = safetyData.alarm_limit ?? 0\n            const endMinAlarm = scales.y.max\n\n            const startMinAlarmPixel = scales.y.getPixelForValue(startMinAlarm)\n            const endMinAlarmPixel = scales.y.getPixelForValue(endMinAlarm)\n\n            ctx.fillStyle = CHART_COLORS.graphicAlarm\n            ctx.fillRect(\n                chartArea.left,\n                Math.min(startMinAlarmPixel, endMinAlarmPixel),\n                chartArea.right - chartArea.left,\n                Math.abs(startMinAlarmPixel - endMinAlarmPixel)\n            )\n\n            ctx.restore()\n        }\n    }\n    const updateChartRealtime = (mapData: { [key: string]: SafetyData[] }, activeHourIndex: Date) => {\n        // Get Data by activeHourIndex\n        const flooredMinutes = `${Math.floor(activeHourIndex.getMinutes() / 10)}0`\n\n        let key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n        switch (chartSplit) {\n            case \"hour\": {\n                key = format(activeHourIndex, \"yyyy-MM-dd HH:00:00\")\n                break\n            }\n            case 'minutes_10': {\n                key = format(activeHourIndex, `yyyy-MM-dd HH:${flooredMinutes}:00`)\n                break\n            }\n            case 'all': {\n                key = \"all\"\n                break\n            }\n            default:\n                break;\n        }\n\n        const groupData = mapData[key] ?? []\n\n        if (!groupData) {\n            return\n        }\n\n        // Get Labels & Data\n        const newLabels = groupData.map(msg => format(msg.created_at, \"HH:mm:ss\"))\n        const newData = groupData.map(msg => msg.value)\n\n        // Get Area Warn, Alarm & Good\n        const firstData = groupData[0]\n        firstDataRealtime.current = firstData\n\n        // Calculate min & max y\n        const dataMin = Math.min(...newData)\n        const dataMax = Math.max(...newData)\n        const range = dataMax - dataMin || 1\n        const padding = 0.2\n\n        const customMin = dataMin - range * padding\n        const customMax = dataMax + range * padding\n\n\n        setChartDataRealtime({\n            labels: newLabels,\n            datasets: [\n                {\n                    label: \"Safety\",\n                    data: newData,\n                    borderColor: CHART_COLORS.chartLine,\n                    pointBackgroundColor: CHART_COLORS.chartLine,\n                    pointBorderColor: '#ffffff',\n                    pointHoverBackgroundColor: '#ffffff',\n                    pointHoverBorderColor: CHART_COLORS.chartLine,\n\n                    borderWidth: 4,\n                    pointRadius: 0\n                },\n            ],\n        })\n\n        setChartOptionsRealtime({\n            responsive: true,\n            maintainAspectRatio: false,\n            animation: {\n                duration: 800,\n                easing: 'easeInOutCubic',\n            },\n            plugins: {\n                legend: {\n                    position: 'top',\n                    labels: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 14,\n                            weight: 500,\n                            family: \"'Inter', 'Segoe UI', sans-serif\",\n                        },\n                        usePointStyle: true,\n                        pointStyle: 'rectRounded',\n                    },\n                },\n                tooltip: {\n                    backgroundColor: '#1f2937',\n                    titleColor: '#f8fafc',\n                    bodyColor: '#cbd5e1',\n                    padding: 12,\n                    borderColor: '#0077b6',\n                    borderWidth: 1,\n                    cornerRadius: 8,\n                    titleFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 14,\n                        weight: 600,\n                    },\n                    bodyFont: {\n                        family: \"'Inter', sans-serif\",\n                        size: 13,\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        maxRotation: 45,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    grid: {\n                        color: '#0d2b35',\n                    },\n                    ticks: {\n                        color: '#fbeecc',\n                        font: {\n                            size: 12,\n                            family: \"'Inter', sans-serif\",\n                        },\n                        padding: 8,\n                    },\n                    min: customMin,\n                    max: customMax,\n                },\n            },\n            layout: {\n                padding: {\n                    top: 10,\n                    bottom: 10,\n                    left: 10,\n                    right: 10,\n                },\n            },\n            elements: {\n                line: {\n                    borderJoinStyle: 'round',\n                },\n                point: {\n                    pointStyle: 'circle',\n                },\n            },\n        })\n    }\n\n    const handleFilterAndSortRealtime = () => {\n        const table_filtered = tableDataRealtimeCache.filter((row) => {\n            return filterUtils.FilterTable(row, tableDataRealtimeFilter)\n        }).sort((a, b) => {\n            if (!sortedCols) { return 0 }\n            if (sortedColsType == \"ascending\") {\n                return filterUtils.SortingTable(a, b, sortedCols)\n            } else {\n                return filterUtils.SortingTable(b, a, sortedCols)\n            }\n        })\n        setTableDataRealtime(table_filtered)\n    }\n    const filterTableRealtime = (column: keyof SafetyData, columnnName?: string) => {\n        return <div>\n            <input style={{ fontSize: \"12px\", marginTop: \"0.5dvh\", width: \"150px\" }} type=\"text\" value={tableDataRealtimeFilter[column] ?? \"\"}\n                placeholder={`${columnnName ?? column} ...`}\n                onChange={(event) => {\n                    setTableDataRealtimeFilter((prev) => {\n                        const newData = { ...prev }\n                        newData[column] = event.target.value\n                        return newData\n                    })\n                }}\n            />\n        </div>\n    }\n    const headerTableRealtime = (column: keyof SafetyData, columnName?: string) => {\n        return <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", gap: \"3px\", whiteSpace: \"nowrap\", cursor: \"pointer\" }}\n            onClick={() => {\n                setSortedCols(column)\n                if (sortedColsType === \"ascending\") {\n                    setSortedColsType(\"descending\")\n                } else {\n                    setSortedColsType(\"ascending\")\n                }\n            }}\n        >\n            <div>{columnName ?? column}</div>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0\", alignItems: \"center\", justifyItems: \"center\" }}>\n                <FaSortUp style={{ color: ((sortedCols == column && sortedColsType == \"descending\") ? \"var(--secondary-color)\" : \"silver\"), margin: 0, padding: 0, height: '18px' }} />\n                <FaSortDown style={{ color: ((sortedCols == column && sortedColsType == \"ascending\") ? \"var(--secondary-color)\" : \"silver\"), margin: \"-18px\", padding: 0, height: '18px' }} />\n            </div>\n        </div>\n    }\n\n    const generateDataRealtime = async () => {\n        try {\n            const resp = await DashboardSafetyService.DashboardLevel4Realtime(Number(machineId))\n\n            setTableDataRealtime(resp)\n            setTableDataRealtimeCache(resp)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3 }))\n        } finally {\n            contextShowLoadingFunc(false)\n        }\n    }\n\n    useEffect(() => {\n        if (realtime) {\n            generateDataRealtime()\n            const interval = setInterval(generateDataRealtime, 3000)\n            return () => { clearInterval(interval) }\n        }\n    }, [contextAccessToken, realtime])\n    useEffect(() => {\n        handleFilterAndSortRealtime()\n    }, [tableDataRealtimeFilter, sortedCols, sortedColsType])\n    // ========================================= FUNCTIONS SAFETY REALTIME =========================================  //\n\n    // Auto mode\n    useEffect(() => {\n        if (!realtime) return\n        if (!isAuto) return\n\n        const map = splitDataToMap(tableDataRealtime)\n        const newDate = new Date()\n        newDate.setMinutes(Math.floor(newDate.getMinutes() / 10) * 10)\n\n        setActiveHourIndex(newDate)\n        updateChartRealtime(map, newDate)\n    }, [isAuto, realtime, tableDataRealtime, chartSplit])\n\n    // Manual mode\n    useEffect(() => {\n        if (!realtime) return\n        if (isAuto) return\n\n        const map = splitDataToMap(tableDataRealtime)\n        updateChartRealtime(map, activeHourIndex)\n    }, [isAuto, realtime, tableDataRealtime, activeHourIndex, chartSplit])\n\n    // by date\n    useEffect(() => {\n        if (realtime) { return }\n        updateChart(mappedDataRef.current, activeHourIndex)\n    }, [realtime, mappedDataRef.current, activeHourIndex])\n\n    // cache update\n    useEffect(() => {\n        const map = splitDataToMap(tableData)\n        mappedDataRef.current = map\n\n        const keys = Object.keys(map)\n        if (chartSplit != \"all\" && keys.length > 0) {\n            const newDate = new Date(keys[keys.length - 1])\n            setActiveHourIndex(newDate)\n        } else {\n            setActiveHourIndex(new Date())\n        }\n\n    }, [realtime, chartSplit])\n\n    // title chart\n    const titleChart = useMemo(() => {\n        if (chartSplit == \"all\") {\n            return \"All Data\"\n        } else if (chartSplit == \"hour\") {\n            return formatDate(activeHourIndex, \"dd MMM yyyy HH:00\")\n        } else if (chartSplit == \"minutes_10\") {\n            return formatDate(activeHourIndex, \"dd MMM yyyy HH:mm\")\n        }\n    }, [activeHourIndex, chartSplit])\n\n    const handleChangeActiveHourIndex = (amount: number, unit: 'hours' | 'minutes') => {\n        setIsAuto(false)\n        const newDate = new Date(activeHourIndex)\n        const flooredMinutes = Math.floor(newDate.getMinutes() / 10) * 10\n        if (unit === 'hours') {\n            newDate.setHours(newDate.getHours() + amount, flooredMinutes, 0, 0)\n        } else if (unit === 'minutes') {\n            newDate.setHours(newDate.getHours(), flooredMinutes + amount, 0, 0)\n        }\n        setActiveHourIndex(newDate)\n        if (!realtime) {\n            updateChart(mappedDataRef.current, newDate)\n        }\n    }\n\n    const handleToggle = () => {\n        setIsAuto((prev) => !prev)\n    }\n\n    const handleSetPage = (page: \"chart\" | \"table\" | \"table-ool\", realtime: boolean) => {\n        // set state\n        setViewMode(page);\n        setRealtime(realtime);\n\n        // reset everything\n        setSortedCols(null);\n        setSortedColsType(\"ascending\")\n        setTableDataRealtimeFilter({})\n\n        // update chart\n        if (page == \"chart\") {\n            if (realtime) {\n                const map = splitDataToMap(tableDataRealtime)\n                updateChartRealtime(map, activeHourIndex)\n            } else {\n                updateChart(mappedDataRef.current, activeHourIndex)\n            }\n        }\n    }\n\n    // excel\n    const generateExcelRealtime = () => {\n        if (tableDataRealtime.length == 0) { return contextShowAlertFunc(new AlertEntity({ message: \"NO DATA!\", level: 3 })); }\n\n        const column = [\n            \"created_at\", \"value\", \"warning_limit\",\n            \"alarm_limit\", \"warning_limit_bottom\", \"alarm_limit_bottom\"\n        ]\n        let values: { [key: string]: string }[] = []\n        for (let i = 0; i < tableDataRealtime.length; i++) {\n            values.push({\n                created_at: format(\n                    typeof tableDataRealtime[i].created_at === \"string\"\n                        ? new Date(tableDataRealtime[i].created_at)\n                        : tableDataRealtime[i].created_at,\n                    \"yyyy-MM-dd HH:mm:ss\"\n                ),\n                value: `${tableDataRealtime[i].value}`,\n                warning_limit: `${tableDataRealtime[i].warning_limit ?? \"\"}`,\n                alarm_limit: `${tableDataRealtime[i].alarm_limit ?? \"\"}`,\n                warning_limit_bottom: `${tableDataRealtime[i].warning_limit_bottom ?? \"\"}`,\n                alarm_limit_bottom: `${tableDataRealtime[i].alarm_limit_bottom ?? \"\"}`,\n            })\n        }\n\n        ExcelUtils.export(`Safety Data Realtime`, column, values)\n    }\n    const generateExcel = () => {\n        if (tableData.length == 0) { return contextShowAlertFunc(new AlertEntity({ message: \"NO DATA!\", level: 3 })); }\n\n        const column = [\n            \"created_at\", \"value\", \"warning_limit\",\n            \"alarm_limit\", \"warning_limit_bottom\", \"alarm_limit_bottom\"\n        ]\n        let values: { [key: string]: string }[] = []\n        for (let i = 0; i < tableDataRealtime.length; i++) {\n            values.push({\n                created_at: format(\n                    typeof tableDataRealtime[i].created_at === \"string\"\n                        ? new Date(tableDataRealtime[i].created_at)\n                        : tableDataRealtime[i].created_at,\n                    \"yyyy-MM-dd HH:mm:ss\"\n                ),\n                value: `${tableDataRealtime[i].value}`,\n                warning_limit: `${tableDataRealtime[i].warning_limit ?? \"\"}`,\n                alarm_limit: `${tableDataRealtime[i].alarm_limit ?? \"\"}`,\n                warning_limit_bottom: `${tableDataRealtime[i].warning_limit_bottom ?? \"\"}`,\n                alarm_limit_bottom: `${tableDataRealtime[i].alarm_limit_bottom ?? \"\"}`,\n            })\n        }\n\n        ExcelUtils.export(`Safety Data`, column, values)\n    }\n\n    useEffect(() => {\n        if (realtime) {\n            setHandleGenerateExcel(() => generateExcelRealtime)\n        } else {\n            setHandleGenerateExcel(() => generateExcel)\n        }\n\n        return () => {\n            setHandleGenerateExcel(null)\n        }\n    }, [realtime, tableDataRealtime, tableData])\n\n    return <>\n        <div className={styles.cardBodyHeader}>\n\n            {viewMode === 'chart' && realtime && (\n                <>\n                    <div className={styles.headerChart}>\n                        <div></div>\n                        <div className={styles.titleChart}>{titleChart}</div>\n                        <div className={styles.chartButtons} style={{ justifyContent: \"end\" }}>\n                            <button onClick={() => setChartSplit(\"hour\")} className={chartSplit === \"hour\" ? styles.activeBtn : \"\"}>\n                                Hour\n                            </button>\n                            <button onClick={() => setChartSplit(\"minutes_10\")} className={chartSplit === \"minutes_10\" ? styles.activeBtn : \"\"}>\n                                Minute\n                            </button>\n                            <button onClick={() => setChartSplit(\"all\")} className={chartSplit === \"all\" ? styles.activeBtn : \"\"}>\n                                All\n                            </button>\n                        </div>\n                    </div>\n                    <div className={styles.bodyChart}>\n                        <button className={styles.buttonChart1} style={{ borderRadius: '12px 0 0 12px' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(-1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(-10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleLeft /></button>\n                        <div className={styles.wrapperChart}>\n                            <Line data={chartDataRealtime} options={chartOptionsRealtime} plugins={[statusAreaRealtime]} />\n                        </div>\n                        <button className={styles.buttonChart2} style={{ borderRadius: '0 0 12px 0' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleRight /></button>\n                    </div>\n                </>\n            )}\n            {viewMode === 'table' && realtime && (\n                <>\n                    <div style={{ flex: 1, overflowY: \"auto\" }} className=\"ordering-table\">\n                        <table className=\"tableclickcell\">\n                            <thead>\n                                <tr>\n                                    <th>No</th>\n                                    <th>\n                                        {headerTableRealtime(\"created_at\", \"Waktu\")}\n                                        {filterTableRealtime(\"created_at\", \"Waktu\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"value\", \"Safety\")}\n                                        {filterTableRealtime(\"value\", \"Safety\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"warning_limit\", \"Warning Limit\")}\n                                        {filterTableRealtime(\"warning_limit\", \"Warning Limit\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"alarm_limit\", \"Alarm Limit\")}\n                                        {filterTableRealtime(\"alarm_limit\", \"Alarm Limit\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"warning_limit_bottom\", \"Warning Limit Bottom\")}\n                                        {filterTableRealtime(\"warning_limit_bottom\", \"Warning Limit Bottom\")}\n                                    </th>\n                                    <th>\n                                        {headerTableRealtime(\"alarm_limit_bottom\", \"Alarm Limit Bottom\")}\n                                        {filterTableRealtime(\"alarm_limit_bottom\", \"Alarm Limit Bottom\")}\n                                    </th>\n                                </tr>\n                            </thead>\n                            {!filterUtils.FastIsEmpty(tableDataRealtime)\n                                ? <tbody>\n                                    <TableObserved\n                                        tableData={tableDataRealtime}\n                                        rowFunction={safetyDataRows}\n                                        rowsCount={250}\n                                        rowsIncrement={50}\n                                    />\n                                </tbody>\n                                : <tbody><tr><td colSpan={1000}>No Data Available Yet !</td></tr></tbody>\n                            }\n                        </table>\n                    </div>\n                </>\n            )}\n\n            {viewMode === 'chart' && !realtime && (\n                <>\n                    <div className={styles.headerChart}>\n                        <div></div>\n                        <div className={styles.titleChart}>{titleChart}</div>\n                        <div className={styles.chartButtons} style={{ justifyContent: \"end\" }}>\n                            <button onClick={() => setChartSplit(\"hour\")} className={chartSplit === \"hour\" ? styles.activeBtn : \"\"}>\n                                Hour\n                            </button>\n                            <button onClick={() => setChartSplit(\"minutes_10\")} className={chartSplit === \"minutes_10\" ? styles.activeBtn : \"\"}>\n                                Minute\n                            </button>\n                            <button onClick={() => setChartSplit(\"all\")} className={chartSplit === \"all\" ? styles.activeBtn : \"\"}>\n                                All\n                            </button>\n                        </div>\n                    </div>\n                    <div className={styles.bodyChart}>\n                        <button className={styles.buttonChart1} style={{ borderRadius: '12px 0 0 12px' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(-1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(-10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleLeft /></button>\n                        <div className={styles.wrapperChart}>\n                            <Line data={chartData} options={chartOptions} plugins={[statusArea]} />\n                        </div>\n                        <button className={styles.buttonChart2} style={{ borderRadius: '0 0 12px 0' }} onClick={() => {\n                            if (chartSplit == \"hour\") {\n                                handleChangeActiveHourIndex(1, \"hours\")\n                            } else if (chartSplit == \"minutes_10\") {\n                                handleChangeActiveHourIndex(10, \"minutes\")\n                            } else {\n                                // do nothing\n                            }\n                        }}><FaAngleRight /></button>\n                    </div>\n                </>\n            )}\n            {viewMode === 'table' && !realtime && (\n                <>\n                    <div style={{ flex: 1, overflowY: \"auto\" }} className=\"ordering-table\">\n                        <table className=\"tableclickcell\">\n                            <thead>\n                                <tr>\n                                    <th>No</th>\n                                    <th>\n                                        {headerTable(\"created_at\", \"Waktu\")}\n                                        {filterTable(\"created_at\", \"Waktu\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"value\", \"Safety\")}\n                                        {filterTable(\"value\", \"Safety\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"warning_limit\", \"Warning Limit\")}\n                                        {filterTable(\"warning_limit\", \"Warning Limit\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"alarm_limit\", \"Alarm Limit\")}\n                                        {filterTable(\"alarm_limit\", \"Alarm Limit\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"warning_limit_bottom\", \"Warning Limit Bottom\")}\n                                        {filterTable(\"warning_limit_bottom\", \"Warning Limit Bottom\")}\n                                    </th>\n                                    <th>\n                                        {headerTable(\"alarm_limit_bottom\", \"Alarm Limit Bottom\")}\n                                        {filterTable(\"alarm_limit_bottom\", \"Alarm Limit Bottom\")}\n                                    </th>\n                                </tr>\n                            </thead>\n                            {!filterUtils.FastIsEmpty(tableData)\n                                ? <tbody>\n                                    <TableObserved\n                                        tableData={tableData}\n                                        rowFunction={safetyDataRows}\n                                        rowsCount={250}\n                                        rowsIncrement={50}\n                                    />\n                                </tbody>\n                                : <tbody><tr><td colSpan={1000}>No Data Available Yet !</td></tr></tbody>\n                            }\n                        </table>\n                    </div>\n                </>\n            )}\n\n        </div>\n\n        <div className={styles.cardBodyFooter}>\n            <div className={styles.footerLeft}>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'chart' && realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('chart', true) }}>\n                    <GrLineChart />\n                    <span className={styles.tooltipText}>Realtime Chart</span>\n                </button>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'table' && realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('table', true) }}>\n                    <TbTable />\n                    <span className={styles.tooltipText}>Realtime Table</span>\n                </button>\n            </div>\n\n            <div className={styles.footerMid}>\n                {viewMode === 'chart' && realtime && (\n                    <div className={styles.switchGroup}>\n                        <label htmlFor=\"auto\">Auto</label>\n                        <label className={styles.switch}>\n                            <input type=\"checkbox\" id=\"auto\" checked={isAuto} onChange={handleToggle} />\n                            <span className={styles.slider}></span>\n                        </label>\n                    </div>\n                )}\n            </div>\n\n            <div className={styles.footerRight}>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'chart' && !realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('chart', false) }}>\n                    <FaChartLine />\n                    <span className={styles.tooltipText}>Chart</span>\n                </button>\n                <button\n                    className={`${styles.buttonFooter} ${viewMode === 'table' && !realtime ? styles.active : ''}`}\n                    onClick={() => { handleSetPage('table', false) }}>\n                    <FaTable />\n                    <span className={styles.tooltipText}>Table</span>\n                </button>\n            </div>\n        </div>\n    </>\n}\n\nexport default SafetyPage\n","class FilterUtils {\n    static FilterTable = (row: any, tableDataFilter: { [key: string]: string }) => {\n        let keys = Object.keys(row)\n        for (let indexKey = 0; indexKey < keys.length; indexKey++) {\n            const key = keys[indexKey]\n            if (tableDataFilter[key]) {\n                if (row != undefined && row[key] != null) {\n                    if (tableDataFilter[key] !== \"\") {\n                        if (\n                            row[key]\n                                .toString()\n                                .toLowerCase()\n                                .includes(tableDataFilter[key].toString().toLowerCase()) == false\n                        ) {\n                            return false\n                        }\n                    }\n                } else {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    static SortingTable = (a: any, b: any, sortChoosed: string) => {\n        if (sortChoosed != null && sortChoosed != undefined) {\n            if (a[sortChoosed] !== undefined && b[sortChoosed] !== undefined) {\n                if (typeof a[sortChoosed] === 'string' && typeof b[sortChoosed] === 'string') {\n                    return a[sortChoosed].localeCompare(b[sortChoosed])\n                } else if (typeof a[sortChoosed] === 'number' && typeof b[sortChoosed] === 'number') {\n                    return a[sortChoosed] - b[sortChoosed]\n                }\n            }\n        }\n        return 0\n    }\n\n    static FastIsEmpty = (arr: any[]) => {\n        for (const _ in arr) {\n            return false\n        }\n        return true\n    }\n}\n\nexport default FilterUtils","import { useEffect, useMemo, useState } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\n\nfunction MultipleObserver(props: { content: React.JSX.Element; onVisible: () => any, }) {\n    const { onVisible, content } = props;\n\n    const { ref } = useInView({\n        threshold: 0.1, triggerOnce: false, initialInView: false,\n        onChange: (inView, entry) => { if (inView) { onVisible() } }\n    });\n\n    return <tr ref={ref}>\n        {content}\n    </tr>\n}\n\ninterface TableObservedProps {\n    tableData: any[],\n    rowFunction: (index: number, row: any) => JSX.Element,\n    onRowClick?: (row: any) => void\n    rowsCount: number,\n    rowsIncrement: number,\n}\n\nexport default function TableObserved(props: TableObservedProps) {\n    const { tableData, rowFunction, onRowClick, rowsCount, rowsIncrement } = props;\n\n    const ROWS_MAX_COUNT = rowsCount\n    const ROWS_INCREMENT = rowsIncrement\n\n    const [limit, setLimit] = useState(ROWS_MAX_COUNT)\n\n    const data = useMemo((() => {\n        const elements = []\n        for (let index = 0; index < tableData.length; index++) {\n            if (index < limit - ROWS_MAX_COUNT || index > limit) {\n                continue\n            }\n\n            const row = tableData[index]\n            elements.push(<>\n                {index == limit\n                    ? <MultipleObserver\n                        content={<></>}\n                        onVisible={function () {\n                            setLimit((prev) => prev + ROWS_INCREMENT)\n                            // non react way but fuck it\n                            setTimeout(() => { document.getElementById(`rows_${index}`)?.scrollIntoView() })\n                        }} />\n                    : <></>\n                }\n                {index == limit - ROWS_MAX_COUNT && index != 0\n                    ? <MultipleObserver\n                        content={<></>}\n                        onVisible={function () {\n                            setLimit((prev) => {\n                                return prev - ROWS_INCREMENT < ROWS_MAX_COUNT ? ROWS_MAX_COUNT : prev - ROWS_INCREMENT\n                            })\n                            // non react way but fuck it\n                            setTimeout(() => { document.getElementById(`rows_${index}`)?.scrollIntoView() })\n                        }} />\n                    : <></>\n                }\n                <tr id={`rows_${index}`} style={{ whiteSpace: \"nowrap\" }} onClick={() => { if (onRowClick != null) { onRowClick(row) } }}>\n                    {rowFunction(index, row)}\n                </tr>\n                {index == tableData.length - 1\n                    ? <tr><td colSpan={1000}>END OF DATA</td></tr>\n                    : <></>}\n            </>)\n        }\n        return elements\n    }), [limit, tableData])\n\n    useEffect(() => {\n        setLimit(ROWS_MAX_COUNT)\n    }, [tableData])\n\n    return data.map((val) => { return val })\n}","import { BASE_URL } from \"../constants\"\nimport { BusinessUnitConfigSafety, SafetyData, SafetyEntity, SafetyInsertEntity, SafetyUpdateEntity, DashboardSafetyLevel1, DashboardSafetyLevel2, DashboardSafetyLevel3, FormBusinessUnitSafety, FormLinkupSafety, LinkUpConfigSafety, } from \"../entities/SafetyEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\n// TODO unimplemented\n// \"/api/extension/safety/v1/data\"  GetRawSafetyDataController\n\n\nclass SafetyService {\n    static async GetAllSafety(link_up_id?: string): Promise<SafetyEntity[]> {\n\n        let uri = `${BASE_URL}/api/extension/safety/v1`\n        if (link_up_id != null) {\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: SafetyEntity[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].safety_id != \"number\") { throw new Error(\"invalid safety_id value\") }\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid parameter_name value\") }\n            if (typeof data[i].safety_tipe != \"string\") { throw new Error(\"invalid safety_tipe value\") }\n            if (data[i].safety_warn != undefined && typeof data[i].safety_warn != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (data[i].safety_alarm != undefined && typeof data[i].safety_alarm != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n            if (data[i].safety_bottom_warn != undefined && typeof data[i].safety_bottom_warn != \"number\") { throw new Error(\"invalid safety_bottom_warn value\") }\n            if (data[i].safety_bottom_alarm != undefined && typeof data[i].safety_bottom_alarm != \"number\") { throw new Error(\"invalid safety_bottom_alarm value\") }\n            if (typeof data[i].safety_display_type != \"string\") { throw new Error(\"invalid safety_display_type value\") }\n            if (typeof data[i].safety_unit != \"string\") { throw new Error(\"invalid safety_unit value\") }\n        }\n\n        return data\n    }\n\n    static async AddSafety(data: SafetyInsertEntity): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1`,\n            {\n                method: 'POST',\n                body: JSON.stringify({ ...data }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async UpdateSafety(safety_id: number, fields: SafetyUpdateEntity): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1`,\n            {\n                method: 'PATCH',\n                body: JSON.stringify({ safety_id, fields }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async DeleteSafety(safety_id: number): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1`,\n            {\n                method: 'DELETE',\n                body: JSON.stringify({ safety_id }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async GetLinkUpConfig(link_up_id?: number): Promise<LinkUpConfigSafety[]> {\n        let uri = `${BASE_URL}/api/extension/safety/v1/linkup`\n        if (link_up_id != null) {\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid link up config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof (row.safety_warn ?? 0) != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (typeof (row.safety_alarm ?? 0) != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertLinkupConfig(link_up_id: number, fields: FormLinkupSafety): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1/linkup`, {\n            method: 'PATCH',\n            body: JSON.stringify({ link_up_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async GetBusinessUnitConfig(business_unit_id?: number): Promise<BusinessUnitConfigSafety[]> {\n        let uri = `${BASE_URL}/api/extension/safety/v1/business`\n        if (business_unit_id != null) {\n            uri += `?business_unit_id=${business_unit_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid link up config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof (row.safety_warn ?? 0) != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (typeof (row.safety_alarm ?? 0) != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertBusinessUnitConfig(business_unit_id: number, fields: FormBusinessUnitSafety): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1/business`, {\n            method: 'PATCH',\n            body: JSON.stringify({ business_unit_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n}\n\nclass DashboardSafetyService {\n    static async DashboardLevel1(start_date: string, end_date: string): Promise<DashboardSafetyLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/safety/v1/l1?start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].safety_id_ool)) { throw new Error(\"invalid safety_id_ool value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n            if (data[i].safety_warn != undefined && typeof data[i].safety_warn != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (data[i].safety_alarm != undefined && typeof data[i].safety_alarm != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2(start_date: string, end_date: string, business_unit_id: number): Promise<DashboardSafetyLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/safety/v1/l2?business_unit_id=${business_unit_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].safety_id_ool)) { throw new Error(\"invalid safety_id_ool value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n            if (data[i].safety_warn != undefined && typeof data[i].safety_warn != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (data[i].safety_alarm != undefined && typeof data[i].safety_alarm != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3(start_date: string, end_date: string, link_up_id: number): Promise<DashboardSafetyLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/safety/v1/l3?link_up_id=${link_up_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].safety_id != \"number\") { throw new Error(\"invalid dashboard safety_id value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid dashboard parameter_name value\") }\n            if (typeof data[i].safety_tipe != \"string\") { throw new Error(\"invalid dashboard safety_tipe value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n\n            if (!data[i].last_safety_data) { throw new Error(\"missing last_safety_data\") }\n            if (typeof data[i].last_safety_data.safety_id !== \"number\") { throw new Error(\"invalid last_safety_data.safety_id\") }\n            if (typeof data[i].last_safety_data.value !== \"number\") { throw new Error(\"invalid last_safety_data.value\") }\n            if (data[i].last_safety_data.warning_limit != undefined && typeof data[i].last_safety_data.warning_limit !== \"number\") { throw new Error(\"invalid last_safety_data.warning_limit\") }\n            if (data[i].last_safety_data.alarm_limit != undefined && typeof data[i].last_safety_data.alarm_limit !== \"number\") { throw new Error(\"invalid last_safety_data.alarm_limit\") }\n            if (data[i].last_safety_data.warning_limit_bottom != undefined && typeof data[i].last_safety_data.warning_limit_bottom !== \"number\") { throw new Error(\"invalid last_safety_data.warning_limit_bottom\") }\n            if (data[i].last_safety_data.alarm_limit_bottom != undefined && typeof data[i].last_safety_data.alarm_limit_bottom !== \"number\") { throw new Error(\"invalid last_safety_data.alarm_limit_bottom\") }\n            if (typeof data[i].last_safety_data.created_at !== \"string\") { throw new Error(\"invalid last_safety_data.created_at\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4(start_date: string, end_date: string, safety_id: number): Promise<SafetyData[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/safety/v1/data?safety_id=${safety_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: SafetyData[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].value != \"number\") { throw new Error(\"invalid value value\") }\n            if (data[i].warning_limit != undefined && typeof data[i].warning_limit != \"number\") { throw new Error(\"invalid warning_limit value\") }\n            if (data[i].alarm_limit != undefined && typeof data[i].alarm_limit != \"number\") { throw new Error(\"invalid alarm_limit value\") }\n            if (data[i].warning_limit_bottom != undefined && typeof data[i].warning_limit_bottom != \"number\") { throw new Error(\"invalid warning_limit_bottom value\") }\n            if (data[i].alarm_limit_bottom != undefined && typeof data[i].alarm_limit_bottom != \"number\") { throw new Error(\"invalid alarm_limit_bottom value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel1Realtime(): Promise<DashboardSafetyLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1/l1/realtime`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].safety_id_ool)) { throw new Error(\"invalid safety_id_ool value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n            if (data[i].safety_warn != undefined && typeof data[i].safety_warn != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (data[i].safety_alarm != undefined && typeof data[i].safety_alarm != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2Realtime(business_unit_id: number): Promise<DashboardSafetyLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1/l2/realtime?business_unit_id=${business_unit_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].safety_id_ool)) { throw new Error(\"invalid safety_id_ool value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n            if (data[i].safety_warn != undefined && typeof data[i].safety_warn != \"number\") { throw new Error(\"invalid safety_warn value\") }\n            if (data[i].safety_alarm != undefined && typeof data[i].safety_alarm != \"number\") { throw new Error(\"invalid safety_alarm value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3Realtime(link_up_id: number): Promise<DashboardSafetyLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/safety/v1/l3/realtime?link_up_id=${link_up_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardSafetyLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].safety_id != \"number\") { throw new Error(\"invalid dashboard safety_id value\") }\n            if (typeof data[i].parameter_name != \"string\") { throw new Error(\"invalid dashboard parameter_name value\") }\n            if (typeof data[i].safety_tipe != \"string\") { throw new Error(\"invalid dashboard safety_tipe value\") }\n            if (typeof data[i].safety_green != \"number\") { throw new Error(\"invalid safety_green value\") }\n            if (typeof data[i].safety_yellow != \"number\") { throw new Error(\"invalid safety_yellow value\") }\n            if (typeof data[i].safety_red != \"number\") { throw new Error(\"invalid safety_red value\") }\n\n            if (!data[i].last_safety_data) { throw new Error(\"missing last_safety_data\") }\n            if (typeof data[i].last_safety_data.safety_id !== \"number\") { throw new Error(\"invalid last_safety_data.safety_id\") }\n            if (typeof data[i].last_safety_data.value !== \"number\") { throw new Error(\"invalid last_safety_data.value\") }\n            if (data[i].last_safety_data.warning_limit != undefined && typeof data[i].last_safety_data.warning_limit !== \"number\") { throw new Error(\"invalid last_safety_data.warning_limit\") }\n            if (data[i].last_safety_data.alarm_limit != undefined && typeof data[i].last_safety_data.alarm_limit !== \"number\") { throw new Error(\"invalid last_safety_data.alarm_limit\") }\n            if (data[i].last_safety_data.warning_limit_bottom != undefined && typeof data[i].last_safety_data.warning_limit_bottom !== \"number\") { throw new Error(\"invalid last_safety_data.warning_limit_bottom\") }\n            if (data[i].last_safety_data.alarm_limit_bottom != undefined && typeof data[i].last_safety_data.alarm_limit_bottom !== \"number\") { throw new Error(\"invalid last_safety_data.alarm_limit_bottom\") }\n            if (typeof data[i].last_safety_data.created_at !== \"string\") { throw new Error(\"invalid last_safety_data.created_at\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4Realtime(safety_id: number): Promise<SafetyData[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/safety/v1/data/realtime?safety_id=${safety_id}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: SafetyData[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].value != \"number\") { throw new Error(\"invalid value value\") }\n            if (data[i].warning_limit != undefined && typeof data[i].warning_limit != \"number\") { throw new Error(\"invalid warning_limit value\") }\n            if (data[i].alarm_limit != undefined && typeof data[i].alarm_limit != \"number\") { throw new Error(\"invalid alarm_limit value\") }\n            if (data[i].warning_limit_bottom != undefined && typeof data[i].warning_limit_bottom != \"number\") { throw new Error(\"invalid warning_limit_bottom value\") }\n            if (data[i].alarm_limit_bottom != undefined && typeof data[i].alarm_limit_bottom != \"number\") { throw new Error(\"invalid alarm_limit_bottom value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n}\n\nexport { SafetyService, DashboardSafetyService }"],"names":["export","export_name","column","values","workbook","ExcelJS","worksheet","addWorksheet","numberToLetter","number","map","key","index","getColumn","width","getCell","value","String","toUpperCase","style","fill","type","pattern","fgColor","argb","font","bold","alignment","vertical","horizontal","border","top","color","left","right","bottom","val","row","push","addRow","eachCell","cell","xlsx","writeBuffer","then","buffer","blob","Blob","link","document","createElement","href","window","URL","createObjectURL","download","click","revokeObjectURL","import","data","load","book","eachSheet","sheet","eachRow","length","result","i","obj","j","_sheet$i$j","Date","toLowerCase","format","ChartJS","register","LineElement","PointElement","LinearScale","Title","CategoryScale","Tooltip","Legend","defaults","maintainAspectRatio","responsive","_ref","realtime","setRealtime","refresh","start_date","end_date","setHandleGenerateExcel","context","useContext","AppContext","contextAccessToken","contextShowAlertFunc","contextShowLoadingFunc","machineId","stateShowLoading","useParams","CHART_COLORS","activeHourIndex","setActiveHourIndex","useState","isAuto","setIsAuto","chartSplit","setChartSplit","viewMode","setViewMode","sortedCols","setSortedCols","sortedColsType","setSortedColsType","tableData","setTableData","tableDataCache","setTableDataCache","mappedDataRef","useRef","tableDataFilter","setTableDataFilter","chartData","setChartData","labels","datasets","chartOptions","setChartOptions","firstData","tableDataRealtime","setTableDataRealtime","tableDataRealtimeCache","setTableDataRealtimeCache","tableDataRealtimeFilter","setTableDataRealtimeFilter","chartDataRealtime","setChartDataRealtime","chartOptionsRealtime","setChartOptionsRealtime","firstDataRealtime","splitDataToMap","toReversed","forEach","item","date","created_at","rounded","setMinutes","Math","floor","getMinutes","setSeconds","setMilliseconds","undefined","statusArea","id","beforeDatasetsDraw","chart","_safetyData$alarm_lim","_safetyData$alarm_lim2","_safetyData$alarm_lim3","_safetyData$alarm_lim4","safetyData","current","ctx","chartArea","scales","x","y","warning_limit","alarm_limit","warning_limit_bottom","alarm_limit_bottom","save","startMinAlarmBottom","min","endMinAlarmBottom","startMinAlarmPixelBottom","getPixelForValue","endMinAlarmPixelBottom","fillStyle","fillRect","abs","startNormalArea","endNormalArea","startNormalAreaPixel","endNormalAreaPixel","startMinAlarm","endMinAlarm","max","startMinAlarmPixel","endMinAlarmPixel","restore","updateChart","mapData","_mapData$key","flooredMinutes","groupData","newLabels","msg","newData","reversedData","dataMin","dataMax","range","customMin","customMax","label","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","borderWidth","pointRadius","animation","duration","easing","plugins","legend","position","size","weight","family","usePointStyle","pointStyle","tooltip","backgroundColor","titleColor","bodyColor","padding","cornerRadius","titleFont","bodyFont","grid","ticks","maxRotation","minRotation","layout","elements","line","borderJoinStyle","point","filterTable","columnnName","_tableDataFilter$colu","_jsx","children","fontSize","marginTop","placeholder","onChange","event","prev","target","headerTable","columnName","_jsxs","display","flexDirection","justifyContent","gap","whiteSpace","cursor","onClick","alignItems","justifyItems","FaSortUp","margin","height","FaSortDown","safetyDataRows","valueColor","valueWeight","_Fragment","fontWeight","useEffect","handleFilterAndSort","table_filtered","filter","filterUtils","FilterTable","sort","a","b","SortingTable","async","withLoading","resp","DashboardSafetyService","DashboardLevel4","formatDate","Number","keys","Object","newDate","error","AlertEntity","message","Error","toString","level","generateData","statusAreaRealtime","_safetyData$alarm_lim5","_safetyData$alarm_lim6","_safetyData$alarm_lim7","_safetyData$alarm_lim8","updateChartRealtime","_mapData$key2","filterTableRealtime","_tableDataRealtimeFil","headerTableRealtime","generateDataRealtime","DashboardLevel4Realtime","interval","setInterval","clearInterval","handleFilterAndSortRealtime","titleChart","useMemo","handleChangeActiveHourIndex","amount","unit","setHours","getHours","handleSetPage","page","generateExcelRealtime","_tableDataRealtime$i$","_tableDataRealtime$i$2","_tableDataRealtime$i$3","_tableDataRealtime$i$4","ExcelUtils","generateExcel","_tableDataRealtime$i$5","_tableDataRealtime$i$6","_tableDataRealtime$i$7","_tableDataRealtime$i$8","className","styles","cardBodyHeader","headerChart","chartButtons","activeBtn","bodyChart","buttonChart1","borderRadius","FaAngleLeft","wrapperChart","Line","options","buttonChart2","FaAngleRight","flex","overflowY","FastIsEmpty","colSpan","TableObserved","rowFunction","rowsCount","rowsIncrement","cardBodyFooter","footerLeft","buttonFooter","active","GrLineChart","tooltipText","TbTable","footerMid","switchGroup","htmlFor","switch","checked","handleToggle","slider","footerRight","FaChartLine","FaTable","FilterUtils","indexKey","includes","sortChoosed","localeCompare","arr","_","MultipleObserver","props","onVisible","content","ref","useInView","threshold","triggerOnce","initialInView","inView","entry","onRowClick","ROWS_MAX_COUNT","ROWS_INCREMENT","limit","setLimit","setTimeout","_document$getElementB","getElementById","scrollIntoView","_document$getElementB2","SafetyService","GetAllSafety","link_up_id","uri","BASE_URL","FetchUtils","fetchAuth","status","Array","isArray","safety_id","link_up","parameter_name","safety_tipe","safety_warn","safety_alarm","safety_bottom_warn","safety_bottom_alarm","safety_display_type","safety_unit","AddSafety","method","body","JSON","stringify","headers","UpdateSafety","fields","DeleteSafety","GetLinkUpConfig","_row$safety_warn","_row$safety_alarm","UpsertLinkupConfig","GetBusinessUnitConfig","business_unit_id","_row$safety_warn2","_row$safety_alarm2","UpsertBusinessUnitConfig","DashboardLevel1","business_unit","safety_id_ool","safety_green","safety_yellow","safety_red","DashboardLevel2","DashboardLevel3","last_safety_data","DashboardLevel1Realtime","DashboardLevel2Realtime","DashboardLevel3Realtime"],"sourceRoot":""}