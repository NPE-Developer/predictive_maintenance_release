{"version":3,"file":"static/js/196.8881d1f4.chunk.js","mappings":"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","sources":["services/following_error.ts","services/machine.ts","features/Dashboard/DashboardLevel3/DashboardLevel3FollErr.tsx"],"sourcesContent":["import { BASE_URL } from \"../constants\"\nimport { MachineConfigFoll, FormMachineConfigFoll, FollowingErrorData, DashboardFollowingLevel1, DashboardFollowingLevel2, DashboardFollowingLevel3, DashboardFollowingLevel4, } from \"../entities/FollowingErrorEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\n// TODO unimplemented\n//  \"/api/extension/following_error/v1/data\" GetRawFollErrDataController\n\nclass FollErrService {\n    static async GetMachineConfig(machine_id?: number): Promise<MachineConfigFoll[]> {\n        let uri = `${BASE_URL}/api/extension/following_error/v1/machine`\n        if (machine_id != null) {\n            uri += `?machine_id=${machine_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid machine config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.machine_id != \"number\") { throw new Error(\"invalid machine_id value\") }\n            if (typeof (row.following_error_warn ?? 0) != \"number\") { throw new Error(\"invalid following_error_warn value\") }\n            if (typeof (row.following_error_alarm ?? 0) != \"number\") { throw new Error(\"invalid following_error_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertMachineConfig(machine_id: number, fields: FormMachineConfigFoll): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/machine`, {\n            method: 'PATCH',\n            body: JSON.stringify({ machine_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n}\n\nclass DashboardFollErrService {\n    static async DashboardLevel1(start_date: string, end_date: string): Promise<DashboardFollowingLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/l1?start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2(start_date: string, end_date: string, business_unit_id: number): Promise<DashboardFollowingLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/l2?business_unit_id=${business_unit_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3(start_date: string, end_date: string, link_up_id: number): Promise<DashboardFollowingLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/l3?link_up_id=${link_up_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].machine_id != \"number\") { throw new Error(\"invalid machine_id value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4(start_date: string, end_date: string, machine_id: number): Promise<DashboardFollowingLevel4[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/data?machine_id=${machine_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel4[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].following_error != \"number\") { throw new Error(\"invalid following_error value\") }\n            if (data[i].following_error_warn != undefined && typeof data[i].following_error_warn != \"number\") { throw new Error(\"invalid following_error_warn value\") }\n            if (data[i].following_error_alarm != undefined && typeof data[i].following_error_alarm != \"number\") { throw new Error(\"invalid following_error_alarm value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n\n\n\n    static async DashboardLevel1Realtime(): Promise<DashboardFollowingLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/l1/realtime`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2Realtime(business_unit_id: number): Promise<DashboardFollowingLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/l2/realtime?business_unit_id=${business_unit_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3Realtime(link_up_id: number): Promise<DashboardFollowingLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/l3/realtime?link_up_id=${link_up_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].machine_id != \"number\") { throw new Error(\"invalid machine_id value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4Realtime(machine_id: number): Promise<DashboardFollowingLevel4[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/data/realtime?machine_id=${machine_id}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel4[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].following_error != \"number\") { throw new Error(\"invalid following_error value\") }\n            if (data[i].following_error_warn != undefined && typeof data[i].following_error_warn != \"number\") { throw new Error(\"invalid following_error_warn value\") }\n            if (data[i].following_error_alarm != undefined && typeof data[i].following_error_alarm != \"number\") { throw new Error(\"invalid following_error_alarm value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n}\n\nexport { FollErrService, DashboardFollErrService }","import { BASE_URL } from \"../constants\"\nimport { MachineEntity } from \"../entities/MachineEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\nclass MachineService {\n    static async GetAllMachine(link_up_id?: string): Promise<MachineEntity[]> {\n        let uri = `${BASE_URL}/api/v1/machine`\n        if (link_up_id != null){\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const rawData = Array.isArray(resp.data) ? resp.data : []\n        const data: MachineEntity[] = []\n        for (let i = 0; i < rawData.length; i++) {\n            data.push({\n                machine_id: rawData[i].machine_id,\n                machine: rawData[i].machine,\n                machine_warn: rawData[i].machine_warn,\n                machine_alarm: rawData[i].machine_alarm,\n                link_up: rawData[i].link_up,\n                machine_type: rawData[i].machine_type,\n                gateway_host: rawData[i].gateway_host,\n                gateway_port: rawData[i].gateway_port,\n                pressure_slave_id: rawData[i].pressure_slave_id,\n                vibration_slave_id: rawData[i].vibration_slave_id,\n            })\n        }\n\n        return data\n    }\n\n    static async AddMachine(data: {\n        machine: string,\n        machine_warn: number,\n        machine_alarm: number,\n        link_up_id: number,\n        machine_type: string,\n        gateway_host: string,\n        gateway_port: string,\n        pressure_slave_id?: number,\n        vibration_slave_id?: number,\n    }): Promise<{ message: string }> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/machine`,\n            {\n                method: 'POST',\n                body: JSON.stringify({ ...data }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async UpdateMachine(machine_id: number, fields: {\n        machine?: string,\n        machine_warn?: number,\n        machine_alarm?: number,\n        link_up_id?: number,\n        machine_type?: string,\n        gateway_host?: string,\n        gateway_port?: string,\n        pressure_slave_id?: number,\n        vibration_slave_id?: number,\n    }): Promise<{ message: string }> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/machine`,\n            {\n                method: 'PATCH',\n                body: JSON.stringify({ machine_id, fields }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async DeleteMachine(machine_id: number): Promise<{ message: string }> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/machine`,\n            {\n                method: 'DELETE',\n                body: JSON.stringify({ machine_id: machine_id }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n}\n\nexport { MachineService }","import { useContext, useEffect, useState } from \"react\"\nimport AppContext from \"../../../context\"\nimport { useNavigate, useLocation, useParams } from \"react-router-dom\"\nimport { MachineService } from \"../../../services/machine\"\nimport { MachineEntity } from \"../../../entities/MachineEntity\"\nimport { AlertEntity } from \"../../../layouts/Alert/AlertEntity\"\nimport styles from './DashboardLevel3.module.css'\nimport { formatDate } from \"date-fns\"\nimport followingErrorImage from \"../../../assets/images/error_image.png\"\nimport cardImage from \"../../../assets/images/machine_image.png\"\nimport { DashboardFollowingLevel3, MachineConfigFoll } from \"../../../entities/FollowingErrorEntity\"\nimport { DashboardFollErrService, FollErrService } from \"../../../services/following_error\"\nimport noDataImg from '../../../assets/images/no_data_image.png'\n\ninterface FilterType {\n    start_date: Date\n    end_date: Date\n}\n\ninterface DashboardLevel3FollErrPageProps {\n    realtime: boolean\n    refresh: number\n    filterDate: FilterType\n    onFilterDateChange: (newFilter: FilterType) => void\n}\n\nconst DashboardLevel3FollErrPage: React.FC<DashboardLevel3FollErrPageProps> = ({ realtime, refresh, filterDate, onFilterDateChange }) => {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextVersion = context.version\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    const navigate = useNavigate()\n    const location = useLocation()\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n\n    // ========================================= STATE VIEW =========================================  //\n    const { linkUpId } = useParams()\n    const { link_up } = location.state || {}\n\n    const [machineData, setMachineData] = useState<{ [type: string]: MachineEntity[] }>({})\n    const [tableDataFoll, setTableDataFoll] = useState<{ [id: string]: DashboardFollowingLevel3 }>({})\n\n    interface DashboardLevel2State {\n        link_up_id: number,\n        link_up: string,\n\n        ool_following_error: number,\n\n        machine_ool: number[]\n    }\n\n    const [level2Data, setLevel2Data] = useState<{ [type: string]: DashboardLevel2State }>({})\n    // ========================================= STATE VIEW =========================================  //\n\n\n    // ========================================= FUNCTIONS =========================================  //\n    const generateDataMachine = async () => {\n        if (Object.keys(machineData).length == 0) { contextShowLoadingFunc(true) }\n        try {\n            let resp = await MachineService.GetAllMachine(linkUpId)\n\n            if (contextVersion.following != null) {\n                const foll = await FollErrService.GetMachineConfig()\n                resp = resp.filter((val) => { return foll.find((f) => { return f.machine_id == val.machine_id }) != null })\n            }\n\n            const data: { [type: string]: MachineEntity[] } = {}\n            for (let i = 0; i < resp.length; i++) {\n                if (data[resp[i].machine_type] == undefined) {\n                    data[resp[i].machine_type] = []\n                }\n                data[resp[i].machine_type].push(resp[i])\n            }\n\n            setMachineData(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, }))\n        } finally {\n            if (Object.keys(machineData).length == 0) { contextShowLoadingFunc(false) }\n        }\n    }\n\n    const generateDataFollErr = async () => {\n        try {\n            if (linkUpId) {\n                let resp: DashboardFollowingLevel3[] = []\n                if (realtime) {\n                    resp = await DashboardFollErrService.DashboardLevel3Realtime(Number(linkUpId))\n                    onFilterDateChange({ start_date: new Date(), end_date: new Date() })\n                    localStorage.removeItem(\"cache\")\n                } else {\n                    const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                    const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                    resp = await DashboardFollErrService.DashboardLevel3(start_date, end_date, Number(linkUpId))\n                    localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, realtime }))\n                }\n\n                const data: { [id: string]: DashboardFollowingLevel3 } = {}\n                const newLevel2ByType: { [type: string]: DashboardLevel2State } = {}\n                for (let i = 0; i < resp.length; i++) {\n                    const row = resp[i]\n                    data[`${row.machine_id}`] = row\n\n                    const machine = Object.values(machineData).flat().find(m => m.machine_id === row.machine_id)\n                    if (!machine) continue\n\n                    const machineType = machine.machine_type\n\n                    if (!newLevel2ByType[machineType]) {\n                        newLevel2ByType[machineType] = {\n                            link_up_id: link_up.link_up_id,\n                            link_up: link_up.link_up,\n                            ool_following_error: 0,\n                            machine_ool: [],\n                        }\n                    }\n\n                    newLevel2ByType[machineType].ool_following_error += row.ool_following_error\n\n                    if (row.ool_following_error > machine.machine_alarm) {\n                        newLevel2ByType[machineType].machine_ool.push(machine.machine_id)\n                    }\n                }\n\n                for (const type in newLevel2ByType) {\n                    newLevel2ByType[type].machine_ool = Array.from(new Set(newLevel2ByType[type].machine_ool))\n                }\n\n                setLevel2Data(newLevel2ByType)\n                setTableDataFoll(data)\n            }\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, }))\n        }\n    }\n\n    const getStatusOOL = (value: number | undefined, item: MachineEntity) => {\n        const oolPressure = value ?? 0\n        let result = ''\n        if (oolPressure > item.machine_warn) {\n            result = styles.warningBackground\n        }\n        if (oolPressure > item.machine_alarm) {\n            result = styles.dangerBackground\n        }\n        return result\n    }\n\n    const generateData = async () => {\n        if (realtime) {\n            if (contextVersion.following != undefined) { await generateDataFollErr() }\n        } else {\n            resetAllData()\n            contextShowLoadingFunc(true)\n            // langsung tampilkan ketika udah ada yg selesai satu\n            const promise = []\n            if (contextVersion.following != undefined) { promise.push(generateDataFollErr()) }\n            try { await Promise.any(promise) } catch { }\n            contextShowLoadingFunc(false)\n        }\n    }\n\n    const resetAllData = () => {\n        setLevel2Data((prev) => {\n            const reset: typeof prev = {}\n            for (const type in prev) {\n                reset[type] = {\n                    ...prev[type],\n                    ool_following_error: 0,\n                    machine_ool: [],\n                }\n            }\n            return reset\n        })\n        setTableDataFoll({})\n    }\n\n    useEffect(() => {\n        if (Object.keys(machineData).length > 0) {\n            generateData()\n            if (realtime) {\n                let timeout: NodeJS.Timeout | null = null\n                const refreshfunc = () => {\n                    timeout = setTimeout(async () => { await generateData(); refreshfunc() }, 3000)\n                }\n                refreshfunc()\n                return () => {\n                    if (timeout != null) { clearTimeout(timeout) }\n                }\n            }\n        }\n    }, [contextAccessToken, realtime, linkUpId, machineData, refresh])\n\n    // generate once\n    useEffect(() => {\n        generateDataMachine()\n    }, [])\n    // ========================================= FUNCTIONS =========================================  //\n\n    if (Object.keys(machineData).length === 0) {\n        return (\n            <div className={styles.noData}>\n                <div className=\"flex flex-col items-center justify-center text-gray-400\">\n                    <img src={noDataImg} alt=\"no_data_img\" width={140} height={140} />\n                    <p className=\"mt-2 text-xl font-medium\">No Data Available</p>\n                </div>\n            </div>\n        )\n    }\n\n    return <div\n        className={styles.cardWrapper}\n        style={{\n            gridTemplateColumns: Object.keys(machineData).length === 1 ? '1fr' : 'repeat(2, 1fr)',\n            gridAutoRows: Object.keys(machineData).length <= 2 ? '1fr' : undefined\n        }}\n    >\n        {Object.keys(machineData).map((val) => {\n            const row = machineData[val]\n            return < div className={styles.cardParent} key={val} >\n\n                <div className={styles.cardParentHeader}>\n                    <div className={styles.titleHeader}>\n                        {val} Overall\n                    </div>\n\n                    <div className={styles.bodyHeader}>\n                        <div className={styles.bodyHeaderLeft}>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Total Machine OOL</div>\n                                <div className={styles.oolNumber}>{level2Data[val]?.machine_ool?.length ?? 0}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Total OOL Following Error</div>\n                                <div className={styles.oolNumber}>{level2Data[val]?.ool_following_error}</div>\n                            </div>\n                        </div>\n\n                        <div className={styles.bodyHeaderRight}>\n                            <div className={styles.imgWrapper}>\n                                <img src={followingErrorImage} alt=\"following error image\" className={styles.imgHeader} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className={styles.cardParentBodyWrapper}>\n                    <div className={styles.cardParentBody} style={{ gridTemplateColumns: Object.keys(machineData).length > 1 ? \"repeat(2, 1fr)\" : \"repeat(4, 1fr)\" }}>\n                        {row.map((m) => {\n                            const foll = tableDataFoll[`${m.machine_id}`]\n\n                            return <>\n                                {foll && (\n                                    <div key={m.machine_id} className={styles.gridItem}\n                                        onClick={() => navigate(`/dashboard/l4/${m.machine_id}`, {\n                                            state: {\n                                                dashboard_type: \"follerr\",\n                                                machine: m.machine,\n                                            },\n                                        })}>\n\n                                        <div className={styles.gridTitle}>\n                                            <div className={styles.gridTitleText}>\n                                                {m.machine}\n                                            </div>\n                                        </div>\n                                        <div className={styles.gridContentFoll}>\n                                            <div className={`${styles.gridContentTextFoll} ${getStatusOOL(foll.ool_following_error, m)}`} style={{ gridColumn: 'span 2' }}>\n                                                <div>OOL Following Error</div>\n                                                <div>{foll.ool_following_error}</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )}\n                            </>\n                        })}\n                    </div>\n                </div>\n\n            </div>\n        })}\n    </div>\n}\n\nexport default DashboardLevel3FollErrPage"],"names":["FollErrService","GetMachineConfig","machine_id","uri","BASE_URL","resp","FetchUtils","fetchAuth","status","Error","message","Array","isArray","data","i","length","_row$following_error_","_row$following_error_2","row","following_error_warn","following_error_alarm","UpsertMachineConfig","fields","method","body","JSON","stringify","headers","DashboardFollErrService","DashboardLevel1","start_date","end_date","business_unit_id","business_unit","machine_ool_following_error","ool_following_error","DashboardLevel2","link_up_id","link_up","DashboardLevel3","DashboardLevel4","following_error","undefined","Date","created_at","toString","DashboardLevel1Realtime","DashboardLevel2Realtime","DashboardLevel3Realtime","DashboardLevel4Realtime","MachineService","GetAllMachine","rawData","push","machine","machine_warn","machine_alarm","machine_type","gateway_host","gateway_port","pressure_slave_id","vibration_slave_id","AddMachine","UpdateMachine","DeleteMachine","_ref","realtime","refresh","filterDate","onFilterDateChange","context","useContext","AppContext","contextVersion","version","contextAccessToken","contextShowAlertFunc","contextShowLoadingFunc","navigate","stateShowLoading","useNavigate","location","useLocation","linkUpId","useParams","state","machineData","setMachineData","useState","tableDataFoll","setTableDataFoll","level2Data","setLevel2Data","generateDataFollErr","async","Number","localStorage","removeItem","formatDate","setItem","newLevel2ByType","Object","values","flat","find","m","machineType","machine_ool","type","from","Set","error","AlertEntity","level","getStatusOOL","value","item","oolPressure","result","styles","warningBackground","dangerBackground","generateData","following","resetAllData","promise","Promise","any","prev","reset","useEffect","keys","timeout","refreshfunc","setTimeout","clearTimeout","foll","filter","val","f","generateDataMachine","_jsx","className","noData","children","_jsxs","src","noDataImg","alt","width","height","cardWrapper","style","gridTemplateColumns","gridAutoRows","map","_level2Data$val$machi","_level2Data$val","_level2Data$val$machi2","_level2Data$val2","cardParent","cardParentHeader","titleHeader","bodyHeader","bodyHeaderLeft","itemHeaderLeft","oolNumber","bodyHeaderRight","imgWrapper","followingErrorImage","imgHeader","cardParentBodyWrapper","cardParentBody","_Fragment","gridItem","onClick","dashboard_type","gridTitle","gridTitleText","gridContentFoll","gridContentTextFoll","gridColumn"],"sourceRoot":""}