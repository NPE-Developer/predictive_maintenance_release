{"version":3,"file":"static/js/781.1dd0b0f3.chunk.js","mappings":"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","sources":["features/Dashboard/DashboardLevel3/DashboardLevel3Sensor.tsx","services/machine.ts","services/dashboard.ts"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\"\nimport AppContext from \"../../../context\"\nimport { useNavigate, useLocation, useParams } from \"react-router-dom\"\nimport { MachineService } from \"../../../services/machine\"\nimport { MachineEntity } from \"../../../entities/MachineEntity\"\nimport { AlertEntity } from \"../../../layouts/Alert/AlertEntity\"\nimport styles from './DashboardLevel3.module.css'\nimport { DashboardLevel3Entity } from \"../../../entities/DashboardEntity\"\nimport { DashboardRealtimeService, DashboardService } from \"../../../services/dashboard\"\nimport { formatDate } from \"date-fns\"\nimport vibrationImage from \"../../../assets/images/vibration_image.png\"\nimport cardImage from \"../../../assets/images/machine_image.png\"\nimport noDataImg from '../../../assets/images/no_data_image.png'\n\ninterface FilterType {\n    start_date: Date\n    end_date: Date\n}\n\ninterface DashboardLevel3SensorPageProps {\n    realtime: boolean\n    refresh: number\n    filterDate: FilterType\n    onFilterDateChange: (newFilter: FilterType) => void\n}\n\nconst DashboardLevel3SensorPage: React.FC<DashboardLevel3SensorPageProps> = ({ realtime, refresh, filterDate, onFilterDateChange }) => {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextVersion = context.version\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    const navigate = useNavigate()\n    const location = useLocation()\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n\n    // ========================================= STATE VIEW =========================================  //\n    const { linkUpId } = useParams()\n    const { link_up } = location.state || {}\n\n    const [machineData, setMachineData] = useState<{ [type: string]: MachineEntity[] }>({})\n    const [tableData, setTableData] = useState<{ [id: string]: DashboardLevel3Entity }>({})\n\n    interface DashboardLevel2State {\n        link_up_id: number,\n        link_up: string,\n\n        ool_pressure: number,\n        ool_vibration: number,\n        ool_temperature: number,\n\n        machine_ool: number[]\n    }\n\n    const [level2Data, setLevel2Data] = useState<{ [type: string]: DashboardLevel2State }>({})\n    // ========================================= STATE VIEW =========================================  //\n\n\n    // ========================================= FUNCTIONS =========================================  //\n    const generateDataMachine = async () => {\n        if (Object.keys(machineData).length == 0) { contextShowLoadingFunc(true) }\n        try {\n            const resp = await MachineService.GetAllMachine(linkUpId)\n\n            const data: { [type: string]: MachineEntity[] } = {}\n            for (let i = 0; i < resp.length; i++) {\n                if (data[resp[i].machine_type] == undefined) {\n                    data[resp[i].machine_type] = []\n                }\n                data[resp[i].machine_type].push(resp[i])\n            }\n\n            setMachineData(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, }))\n        } finally {\n            if (Object.keys(machineData).length == 0) { contextShowLoadingFunc(false) }\n        }\n    }\n\n    const generateDataServer = async () => {\n        try {\n            if (linkUpId) {\n                let resp: DashboardLevel3Entity[] = []\n                if (realtime) {\n                    resp = await DashboardRealtimeService.GetDashboardLevel3(Number(linkUpId))\n\n                    onFilterDateChange({ start_date: new Date(), end_date: new Date() })\n                    localStorage.removeItem(\"cache\")\n                } else {\n                    const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                    const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                    resp = await DashboardService.GetDashboardLevel3(Number(linkUpId), start_date, end_date)\n                    localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, realtime }))\n                }\n\n                const data: { [id: string]: DashboardLevel3Entity } = {}\n                const newLevel2ByType: { [type: string]: DashboardLevel2State } = {}\n                for (let i = 0; i < resp.length; i++) {\n                    const row = resp[i]\n                    data[`${row.machine_id}`] = row\n                    const machine = Object.values(machineData).flat().find(m => m.machine_id === row.machine_id)\n                    if (!machine) continue\n                    const machineType = machine.machine_type\n\n                    if (!newLevel2ByType[machineType]) {\n                        newLevel2ByType[machineType] = {\n                            link_up_id: link_up.link_up_id,\n                            link_up: link_up.link_up,\n                            ool_pressure: 0,\n                            ool_vibration: 0,\n                            ool_temperature: 0,\n                            machine_ool: [],\n                        }\n                    }\n\n                    newLevel2ByType[machineType].ool_pressure += row.ool_pressure\n                    newLevel2ByType[machineType].ool_vibration += row.ool_vibration\n                    newLevel2ByType[machineType].ool_temperature += row.ool_temperature\n\n                    if (\n                        row.ool_pressure > machine.machine_alarm ||\n                        row.ool_vibration > machine.machine_alarm ||\n                        row.ool_temperature > machine.machine_alarm\n                    ) {\n                        newLevel2ByType[machineType].machine_ool.push(machine.machine_id)\n                    }\n                }\n\n                for (const type in newLevel2ByType) {\n                    newLevel2ByType[type].machine_ool = Array.from(new Set(newLevel2ByType[type].machine_ool))\n                }\n\n                setLevel2Data(newLevel2ByType)\n                setTableData(data)\n            }\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3 }))\n        }\n    }\n\n    const generateData = async () => {\n        if (realtime) {\n            if (contextVersion.server != undefined) { await generateDataServer() }\n        } else {\n            resetAllData()\n            contextShowLoadingFunc(true)\n            const promise = []\n            if (contextVersion.server != undefined) { promise.push(generateDataServer()) }\n            try { await Promise.any(promise) } catch { }\n            contextShowLoadingFunc(false)\n        }\n    }\n\n    const resetAllData = () => {\n        setLevel2Data((prev) => {\n            const reset: typeof prev = {}\n            for (const type in prev) {\n                reset[type] = {\n                    ...prev[type],\n                    ool_pressure: 0,\n                    ool_vibration: 0,\n                    ool_temperature: 0,\n                    machine_ool: [],\n                }\n            }\n            return reset\n        })\n        setTableData({})\n    }\n\n    const getStatusOOL = (value: number | undefined, item: MachineEntity) => {\n        const oolPressure = value ?? 0\n        let result = ''\n        if (oolPressure > item.machine_warn) {\n            result = styles.warningBackground\n        }\n        if (oolPressure > item.machine_alarm) {\n            result = styles.dangerBackground\n        }\n        return result\n    }\n\n    useEffect(() => {\n        if (Object.keys(machineData).length > 0) {\n            generateData()\n            if (realtime) {\n                let timeout: NodeJS.Timeout | null = null\n                const refreshfunc = () => {\n                    timeout = setTimeout(async () => { await generateData(); refreshfunc() }, 3000)\n                }\n                refreshfunc()\n                return () => {\n                    if (timeout != null) { clearTimeout(timeout) }\n                }\n            }\n        }\n    }, [contextAccessToken, realtime, linkUpId, machineData, refresh])\n\n    // generate once\n    useEffect(() => {\n        generateDataMachine()\n    }, [])\n    // ========================================= FUNCTIONS =========================================  //\n\n    if (Object.keys(machineData).length === 0) {\n        return (\n            <div className={styles.noData}>\n                <div className=\"flex flex-col items-center justify-center text-gray-400\">\n                    <img src={noDataImg} alt=\"no_data_img\" width={140} height={140} />\n                    <p className=\"mt-2 text-xl font-medium\">No Data Available</p>\n                </div>\n            </div>\n        )\n    }\n\n    return <div\n        className={styles.cardWrapper}\n        style={{\n            gridTemplateColumns: Object.keys(machineData).length === 1 ? '1fr' : 'repeat(2, 1fr)',\n            gridAutoRows: Object.keys(machineData).length <= 2 ? '1fr' : undefined\n        }}\n    >\n        {Object.keys(machineData).map((val) => {\n            const row = machineData[val]\n            return <div className={styles.cardParent} key={val} >\n\n                <div className={styles.cardParentHeader}>\n                    <div className={styles.titleHeader}>\n                        {val} Overall\n                    </div>\n\n                    <div className={styles.bodyHeader}>\n                        <div className={styles.bodyHeaderLeft}>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Total Machine OOL</div>\n                                <div className={styles.oolNumber}>{level2Data[val]?.machine_ool?.length ?? 0}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Total OOL Pressure</div>\n                                <div className={styles.oolNumber}>{level2Data[val]?.ool_pressure}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Total OOL Vibration</div>\n                                <div className={styles.oolNumber}>{level2Data[val]?.ool_vibration}</div>\n                            </div>\n                            <div className={styles.itemHeaderLeft}>\n                                <div>Total OOL Temperature</div>\n                                <div className={styles.oolNumber}>{level2Data[val]?.ool_temperature}</div>\n                            </div>\n                        </div>\n\n                        <div className={styles.bodyHeaderRight}>\n                            <div className={styles.imgWrapper}>\n                                <img src={vibrationImage} alt=\"vibration image\" className={styles.imgHeader} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className={styles.cardParentBodyWrapper}>\n                    <div className={styles.cardParentBody} style={{ gridTemplateColumns: Object.keys(machineData).length > 1 ? \"repeat(2, 1fr)\" : \"repeat(4, 1fr)\" }}>\n                        {row.map((m) => {\n                            const data = tableData[`${m.machine_id}`]\n\n                            return <div key={m.machine_id} className={styles.gridItem}\n                                onClick={() => navigate(`/dashboard/l4/${m.machine_id}`, {\n                                    state: {\n                                        dashboard_type: \"sensor\",\n                                        machine: m.machine,\n                                    },\n                                })}>\n\n                                <div className={styles.gridTitle}>\n                                    <div className={styles.gridTitleText}>\n                                        {m.machine}\n                                    </div>\n                                </div>\n                                <div className={styles.gridContent}>\n\n                                    {data != undefined\n                                        ? <>\n                                            <div className={`${styles.gridContentText} ${getStatusOOL(data.ool_pressure, m)}`}>\n                                                <div>OOL Pressure</div>\n                                                <div>{data.ool_pressure}</div>\n                                            </div>\n                                            <div className={`${styles.gridContentText} ${getStatusOOL(data.ool_vibration, m)}`}>\n                                                <div>OOL Vibration</div>\n                                                <div>{data.ool_vibration}</div>\n                                            </div>\n                                            <div className={`${styles.gridContentText} ${getStatusOOL(data.ool_temperature, m)}`} style={{ gridColumn: 'span 2' }}>\n                                                <div>OOL Temperature</div>\n                                                <div>{data.ool_temperature}</div>\n                                            </div>\n                                        </>\n                                        : <></>}\n\n                                </div>\n                                <div className={styles.gridFooter}>\n                                    {data != undefined && <>\n                                        {data.sensor_vibration_connected !== undefined && data.sensor_vibration_connected !== null && (\n                                            <div className={styles.gridFooterItem}>\n                                                <p>Vibration</p>\n                                                <div className={`${styles.footerIndicator} ${data.sensor_vibration_connected ? styles.connected : styles.disconnected}`}></div>\n                                            </div>\n                                        )}\n\n                                        <div style={{ width: \"3px\", height: \"80%\", backgroundColor: \"#2d545e\" }}></div>\n\n                                        {data.sensor_pressure_connected !== undefined && data.sensor_pressure_connected !== null && (\n                                            <div className={styles.gridFooterItem}>\n                                                <p>Pressure</p>\n                                                <div className={`${styles.footerIndicator} ${data.sensor_pressure_connected ? styles.connected : styles.disconnected}`}></div>\n                                            </div>\n                                        )}\n                                    </>}\n                                </div>\n                            </div>\n                        })}\n                    </div>\n                </div>\n\n            </div>\n        })}\n    </div>\n}\n\nexport default DashboardLevel3SensorPage","import { BASE_URL } from \"../constants\"\nimport { MachineEntity } from \"../entities/MachineEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\nclass MachineService {\n    static async GetAllMachine(link_up_id?: string): Promise<MachineEntity[]> {\n        let uri = `${BASE_URL}/api/v1/machine`\n        if (link_up_id != null){\n            uri += `?link_up_id=${link_up_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const rawData = Array.isArray(resp.data) ? resp.data : []\n        const data: MachineEntity[] = []\n        for (let i = 0; i < rawData.length; i++) {\n            data.push({\n                machine_id: rawData[i].machine_id,\n                machine: rawData[i].machine,\n                machine_warn: rawData[i].machine_warn,\n                machine_alarm: rawData[i].machine_alarm,\n                link_up: rawData[i].link_up,\n                machine_type: rawData[i].machine_type,\n                gateway_host: rawData[i].gateway_host,\n                gateway_port: rawData[i].gateway_port,\n                pressure_slave_id: rawData[i].pressure_slave_id,\n                vibration_slave_id: rawData[i].vibration_slave_id,\n            })\n        }\n\n        return data\n    }\n\n    static async AddMachine(data: {\n        machine: string,\n        machine_warn: number,\n        machine_alarm: number,\n        link_up_id: number,\n        machine_type: string,\n        gateway_host: string,\n        gateway_port: string,\n        pressure_slave_id?: number,\n        vibration_slave_id?: number,\n    }): Promise<{ message: string }> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/machine`,\n            {\n                method: 'POST',\n                body: JSON.stringify({ ...data }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async UpdateMachine(machine_id: number, fields: {\n        machine?: string,\n        machine_warn?: number,\n        machine_alarm?: number,\n        link_up_id?: number,\n        machine_type?: string,\n        gateway_host?: string,\n        gateway_port?: string,\n        pressure_slave_id?: number,\n        vibration_slave_id?: number,\n    }): Promise<{ message: string }> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/machine`,\n            {\n                method: 'PATCH',\n                body: JSON.stringify({ machine_id, fields }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n\n    static async DeleteMachine(machine_id: number): Promise<{ message: string }> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/machine`,\n            {\n                method: 'DELETE',\n                body: JSON.stringify({ machine_id: machine_id }),\n                headers: { \"Content-Type\": \"application/json\" }\n            }\n        )\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n}\n\nexport { MachineService }","import { BASE_URL } from \"../constants\"\nimport { DashboardLevel1Entity, DashboardLevel2Entity, DashboardLevel3Entity, DashboardV4PressureEntity, DashboardV4VibrationEntity } from \"../entities/DashboardEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\nclass DashboardService {\n    static async GetDashboardLevel1(start_date: string, end_date: string): Promise<DashboardLevel1Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l1?start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel1Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n            \n            result.push({\n                business_unit_id: row.business_unit_id,\n                business_unit: row.business_unit,\n                business_unit_warn: row.business_unit_warn,\n                business_unit_alarm: row.business_unit_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel2(business_unit_id: number, start_date: string, end_date: string): Promise<DashboardLevel2Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l2?business_unit_id=${encodeURIComponent(business_unit_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel2Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            result.push({\n                link_up_id: row.link_up_id,\n                link_up: row.link_up,\n                link_up_warn: row.link_up_warn,\n                link_up_alarm: row.link_up_alarm,\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel3(link_up_id: number, start_date: string, end_date: string): Promise<DashboardLevel3Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l3?link_up_id=${encodeURIComponent(link_up_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel3Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            result.push({\n                machine_id: row.machine_id,\n                machine: row.machine,\n                machine_warn: row.machine_warn,\n                machine_alarm: row.machine_alarm,\n                machine_type: row.machine_type,\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel4Pressure(machine_id: number, start_date: string, end_date: string): Promise<DashboardV4PressureEntity[]> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/pressure/l4?machine_id=${encodeURIComponent(machine_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const rawData = Array.isArray(resp.data) ? resp.data : []\n        const data: DashboardV4PressureEntity[] = []\n\n        for (let i = 0; i < rawData.length; i++) {\n            data.push({\n                pressure: rawData[i].pressure,\n                pressure_max_alarm: rawData[i].pressure_max_alarm,\n                pressure_max_warn: rawData[i].pressure_max_warn,\n                pressure_min_alarm: rawData[i].pressure_min_alarm,\n                pressure_min_warn: rawData[i].pressure_min_warn,\n                timestamp: rawData[i].timestamp,\n            })\n        }\n\n        return data\n    }\n    \n    static async GetDashboardLevel4Vibration(machine_id: number, start_date: string, end_date: string): Promise<DashboardV4VibrationEntity[]> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/vibration/l4?machine_id=${encodeURIComponent(machine_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const rawData = Array.isArray(resp.data) ? resp.data : []\n        const data: DashboardV4VibrationEntity[] = []\n\n        for (let i = 0; i < rawData.length; i++) {\n            data.push({\n                x: rawData[i].x,\n                x_base: rawData[i].x_base,\n                x_warn: rawData[i].x_warn,\n                x_alarm: rawData[i].x_alarm,\n                z: rawData[i].z,\n                z_base: rawData[i].z_base,\n                z_warn: rawData[i].z_warn,\n                z_alarm: rawData[i].z_alarm,\n                x_acc: rawData[i].x_acc,\n                x_acc_base: rawData[i].x_acc_base,\n                x_acc_warn: rawData[i].x_acc_warn,\n                x_acc_alarm: rawData[i].x_acc_alarm,\n                z_acc: rawData[i].z_acc,\n                z_acc_base: rawData[i].z_acc_base,\n                z_acc_warn: rawData[i].z_acc_warn,\n                z_acc_alarm: rawData[i].z_acc_alarm,\n                temp: rawData[i].temp,\n                temp_warn: rawData[i].temp_warn,\n                temp_alarm: rawData[i].temp_alarm,\n                timestamp: rawData[i].timestamp,\n            })\n        }\n\n        return data\n    }\n}\n\nclass DashboardRealtimeService {\n    static async GetDashboardLevel1(): Promise<DashboardLevel1Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l1`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel1Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            const mergedArray = row.machine_ool_pressure.concat(row.machine_ool_vibration)\n            const mergedSet = Array.from(new Set(mergedArray))\n\n            result.push({\n                business_unit_id: row.business_unit_id,\n                business_unit: row.business_unit,\n                business_unit_warn: row.business_unit_warn,\n                business_unit_alarm: row.business_unit_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n                \n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel2(business_unit_id: number): Promise<DashboardLevel2Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l2?business_unit_id=${encodeURIComponent(business_unit_id)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel2Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            result.push({\n                link_up_id: row.link_up_id,\n                link_up: row.link_up,\n                link_up_warn: row.link_up_warn,\n                link_up_alarm: row.link_up_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel3(link_up_id: number,): Promise<DashboardLevel3Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l3?link_up_id=${encodeURIComponent(link_up_id)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel3Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            result.push({\n                machine_id: row.machine_id,\n                machine: row.machine,\n                machine_type: row.machine_type,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_warn: row.machine_warn,\n                machine_alarm: row.machine_alarm,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n            })\n        }\n\n        return result\n    }\n}\n\nexport { DashboardService, DashboardRealtimeService }"],"names":["_ref","realtime","refresh","filterDate","onFilterDateChange","context","useContext","AppContext","contextVersion","version","contextAccessToken","contextShowAlertFunc","contextShowLoadingFunc","navigate","stateShowLoading","useNavigate","location","useLocation","linkUpId","useParams","link_up","state","machineData","setMachineData","useState","tableData","setTableData","level2Data","setLevel2Data","generateDataServer","async","resp","DashboardRealtimeService","GetDashboardLevel3","Number","start_date","Date","end_date","localStorage","removeItem","formatDate","DashboardService","setItem","JSON","stringify","data","newLevel2ByType","i","length","row","machine_id","machine","Object","values","flat","find","m","machineType","machine_type","link_up_id","ool_pressure","ool_vibration","ool_temperature","machine_ool","machine_alarm","push","type","Array","from","Set","error","AlertEntity","message","Error","toString","level","generateData","undefined","server","resetAllData","promise","Promise","any","prev","reset","getStatusOOL","value","item","oolPressure","result","machine_warn","styles","warningBackground","dangerBackground","useEffect","keys","timeout","refreshfunc","setTimeout","clearTimeout","MachineService","GetAllMachine","generateDataMachine","_jsx","className","noData","children","_jsxs","src","noDataImg","alt","width","height","cardWrapper","style","gridTemplateColumns","gridAutoRows","map","val","_level2Data$val$machi","_level2Data$val","_level2Data$val$machi2","_level2Data$val2","_level2Data$val3","_level2Data$val4","cardParent","cardParentHeader","titleHeader","bodyHeader","bodyHeaderLeft","itemHeaderLeft","oolNumber","bodyHeaderRight","imgWrapper","vibrationImage","imgHeader","cardParentBodyWrapper","cardParentBody","gridItem","onClick","dashboard_type","gridTitle","gridTitleText","gridContent","_Fragment","gridContentText","gridColumn","gridFooter","sensor_vibration_connected","gridFooterItem","footerIndicator","connected","disconnected","backgroundColor","sensor_pressure_connected","uri","BASE_URL","FetchUtils","fetchAuth","status","rawData","isArray","gateway_host","gateway_port","pressure_slave_id","vibration_slave_id","AddMachine","method","body","headers","UpdateMachine","fields","DeleteMachine","GetDashboardLevel1","encodeURIComponent","machine_ool_pressure","machine_ool_vibration","business_unit_id","business_unit","business_unit_warn","business_unit_alarm","sensor_vibration_total","sensor_pressure_total","GetDashboardLevel2","link_up_warn","link_up_alarm","GetDashboardLevel4Pressure","pressure","pressure_max_alarm","pressure_max_warn","pressure_min_alarm","pressure_min_warn","timestamp","GetDashboardLevel4Vibration","x","x_base","x_warn","x_alarm","z","z_base","z_warn","z_alarm","x_acc","x_acc_base","x_acc_warn","x_acc_alarm","z_acc","z_acc_base","z_acc_warn","z_acc_alarm","temp","temp_warn","temp_alarm","mergedArray","concat"],"sourceRoot":""}