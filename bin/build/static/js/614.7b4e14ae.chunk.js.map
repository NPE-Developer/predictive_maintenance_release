{"version":3,"file":"static/js/614.7b4e14ae.chunk.js","mappings":"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","sources":["services/following_error.ts","services/dashboard.ts","webpack://nagamas_frontend/./src/features/Dashboard/DashboardLevel1/DashboardLevel1.module.css?db58","features/Dashboard/DashboardLevel1/DashboardLevel1.tsx"],"sourcesContent":["import { BASE_URL } from \"../constants\"\nimport { MachineConfigFoll, FormMachineConfigFoll, FollowingErrorData, DashboardFollowingLevel1, DashboardFollowingLevel2, DashboardFollowingLevel3, DashboardFollowingLevel4, } from \"../entities/FollowingErrorEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\n// TODO unimplemented\n//  \"/api/extension/following_error/v1/data\" GetRawFollErrDataController\n\nclass FollErrService {\n    static async GetMachineConfig(machine_id?: number): Promise<MachineConfigFoll[]> {\n        let uri = `${BASE_URL}/api/extension/following_error/v1/machine`\n        if (machine_id != null) {\n            uri += `?machine_id=${machine_id}`\n        }\n\n        const resp = await FetchUtils.fetchAuth(uri)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        if (!Array.isArray(resp.data)) {\n            throw new Error(\"invalid machine config response\")\n        }\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n            if (typeof row.machine_id != \"number\") { throw new Error(\"invalid machine_id value\") }\n            if (typeof (row.following_error_warn ?? 0) != \"number\") { throw new Error(\"invalid following_error_warn value\") }\n            if (typeof (row.following_error_alarm ?? 0) != \"number\") { throw new Error(\"invalid following_error_alarm value\") }\n        }\n\n        return resp.data\n    }\n\n    static async UpsertMachineConfig(machine_id: number, fields: FormMachineConfigFoll): Promise<{ message: string }> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/machine`, {\n            method: 'PATCH',\n            body: JSON.stringify({ machine_id, fields }),\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        return resp\n    }\n}\n\nclass DashboardFollErrService {\n    static async DashboardLevel1(start_date: string, end_date: string): Promise<DashboardFollowingLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/l1?start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2(start_date: string, end_date: string, business_unit_id: number): Promise<DashboardFollowingLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/l2?business_unit_id=${business_unit_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3(start_date: string, end_date: string, link_up_id: number): Promise<DashboardFollowingLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/l3?link_up_id=${link_up_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].machine_id != \"number\") { throw new Error(\"invalid machine_id value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4(start_date: string, end_date: string, machine_id: number): Promise<DashboardFollowingLevel4[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/data?machine_id=${machine_id}&start_date=${start_date}&end_date=${end_date}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel4[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].following_error != \"number\") { throw new Error(\"invalid following_error value\") }\n            if (data[i].following_error_warn != undefined && typeof data[i].following_error_warn != \"number\") { throw new Error(\"invalid following_error_warn value\") }\n            if (data[i].following_error_alarm != undefined && typeof data[i].following_error_alarm != \"number\") { throw new Error(\"invalid following_error_alarm value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n\n\n\n    static async DashboardLevel1Realtime(): Promise<DashboardFollowingLevel1[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/l1/realtime`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel1[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].business_unit_id != \"number\") { throw new Error(\"invalid business_unit_id value\") }\n            if (typeof data[i].business_unit != \"string\") { throw new Error(\"invalid business_unit value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel2Realtime(business_unit_id: number): Promise<DashboardFollowingLevel2[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/l2/realtime?business_unit_id=${business_unit_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel2[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].link_up_id != \"number\") { throw new Error(\"invalid link_up_id value\") }\n            if (typeof data[i].link_up != \"string\") { throw new Error(\"invalid link_up value\") }\n            if (!Array.isArray(data[i].machine_ool_following_error)) { throw new Error(\"invalid machine_ool_following_error value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel3Realtime(link_up_id: number): Promise<DashboardFollowingLevel3[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/extension/following_error/v1/l3/realtime?link_up_id=${link_up_id}`)\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel3[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].machine_id != \"number\") { throw new Error(\"invalid machine_id value\") }\n            if (typeof data[i].ool_following_error != \"number\") { throw new Error(\"invalid ool_following_error value\") }\n        }\n\n        return data\n    }\n\n    static async DashboardLevel4Realtime(machine_id: number): Promise<DashboardFollowingLevel4[]> {\n        const resp = await FetchUtils.fetchAuth(\n            `${BASE_URL}/api/extension/following_error/v1/data/realtime?machine_id=${machine_id}`\n        )\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const data: DashboardFollowingLevel4[] = Array.isArray(resp.data) ? resp.data : []\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i].following_error != \"number\") { throw new Error(\"invalid following_error value\") }\n            if (data[i].following_error_warn != undefined && typeof data[i].following_error_warn != \"number\") { throw new Error(\"invalid following_error_warn value\") }\n            if (data[i].following_error_alarm != undefined && typeof data[i].following_error_alarm != \"number\") { throw new Error(\"invalid following_error_alarm value\") }\n            if (new Date(data[i].created_at).toString() == 'Invalid Date') { throw new Error(\"invalid created_at value\") } else { data[i].created_at = new Date(data[i].created_at) }\n        }\n\n        return data\n    }\n}\n\nexport { FollErrService, DashboardFollErrService }","import { BASE_URL } from \"../constants\"\nimport { DashboardLevel1Entity, DashboardLevel2Entity, DashboardLevel3Entity, DashboardV4PressureEntity, DashboardV4VibrationEntity } from \"../entities/DashboardEntity\"\nimport FetchUtils from \"../utils/fetch\"\n\nclass DashboardService {\n    static async GetDashboardLevel1(start_date: string, end_date: string): Promise<DashboardLevel1Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l1?start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel1Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n            \n            result.push({\n                business_unit_id: row.business_unit_id,\n                business_unit: row.business_unit,\n                business_unit_warn: row.business_unit_warn,\n                business_unit_alarm: row.business_unit_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel2(business_unit_id: number, start_date: string, end_date: string): Promise<DashboardLevel2Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l2?business_unit_id=${encodeURIComponent(business_unit_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel2Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            result.push({\n                link_up_id: row.link_up_id,\n                link_up: row.link_up,\n                link_up_warn: row.link_up_warn,\n                link_up_alarm: row.link_up_alarm,\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel3(link_up_id: number, start_date: string, end_date: string): Promise<DashboardLevel3Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/l3?link_up_id=${encodeURIComponent(link_up_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel3Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            result.push({\n                machine_id: row.machine_id,\n                machine: row.machine,\n                machine_warn: row.machine_warn,\n                machine_alarm: row.machine_alarm,\n                machine_type: row.machine_type,\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel4Pressure(machine_id: number, start_date: string, end_date: string): Promise<DashboardV4PressureEntity[]> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/pressure/l4?machine_id=${encodeURIComponent(machine_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const rawData = Array.isArray(resp.data) ? resp.data : []\n        const data: DashboardV4PressureEntity[] = []\n\n        for (let i = 0; i < rawData.length; i++) {\n            data.push({\n                pressure: rawData[i].pressure,\n                pressure_max_alarm: rawData[i].pressure_max_alarm,\n                pressure_max_warn: rawData[i].pressure_max_warn,\n                pressure_min_alarm: rawData[i].pressure_min_alarm,\n                pressure_min_warn: rawData[i].pressure_min_warn,\n                timestamp: rawData[i].timestamp,\n            })\n        }\n\n        return data\n    }\n    \n    static async GetDashboardLevel4Vibration(machine_id: number, start_date: string, end_date: string): Promise<DashboardV4VibrationEntity[]> {\n        let resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/vibration/l4?machine_id=${encodeURIComponent(machine_id)}&start_date=${encodeURIComponent(start_date)}&end_date=${encodeURIComponent(end_date)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(resp.message)\n        }\n\n        const rawData = Array.isArray(resp.data) ? resp.data : []\n        const data: DashboardV4VibrationEntity[] = []\n\n        for (let i = 0; i < rawData.length; i++) {\n            data.push({\n                x: rawData[i].x,\n                x_base: rawData[i].x_base,\n                x_warn: rawData[i].x_warn,\n                x_alarm: rawData[i].x_alarm,\n                z: rawData[i].z,\n                z_base: rawData[i].z_base,\n                z_warn: rawData[i].z_warn,\n                z_alarm: rawData[i].z_alarm,\n                x_acc: rawData[i].x_acc,\n                x_acc_base: rawData[i].x_acc_base,\n                x_acc_warn: rawData[i].x_acc_warn,\n                x_acc_alarm: rawData[i].x_acc_alarm,\n                z_acc: rawData[i].z_acc,\n                z_acc_base: rawData[i].z_acc_base,\n                z_acc_warn: rawData[i].z_acc_warn,\n                z_acc_alarm: rawData[i].z_acc_alarm,\n                temp: rawData[i].temp,\n                temp_warn: rawData[i].temp_warn,\n                temp_alarm: rawData[i].temp_alarm,\n                timestamp: rawData[i].timestamp,\n            })\n        }\n\n        return data\n    }\n}\n\nclass DashboardRealtimeService {\n    static async GetDashboardLevel1(): Promise<DashboardLevel1Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l1`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel1Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            const mergedArray = row.machine_ool_pressure.concat(row.machine_ool_vibration)\n            const mergedSet = Array.from(new Set(mergedArray))\n\n            result.push({\n                business_unit_id: row.business_unit_id,\n                business_unit: row.business_unit,\n                business_unit_warn: row.business_unit_warn,\n                business_unit_alarm: row.business_unit_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n                \n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel2(business_unit_id: number): Promise<DashboardLevel2Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l2?business_unit_id=${encodeURIComponent(business_unit_id)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel2Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            if (!Array.isArray(row.machine_ool_pressure)) {\n                throw new Error(\"invalid ool pressure data\")\n            }\n            if (!Array.isArray(row.machine_ool_vibration)) {\n                throw new Error(\"invalid ool vibration data\")\n            }\n\n            result.push({\n                link_up_id: row.link_up_id,\n                link_up: row.link_up,\n                link_up_warn: row.link_up_warn,\n                link_up_alarm: row.link_up_alarm,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_ool_pressure: row.machine_ool_pressure,\n                machine_ool_vibration: row.machine_ool_vibration,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_vibration_total: row.sensor_vibration_total,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n                sensor_pressure_total: row.sensor_pressure_total,\n            })\n        }\n\n        return result\n    }\n\n    static async GetDashboardLevel3(link_up_id: number,): Promise<DashboardLevel3Entity[]> {\n        const resp = await FetchUtils.fetchAuth(`${BASE_URL}/api/v1/dashboard/realtime/l3?link_up_id=${encodeURIComponent(link_up_id)}`)\n\n        if (resp.status !== 200) {\n            throw new Error(\"Failed to fetch dashboard data.\")\n        }\n\n        const result: DashboardLevel3Entity[] = []\n        for (let i = 0; i < resp.data.length; i++) {\n            const row = resp.data[i]\n\n            result.push({\n                machine_id: row.machine_id,\n                machine: row.machine,\n                machine_type: row.machine_type,\n\n                ool_pressure: row.ool_pressure,\n                ool_vibration: row.ool_vibration,\n                ool_temperature: row.ool_temperature,\n\n                machine_warn: row.machine_warn,\n                machine_alarm: row.machine_alarm,\n\n                sensor_vibration_connected: row.sensor_vibration_connected,\n                sensor_pressure_connected: row.sensor_pressure_connected,\n            })\n        }\n\n        return result\n    }\n}\n\nexport { DashboardService, DashboardRealtimeService }","// extracted by mini-css-extract-plugin\nexport default {\"cardHeader\":\"DashboardLevel1_cardHeader__WTdRr\",\"leftSection\":\"DashboardLevel1_leftSection__xh0G2\",\"inputGroup\":\"DashboardLevel1_inputGroup__yHIan\",\"switchGroup\":\"DashboardLevel1_switchGroup__nTNic\",\"switch\":\"DashboardLevel1_switch__JDtsJ\",\"slider\":\"DashboardLevel1_slider__KMulU\",\"autoScroll\":\"DashboardLevel1_autoScroll__l6W36\",\"checkAuto\":\"DashboardLevel1_checkAuto__5yGWC\",\"rightSection\":\"DashboardLevel1_rightSection__v9TCC\",\"buttonFooter\":\"DashboardLevel1_buttonFooter__NyUZK\",\"cardWrapperContainer\":\"DashboardLevel1_cardWrapperContainer__h9rRB\",\"cardContainer\":\"DashboardLevel1_cardContainer__leyHo\",\"scrollContentWrapper\":\"DashboardLevel1_scrollContentWrapper__k1JYi\",\"scrollachievement\":\"DashboardLevel1_scrollachievement__uGB2r\",\"scrollContentWrapperStop\":\"DashboardLevel1_scrollContentWrapperStop__MHTES\",\"scrollContent\":\"DashboardLevel1_scrollContent__claCg\",\"scrollContentStop\":\"DashboardLevel1_scrollContentStop__HPMWN\",\"cardItem1\":\"DashboardLevel1_cardItem1__9VFpx\",\"cardItem1Header\":\"DashboardLevel1_cardItem1Header__AsjHk\",\"cardTitle\":\"DashboardLevel1_cardTitle__MDvGF\",\"cardItem1Body\":\"DashboardLevel1_cardItem1Body__GJdh+\",\"cardSubItem\":\"DashboardLevel1_cardSubItem__sOyFc\",\"cardSubItemHeader\":\"DashboardLevel1_cardSubItemHeader__lTxEm\",\"cardSubItemBody\":\"DashboardLevel1_cardSubItemBody__ae0PO\",\"cardSubItemFooter\":\"DashboardLevel1_cardSubItemFooter__akfah\",\"itemValue\":\"DashboardLevel1_itemValue__4ZBB6\",\"itemNormal\":\"DashboardLevel1_itemNormal__f7QQY\",\"itemWarning\":\"DashboardLevel1_itemWarning__hU70I\",\"itemAlarm\":\"DashboardLevel1_itemAlarm__OdO+X\",\"cardItem1Footer\":\"DashboardLevel1_cardItem1Footer__la02S\",\"cardItem\":\"DashboardLevel1_cardItem__xyKcI\",\"cardItemHeader\":\"DashboardLevel1_cardItemHeader__CtstV\",\"cardItemTitle\":\"DashboardLevel1_cardItemTitle__EayNW\",\"cardItemBody\":\"DashboardLevel1_cardItemBody__xnCCc\",\"runningBackground\":\"DashboardLevel1_runningBackground__lsvay\",\"warningBackground\":\"DashboardLevel1_warningBackground__Ri01a\",\"blinkWarning\":\"DashboardLevel1_blinkWarning__wEzqj\",\"dangerBackground\":\"DashboardLevel1_dangerBackground__kEFb7\",\"blinkDanger\":\"DashboardLevel1_blinkDanger__z5jd2\"};","import { useState, useEffect, useContext } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport AppContext from \"../../../context\"\nimport { AlertEntity } from \"../../../layouts/Alert/AlertEntity\"\nimport { DashboardRealtimeService, DashboardService } from \"../../../services/dashboard\"\nimport { DashboardLevel1Entity } from \"../../../entities/DashboardEntity\"\nimport { formatDate } from \"date-fns\"\n\nimport styles from \"./DashboardLevel1.module.css\"\nimport { TbRefreshDot } from \"react-icons/tb\"\nimport { BusinessUnitConfigCenterline, DashboardCenterlineLevel1 } from \"../../../entities/CenterlineEntity\"\nimport { CenterlineService, DashboardCenterlineService } from \"../../../services/centerline\"\nimport { DashboardFollowingLevel1 } from \"../../../entities/FollowingErrorEntity\"\nimport { DashboardFollErrService } from \"../../../services/following_error\"\nimport { BusinessUnitEntity } from \"../../../entities/BusinessUnitEntity\"\nimport { BusinessUnitService } from \"../../../services/business_unit\"\nimport { BusinessUnitConfigCriticalRodBreak, DashboardCriticalRodBreakLevel1 } from \"../../../entities/CriticalRodBreakEntity\"\nimport { CriticalRodBreakService, DashboardCriticalRodBreakService } from \"../../../services/critical_rod_break\"\nimport { BusinessUnitConfigSafety, DashboardSafetyLevel1 } from \"../../../entities/SafetyEntity\"\nimport { BusinessUnitConfigQualityFactor, DashboardQualityFactorLevel1 } from \"../../../entities/QualityFactorEntity\"\nimport { DashboardSafetyService, SafetyService } from \"../../../services/safety\"\nimport { DashboardQualityFactorService, QualityFactorService } from \"../../../services/quality_factor\"\nimport { DashboardElectricService, ElectricService } from \"../../../services/electric\"\nimport { BusinessUnitConfigElectric, DashboardElectricLevel1 } from \"../../../entities/ElectricEntity\"\nimport { PiPlugsConnected } from \"react-icons/pi\"\n\nexport default function Dashboard() {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextVersion = context.version\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    const navigate = useNavigate()\n    const location = useLocation()\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n    interface BusinessUnitCombined extends BusinessUnitEntity, BusinessUnitConfigCenterline, BusinessUnitConfigCriticalRodBreak, BusinessUnitConfigSafety, BusinessUnitConfigQualityFactor, BusinessUnitConfigElectric { }\n\n    // ========================================= STATE VIEW =========================================  //\n    interface FilterType { start_date: Date; end_date: Date; }\n\n    const cache = (() => {\n        const cache = localStorage.getItem(\"cache\")\n        if (cache == null) {\n            return { start_date: new Date(), end_date: new Date(), isRealtime: true }\n        } else {\n            const data = JSON.parse(cache)\n            return {\n                start_date: data.start_date,\n                end_date: data.end_date,\n                isRealtime: data.isRealtime,\n            }\n        }\n    })()\n\n    const [filterDate, setFilterDate] = useState<FilterType>({ start_date: cache.start_date, end_date: cache.end_date })\n    const [isRealtime, setIsRealtime] = useState<boolean>(cache.isRealtime)\n\n    const [buData, setBuData] = useState<BusinessUnitCombined[]>([])\n    const [tableData, setTableData] = useState<{ [id: string]: DashboardLevel1Entity | undefined }>({})\n    const [tableDataCenterline, setTableDataCenterline] = useState<{ [id: string]: DashboardCenterlineLevel1 | undefined }>({})\n    const [tableDataCriticalRodBreak, setTableDataCriticalRodBreak] = useState<{ [id: string]: DashboardCriticalRodBreakLevel1 | undefined }>({})\n    const [tableDataSafety, setTableDataSafety] = useState<{ [id: string]: DashboardSafetyLevel1 | undefined }>({})\n    const [tableDataElectric, setTableDataElectric] = useState<{ [id: string]: DashboardElectricLevel1 | undefined }>({})\n    const [tableDataQualityFactor, setTableDataQualityFactor] = useState<{ [id: string]: DashboardQualityFactorLevel1 | undefined }>({})\n    const [tableDataFoll, setTableDataFoll] = useState<{ [id: string]: DashboardFollowingLevel1 | undefined }>({})\n\n    const [isAnimateChecked, setIsAnimateChecked] = useState(false)\n    const cardContainerClass = isAnimateChecked ? styles.scrollContentWrapper : styles.scrollContentWrapperStop\n    const wrapperClass = isAnimateChecked ? styles.scrollContent : styles.scrollContentStop\n    // ========================================= STATE VIEW =========================================  //\n\n\n    // ========================================= FUNCTIONS =========================================  //\n    const handleToggle = () => {\n        setIsRealtime((prev) => !prev)\n    }\n\n    const generateDataBuAll = async () => {\n        contextShowLoadingFunc(true)\n        try {\n            const [units, configs] = await Promise.all([\n                BusinessUnitService.GetAllBusinessUnit(),\n                Promise.all([\n                    contextVersion.centerline ? CenterlineService.GetBusinessUnitConfig() : [],\n                    contextVersion.safety ? SafetyService.GetBusinessUnitConfig() : [],\n                    contextVersion.electric ? ElectricService.GetBusinessUnitConfig() : [],\n                    contextVersion.critical_rod_break ? CriticalRodBreakService.GetBusinessUnitConfig() : [],\n                    contextVersion.quality_factor ? QualityFactorService.GetBusinessUnitConfig() : [],\n                ])\n            ])\n\n            const combined = units.map(unit => {\n                let result = { ...unit }\n                configs.forEach((val) => {\n                    const config = val.find(c => c.business_unit_id === unit.business_unit_id)\n                    result = { ...result, ...config }\n                })\n\n                return result\n            })\n\n            setBuData(combined)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, }))\n        } finally {\n            contextShowLoadingFunc(false)\n        }\n    }\n\n    const generateDataServer = async () => {\n        try {\n            let resp: DashboardLevel1Entity[] = []\n            if (isRealtime) {\n                resp = await DashboardRealtimeService.GetDashboardLevel1()\n                setFilterDate({ start_date: new Date(), end_date: new Date() })\n                localStorage.removeItem(\"cache\")\n            } else {\n                const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                resp = await DashboardService.GetDashboardLevel1(start_date, end_date)\n                localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, isRealtime }))\n            }\n\n            const data: { [id: string]: DashboardLevel1Entity } = {}\n            for (let i = 0; i < resp.length; i++) {\n                data[`${resp[i].business_unit_id}`] = resp[i]\n            }\n\n            setTableData(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, withOk: false }))\n        }\n    }\n\n    const generateDataCenterline = async () => {\n        try {\n            let resp: DashboardCenterlineLevel1[] = []\n            if (isRealtime) {\n                resp = await DashboardCenterlineService.DashboardLevel1Realtime()\n                setFilterDate({ start_date: new Date(), end_date: new Date() })\n                localStorage.removeItem(\"cache\")\n            } else {\n                const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                resp = await DashboardCenterlineService.DashboardLevel1(start_date, end_date)\n                localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, isRealtime }))\n            }\n\n            const data: { [id: string]: DashboardCenterlineLevel1 } = {}\n            for (let i = 0; i < resp.length; i++) {\n                data[`${resp[i].business_unit_id}`] = resp[i]\n            }\n\n            setTableDataCenterline(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, withOk: false }))\n        }\n    }\n\n    const generateDataCriticalRodBreak = async () => {\n        try {\n            let resp: DashboardCriticalRodBreakLevel1[] = []\n            if (isRealtime) {\n                resp = await DashboardCriticalRodBreakService.DashboardLevel1Realtime()\n                setFilterDate({ start_date: new Date(), end_date: new Date() })\n                localStorage.removeItem(\"cache\")\n            } else {\n                const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                resp = await DashboardCriticalRodBreakService.DashboardLevel1(start_date, end_date)\n                localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, isRealtime }))\n            }\n\n            const data: { [id: string]: DashboardCriticalRodBreakLevel1 } = {}\n            for (let i = 0; i < resp.length; i++) {\n                data[`${resp[i].business_unit_id}`] = resp[i]\n            }\n\n            setTableDataCriticalRodBreak(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, withOk: false }))\n        }\n    }\n    const generateDataSafety = async () => {\n        try {\n            let resp: DashboardSafetyLevel1[] = []\n            if (isRealtime) {\n                resp = await DashboardSafetyService.DashboardLevel1Realtime()\n                setFilterDate({ start_date: new Date(), end_date: new Date() })\n                localStorage.removeItem(\"cache\")\n            } else {\n                const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                resp = await DashboardSafetyService.DashboardLevel1(start_date, end_date)\n                localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, isRealtime }))\n            }\n\n            const data: { [id: string]: DashboardSafetyLevel1 } = {}\n            for (let i = 0; i < resp.length; i++) {\n                data[`${resp[i].business_unit_id}`] = resp[i]\n            }\n\n            setTableDataSafety(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, withOk: false }))\n        }\n    }\n    const generateDataElectric = async () => {\n        try {\n            let resp: DashboardElectricLevel1[] = []\n            if (isRealtime) {\n                resp = await DashboardElectricService.DashboardLevel1Realtime()\n                setFilterDate({ start_date: new Date(), end_date: new Date() })\n                localStorage.removeItem(\"cache\")\n            } else {\n                const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                resp = await DashboardElectricService.DashboardLevel1(start_date, end_date)\n                localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, isRealtime }))\n            }\n\n            const data: { [id: string]: DashboardElectricLevel1 } = {}\n            for (let i = 0; i < resp.length; i++) {\n                data[`${resp[i].business_unit_id}`] = resp[i]\n            }\n\n            setTableDataElectric(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, withOk: false }))\n        }\n    }\n    const generateDataQualityFactor = async () => {\n        try {\n            let resp: DashboardQualityFactorLevel1[] = []\n            if (isRealtime) {\n                resp = await DashboardQualityFactorService.DashboardLevel1Realtime()\n                setFilterDate({ start_date: new Date(), end_date: new Date() })\n                localStorage.removeItem(\"cache\")\n            } else {\n                const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                resp = await DashboardQualityFactorService.DashboardLevel1(start_date, end_date)\n                localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, isRealtime }))\n            }\n\n            const data: { [id: string]: DashboardQualityFactorLevel1 } = {}\n            for (let i = 0; i < resp.length; i++) {\n                data[`${resp[i].business_unit_id}`] = resp[i]\n            }\n\n            setTableDataQualityFactor(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, withOk: false }))\n        }\n    }\n\n    const generateDataFollErr = async () => {\n        try {\n            let resp: DashboardFollowingLevel1[] = []\n            if (isRealtime) {\n                resp = await DashboardFollErrService.DashboardLevel1Realtime()\n                setFilterDate({ start_date: new Date(), end_date: new Date() })\n                localStorage.removeItem(\"cache\")\n            } else {\n                const start_date = formatDate(filterDate.start_date, 'yyyy-MM-dd')\n                const end_date = formatDate(filterDate.end_date, 'yyyy-MM-dd')\n\n                resp = await DashboardFollErrService.DashboardLevel1(start_date, end_date)\n                localStorage.setItem(\"cache\", JSON.stringify({ ...filterDate, isRealtime }))\n            }\n\n            const data: { [id: string]: DashboardFollowingLevel1 } = {}\n            for (let i = 0; i < resp.length; i++) {\n                data[`${resp[i].business_unit_id}`] = resp[i]\n            }\n\n            setTableDataFoll(data)\n        } catch (error: any) {\n            contextShowAlertFunc(new AlertEntity({ message: error instanceof Error ? error.message : error.toString(), level: 3, withOk: false }))\n        }\n    }\n\n    const generateData = async () => {\n        if (isRealtime) {\n            console.log(\"called generate realtime\")\n\n            if (contextVersion.server != undefined) { await generateDataServer() }\n            if (contextVersion.centerline != undefined) { await generateDataCenterline() }\n            if (contextVersion.following != undefined) { await generateDataFollErr() }\n            if (contextVersion.critical_rod_break != undefined) { await generateDataCriticalRodBreak() }\n            if (contextVersion.safety != undefined) { await generateDataSafety() }\n            if (contextVersion.electric != undefined) { await generateDataElectric() }\n            if (contextVersion.quality_factor != undefined) { await generateDataQualityFactor() }\n        } else {\n            resetAllData()\n            contextShowLoadingFunc(true)\n            // langsung tampilkan ketika udah ada yg selesai satu\n            const promise = []\n            if (contextVersion.server != undefined) { promise.push(generateDataServer()) }\n            if (contextVersion.centerline != undefined) { promise.push(generateDataCenterline()) }\n            if (contextVersion.following != undefined) { promise.push(generateDataFollErr()) }\n            if (contextVersion.critical_rod_break != undefined) { promise.push(generateDataCriticalRodBreak()) }\n            if (contextVersion.safety != undefined) { promise.push(generateDataSafety()) }\n            if (contextVersion.electric != undefined) { promise.push(generateDataElectric()) }\n            if (contextVersion.quality_factor != undefined) { promise.push(generateDataQualityFactor()) }\n            try { await Promise.any(promise) } catch { }\n\n            contextShowLoadingFunc(false)\n        }\n    }\n\n    const getStatusOOL = (value: number | undefined, warn: number | undefined, alarm: number | undefined) => {\n        const ool = value ?? 0\n        const warnCheck = warn ?? 0\n        const alarmCheck = alarm ?? 0\n\n        let result = styles.runningBackground\n        if (ool > warnCheck) {\n            result = styles.warningBackground\n        }\n        if (ool > alarmCheck) {\n            result = styles.dangerBackground\n        }\n        return result\n    }\n\n    const resetAllData = () => {\n        setTableData({})\n        setTableDataCenterline({})\n        setTableDataFoll({})\n    }\n\n    useEffect(() => {\n        generateData()\n        if (isRealtime) {\n            let timeout: NodeJS.Timeout | null = null\n            const refreshfunc = () => {\n                timeout = setTimeout(async () => { await generateData(); refreshfunc() }, 3000)\n            }\n            refreshfunc()\n            return () => {\n                if (timeout != null) { clearTimeout(timeout) }\n            }\n        }\n    }, [contextAccessToken, contextVersion, isRealtime])\n\n    // generate once\n    useEffect(() => {\n        generateDataBuAll()\n    }, [])\n    // ========================================= FUNCTIONS =========================================  //\n\n    const Cards = () => {\n        return <>\n            {buData.map((item, idx) => {\n                const buConfig = buData[`${item.business_unit_id}`]\n\n                const data = tableData[`${item.business_unit_id}`]\n                const foll = tableDataFoll[`${item.business_unit_id}`]\n                const centerline = tableDataCenterline[`${item.business_unit_id}`]\n                const critical_rod_break = tableDataCriticalRodBreak[`${item.business_unit_id}`]\n                const safety = tableDataSafety[`${item.business_unit_id}`]\n                const quality_factor = tableDataQualityFactor[`${item.business_unit_id}`]\n                const electric = tableDataElectric[`${item.business_unit_id}`]\n\n                let merged: number[] = []\n                if (data) {\n                    merged = merged.concat(data.machine_ool_pressure)\n                    merged = merged.concat(data.machine_ool_vibration)\n                }\n                if (foll) {\n                    merged = merged.concat(foll.machine_ool_following_error)\n                }\n                if (centerline) {\n                    merged = merged.concat(centerline.centerline_id_ool)\n                }\n                if (critical_rod_break) {\n                    merged = merged.concat(critical_rod_break.critical_rod_break_id_ool)\n                }\n                if (safety) {\n                    merged = merged.concat(safety.safety_id_ool)\n                }\n                if (quality_factor) {\n                    merged = merged.concat(quality_factor.quality_factor_id_ool)\n                }\n                if (electric) {\n                    merged = merged.concat(electric.electric_id_ool)\n                }\n                const machine_ool = Array.from(new Set(merged))\n\n                return <div className={styles.cardItem1} key={idx}\n                    onClick={() => {\n                        if (data || foll) {\n                            navigate(`/dashboard/l2/${item.business_unit_id}`, {\n                                state: {\n                                    business_unit: {\n                                        business_unit_id: item.business_unit_id,\n                                        business_unit: item.business_unit,\n                                    },\n                                    start_date: filterDate.start_date,\n                                    end_date: filterDate.end_date,\n                                    realtimeState: isRealtime\n                                },\n                            })\n                        }\n                    }}\n                >\n                    <div className={styles.cardItem1Header}>\n                        <div className={styles.cardTitle}>{item.business_unit}</div>\n                    </div>\n                    <div className={styles.cardItem1Body}>\n                        {data != undefined\n                            ? <>\n                                <div className={styles.cardSubItem}>\n                                    <div className={styles.cardSubItemHeader}>\n                                        Pressure\n                                    </div>\n                                    <div className={styles.cardSubItemBody}>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(data.ool_pressure, buConfig?.business_unit_warn, buConfig?.business_unit_alarm)}`}>\n                                            <h2>{data.ool_pressure ?? 0}</h2>\n                                            <h3>OOL</h3>\n                                        </div>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(data.machine_ool_pressure.length, buConfig?.business_unit_warn, buConfig?.business_unit_alarm)}`}>\n                                            <h2>{data.machine_ool_pressure.length}</h2>\n                                            <h3>Machine OOL</h3>\n                                        </div>\n                                    </div>\n                                    {data.sensor_pressure_total > 0 && (\n                                        <div className={styles.cardSubItemFooter}>\n                                            <div><PiPlugsConnected strokeWidth={10} /></div>\n                                            <div>{data.sensor_pressure_connected} / {data.sensor_pressure_total}</div>\n                                        </div>\n                                    )}\n                                </div>\n\n                                <div className={styles.cardSubItem}>\n                                    <div className={styles.cardSubItemHeader}>\n                                        Vibration\n                                    </div>\n                                    <div className={styles.cardSubItemBody}>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(data.ool_vibration, buConfig?.business_unit_warn, buConfig?.business_unit_alarm)}`}>\n                                            <h2>{data.ool_vibration ?? 0}</h2>\n                                            <h3>Vibration OOL</h3>\n                                        </div>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(data.ool_temperature, buConfig?.business_unit_warn, buConfig?.business_unit_alarm)}`}>\n                                            <h2>{data.ool_temperature ?? 0}</h2>\n                                            <h3>Temperature OOL</h3>\n                                        </div>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(data.machine_ool_vibration.length, buConfig?.business_unit_warn, buConfig?.business_unit_alarm)}`}>\n                                            <h2>{data.machine_ool_vibration.length ?? 0}</h2>\n                                            <h3>Machine OOL</h3>\n                                        </div>\n                                    </div>\n                                    {data.sensor_vibration_total > 0 && (\n                                        <div className={styles.cardSubItemFooter}>\n                                            <div><PiPlugsConnected strokeWidth={10} /></div>\n                                            <div>{data.sensor_vibration_connected} / {data.sensor_vibration_total}</div>\n                                        </div>\n                                    )}\n                                </div>\n                            </>\n                            : <></>}\n\n                        {foll != undefined\n                            ? <>\n                                <div className={styles.cardSubItem}>\n                                    <div className={styles.cardSubItemHeader}>\n                                        Following Error\n                                    </div>\n                                    <div className={styles.cardSubItemBody}>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(foll.ool_following_error, buConfig?.business_unit_warn, buConfig?.business_unit_alarm)}`}>\n                                            <h2>{foll.ool_following_error}</h2>\n                                            <h3>OOL</h3>\n                                        </div>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(foll.machine_ool_following_error.length, buConfig?.business_unit_warn, buConfig?.business_unit_alarm)}`}>\n                                            <h2>{foll.machine_ool_following_error.length}</h2>\n                                            <h3>Machine OOL</h3>\n                                        </div>\n                                    </div>\n                                </div>\n                            </>\n                            : <></>}\n\n                        {centerline != undefined\n                            ? <>\n                                <div className={styles.cardSubItem}>\n                                    <div className={styles.cardSubItemHeader}>\n                                        Centerline\n                                    </div>\n                                    <div className={styles.cardSubItemBody}>\n                                        <div className={styles.itemValue}>\n                                            <h2>{centerline.centerline_green}</h2>\n                                            <h3>Normal</h3>\n                                        </div>\n                                        {buConfig && buConfig.centerline_warn === buConfig.centerline_alarm && (\n                                            <div className={styles.itemValue}>\n                                                <h2>{centerline.centerline_yellow}</h2>\n                                                <h3>Warning</h3>\n                                            </div>\n                                        )}\n                                        <div className={styles.itemValue}>\n                                            <h2>{centerline.centerline_red}</h2>\n                                            <h3>Alarm</h3>\n                                        </div>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(centerline.centerline_id_ool.length, buConfig?.centerline_warn, buConfig?.centerline_alarm)}`}>\n                                            <h2>{centerline.centerline_id_ool.length}</h2>\n                                            <h3>OOL</h3>\n                                        </div>\n                                    </div>\n                                </div>\n                            </>\n                            : <></>}\n\n\n                        {critical_rod_break != undefined\n                            ? <>\n                                <div className={styles.cardSubItem}>\n                                    <div className={styles.cardSubItemHeader}>\n                                        Critical Rod Break\n                                    </div>\n                                    <div className={styles.cardSubItemBody}>\n                                        <div className={styles.itemValue}>\n                                            <h2>{critical_rod_break.critical_rod_break_green}</h2>\n                                            <h3>Normal</h3>\n                                        </div>\n                                        {buConfig && buConfig.critical_rod_break_warn === buConfig.critical_rod_break_alarm && (\n                                            <div className={styles.itemValue}>\n                                                <h2>{critical_rod_break.critical_rod_break_yellow}</h2>\n                                                <h3>Warning</h3>\n                                            </div>\n                                        )}\n                                        <div className={styles.itemValue}>\n                                            <h2>{critical_rod_break.critical_rod_break_red}</h2>\n                                            <h3>Alarm</h3>\n                                        </div>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(critical_rod_break.critical_rod_break_id_ool.length, buConfig?.critical_rod_break_warn, buConfig?.critical_rod_break_alarm)}`}>\n                                            <h2>{critical_rod_break.critical_rod_break_id_ool.length}</h2>\n                                            <h3>OOL</h3>\n                                        </div>\n                                    </div>\n                                </div>\n                            </>\n                            : <></>}\n\n                        {safety != undefined\n                            ? <>\n                                <div className={styles.cardSubItem}>\n                                    <div className={styles.cardSubItemHeader}>\n                                        Safety\n                                    </div>\n                                    <div className={styles.cardSubItemBody}>\n                                        <div className={styles.itemValue}>\n                                            <h2>{safety.safety_green}</h2>\n                                            <h3>Normal</h3>\n                                        </div>\n                                        {buConfig && buConfig.safety_warn === buConfig.safety_alarm && (\n                                            <div className={styles.itemValue}>\n                                                <h2>{safety.safety_yellow}</h2>\n                                                <h3>Warning</h3>\n                                            </div>\n                                        )}\n                                        <div className={styles.itemValue}>\n                                            <h2>{safety.safety_red}</h2>\n                                            <h3>Alarm</h3>\n                                        </div>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(safety.safety_id_ool.length, buConfig?.safety_alarm, buConfig?.safety_alarm)}`}>\n                                            <h2>{safety.safety_id_ool.length}</h2>\n                                            <h3>OOL</h3>\n                                        </div>\n                                    </div>\n                                </div>\n                            </>\n                            : <></>}\n\n                        {quality_factor != undefined\n                            ? <>\n                                <div className={styles.cardSubItem}>\n                                    <div className={styles.cardSubItemHeader}>\n                                        Quality Factor\n                                    </div>\n                                    <div className={styles.cardSubItemBody}>\n                                        <div className={styles.itemValue}>\n                                            <h2>{quality_factor.quality_factor_green}</h2>\n                                            <h3>Normal</h3>\n                                        </div>\n                                        {buConfig && buConfig.critical_rod_break_warn === buConfig.critical_rod_break_alarm && (\n                                            <div className={styles.itemValue}>\n                                                <h2>{quality_factor.quality_factor_yellow}</h2>\n                                                <h3>Warning</h3>\n                                            </div>\n                                        )}\n                                        <div className={styles.itemValue}>\n                                            <h2>{quality_factor.quality_factor_red}</h2>\n                                            <h3>Alarm</h3>\n                                        </div>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(quality_factor.quality_factor_id_ool.length, buConfig?.quality_factor_warn, buConfig?.quality_factor_alarm)}`}>\n                                            <h2>{quality_factor.quality_factor_id_ool.length}</h2>\n                                            <h3>OOL</h3>\n                                        </div>\n                                    </div>\n                                </div>\n                            </>\n                            : <></>}\n\n                        {electric != undefined\n                            ? <>\n                                <div className={styles.cardSubItem}>\n                                    <div className={styles.cardSubItemHeader}>\n                                        Electric\n                                    </div>\n                                    <div className={styles.cardSubItemBody}>\n                                        <div className={styles.itemValue}>\n                                            <h2>{electric.electric_green}</h2>\n                                            <h3>Normal</h3>\n                                        </div>\n                                        {buConfig && buConfig.electric_warn === buConfig.electric_alarm && (\n                                            <div className={styles.itemValue}>\n                                                <h2>{electric.electric_yellow}</h2>\n                                                <h3>Warning</h3>\n                                            </div>\n                                        )}\n                                        <div className={styles.itemValue}>\n                                            <h2>{electric.electric_red}</h2>\n                                            <h3>Alarm</h3>\n                                        </div>\n                                        <div className={`${styles.itemValue} ${getStatusOOL(electric.electric_id_ool.length, buConfig?.electric_warn, buConfig?.electric_alarm)}`}>\n                                            <h2>{electric.electric_id_ool.length}</h2>\n                                            <h3>OOL</h3>\n                                        </div>\n                                    </div>\n                                </div>\n                            </>\n                            : <></>}\n                    </div>\n\n                    {data || foll\n                        ? <div className={styles.cardItem1Footer}>\n                            <div>Summary Machine OOL</div>\n                            <div>{machine_ool.length}</div>\n                        </div>\n                        : <></>}\n                </div>\n            })}\n        </>\n    }\n\n    return (\n        <div className=\"container\">\n            {/* Header */}\n            <div className={styles.cardHeader}>\n                <div className={styles.leftSection}>\n                    <button className={styles.buttonFooter} disabled={isRealtime} onClick={() => { generateData() }}>\n                        <TbRefreshDot />\n                    </button>\n\n                    <div className={styles.inputGroup}>\n                        <label htmlFor=\"startDate\">START DATE :</label>\n                        <input\n                            type=\"date\"\n                            value={formatDate(filterDate.start_date, \"yyyy-MM-dd\")}\n                            onChange={(e) =>\n                                setFilterDate((prev) => ({\n                                    ...prev,\n                                    start_date: new Date(e.target.value),\n                                }))\n                            }\n                            className={styles.dateInput}\n                            disabled={isRealtime}\n                            style={{\n                                border: \"0px solid black\",\n                                borderRadius: \"5px\",\n                                backgroundColor: isRealtime ? \"#eee\" : \"white\",\n                                color: \"var(--header-color-hover)\",\n                            }}\n                        />\n                    </div>\n\n                    <div className={styles.inputGroup}>\n                        <label htmlFor=\"endDate\">END DATE :</label>\n                        <input\n                            type=\"date\"\n                            value={formatDate(filterDate.end_date, \"yyyy-MM-dd\")}\n                            onChange={(e) =>\n                                setFilterDate((prev) => ({\n                                    ...prev,\n                                    end_date: new Date(e.target.value),\n                                }))\n                            }\n                            className={styles.dateInput}\n                            disabled={isRealtime}\n                            style={{\n                                border: \"0px solid black\",\n                                borderRadius: \"5px\",\n                                backgroundColor: isRealtime ? \"#eee\" : \"white\",\n                                color: \"var(--header-color-hover)\",\n                            }}\n                        />\n                    </div>\n\n                    <div className={styles.switchGroup}>\n                        <label htmlFor=\"realtime\">Realtime</label>\n                        <label className={styles.switch}>\n                            <input\n                                type=\"checkbox\"\n                                id=\"realtime\"\n                                checked={isRealtime}\n                                onChange={handleToggle}\n                            />\n                            <span className={styles.slider}></span>\n                        </label>\n                    </div>\n\n                    <div className={styles.autoScroll}>\n                        <label className={styles.checkAuto}>\n                            <input\n                                type=\"checkbox\"\n                                checked={isAnimateChecked}\n                                onChange={() => setIsAnimateChecked(!isAnimateChecked)}\n                            />\n                            <span>Auto Scroll</span>\n                        </label>\n                    </div>\n                </div>\n\n                <div className={styles.rightSection}>\n                    DASHBOARD PREDICTIVE MAINTENANCE\n                </div>\n            </div>\n\n            {/* Body */}\n            <div className={styles.cardWrapperContainer}>\n                <div className={styles.cardContainer} style={{ padding: isAnimateChecked ? '1rem' : '0' }}>\n                    <div className={cardContainerClass}>\n                        {isAnimateChecked && (\n                            <div className={styles.scrollContent}>\n                                <Cards />\n                            </div>\n                        )}\n                        <div className={wrapperClass}>\n                            <Cards />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div >\n    )\n}\n"],"names":["FollErrService","GetMachineConfig","machine_id","uri","BASE_URL","resp","FetchUtils","fetchAuth","status","Error","message","Array","isArray","data","i","length","_row$following_error_","_row$following_error_2","row","following_error_warn","following_error_alarm","UpsertMachineConfig","fields","method","body","JSON","stringify","headers","DashboardFollErrService","DashboardLevel1","start_date","end_date","business_unit_id","business_unit","machine_ool_following_error","ool_following_error","DashboardLevel2","link_up_id","link_up","DashboardLevel3","DashboardLevel4","following_error","undefined","Date","created_at","toString","DashboardLevel1Realtime","DashboardLevel2Realtime","DashboardLevel3Realtime","DashboardLevel4Realtime","DashboardService","GetDashboardLevel1","encodeURIComponent","result","machine_ool_pressure","machine_ool_vibration","push","business_unit_warn","business_unit_alarm","ool_pressure","ool_vibration","ool_temperature","sensor_vibration_connected","sensor_vibration_total","sensor_pressure_connected","sensor_pressure_total","GetDashboardLevel2","link_up_warn","link_up_alarm","GetDashboardLevel3","machine","machine_warn","machine_alarm","machine_type","GetDashboardLevel4Pressure","rawData","pressure","pressure_max_alarm","pressure_max_warn","pressure_min_alarm","pressure_min_warn","timestamp","GetDashboardLevel4Vibration","x","x_base","x_warn","x_alarm","z","z_base","z_warn","z_alarm","x_acc","x_acc_base","x_acc_warn","x_acc_alarm","z_acc","z_acc_base","z_acc_warn","z_acc_alarm","temp","temp_warn","temp_alarm","DashboardRealtimeService","mergedArray","concat","from","Set","Dashboard","context","useContext","AppContext","contextVersion","version","contextAccessToken","contextShowAlertFunc","contextShowLoadingFunc","navigate","stateShowLoading","useNavigate","cache","useLocation","localStorage","getItem","isRealtime","parse","filterDate","setFilterDate","useState","setIsRealtime","buData","setBuData","tableData","setTableData","tableDataCenterline","setTableDataCenterline","tableDataCriticalRodBreak","setTableDataCriticalRodBreak","tableDataSafety","setTableDataSafety","tableDataElectric","setTableDataElectric","tableDataQualityFactor","setTableDataQualityFactor","tableDataFoll","setTableDataFoll","isAnimateChecked","setIsAnimateChecked","cardContainerClass","styles","scrollContentWrapper","scrollContentWrapperStop","wrapperClass","scrollContent","scrollContentStop","generateDataServer","async","removeItem","formatDate","setItem","error","AlertEntity","level","withOk","generateDataCenterline","DashboardCenterlineService","generateDataCriticalRodBreak","DashboardCriticalRodBreakService","generateDataSafety","DashboardSafetyService","generateDataElectric","DashboardElectricService","generateDataQualityFactor","DashboardQualityFactorService","generateDataFollErr","generateData","console","log","server","centerline","following","critical_rod_break","safety","electric","quality_factor","resetAllData","promise","Promise","any","getStatusOOL","value","warn","alarm","ool","warnCheck","alarmCheck","runningBackground","warningBackground","dangerBackground","useEffect","timeout","refreshfunc","setTimeout","clearTimeout","units","configs","all","BusinessUnitService","GetAllBusinessUnit","CenterlineService","GetBusinessUnitConfig","SafetyService","ElectricService","CriticalRodBreakService","QualityFactorService","combined","map","unit","forEach","val","config","find","c","generateDataBuAll","Cards","_jsx","_Fragment","children","item","idx","_data$ool_pressure","_data$ool_vibration","_data$ool_temperature","_data$machine_ool_vib","buConfig","foll","merged","centerline_id_ool","critical_rod_break_id_ool","safety_id_ool","quality_factor_id_ool","electric_id_ool","machine_ool","_jsxs","className","cardItem1","onClick","state","realtimeState","cardItem1Header","cardTitle","cardItem1Body","cardSubItem","cardSubItemHeader","cardSubItemBody","itemValue","cardSubItemFooter","PiPlugsConnected","strokeWidth","centerline_green","centerline_warn","centerline_alarm","centerline_yellow","centerline_red","critical_rod_break_green","critical_rod_break_warn","critical_rod_break_alarm","critical_rod_break_yellow","critical_rod_break_red","safety_green","safety_warn","safety_alarm","safety_yellow","safety_red","quality_factor_green","quality_factor_yellow","quality_factor_red","quality_factor_warn","quality_factor_alarm","electric_green","electric_warn","electric_alarm","electric_yellow","electric_red","cardItem1Footer","cardHeader","leftSection","buttonFooter","disabled","TbRefreshDot","inputGroup","htmlFor","type","onChange","e","prev","target","dateInput","style","border","borderRadius","backgroundColor","color","switchGroup","switch","id","checked","handleToggle","slider","autoScroll","checkAuto","rightSection","cardWrapperContainer","cardContainer","padding"],"sourceRoot":""}