{"version":3,"file":"static/js/976.2e5768fb.chunk.js","mappings":"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","sources":["features/Dashboard/DashboardLevel4/DashboardLevel4.tsx","webpack://nagamas_frontend/./src/features/Dashboard/DashboardLevel4/DashboardLevel4.module.css?226d"],"sourcesContent":["import styles from './DashboardLevel4.module.css'\nimport { FiArrowLeft } from 'react-icons/fi'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { lazy, startTransition, Suspense, useContext, useState } from 'react'\nimport AppContext from '../../../context'\nimport { TbRefreshDot } from 'react-icons/tb'\nimport { formatDate } from 'date-fns'\nimport { FaArrowsSpin } from 'react-icons/fa6'\nimport { FaFileExcel } from 'react-icons/fa'\n\n// Export Page\nconst PressurePage = lazy(() => import('./DashboardLevel4Pressure'))\nconst VibrationPage = lazy(() => import('./DashboardLevel4Vibration'))\nconst FollowingErrorPage = lazy(() => import('./DashboardLevel4FollErr'))\nconst CenterlinePage = lazy(() => import('./DashboardLevel4Centerline'))\nconst CriticalPage = lazy(() => import('./DashboardLevel4Critical'))\nconst SafetyPage = lazy(() => import('./DashboardLevel4Safety'))\nconst QualityPage = lazy(() => import('./DashboardLevel4Quality'))\nconst ElectricPage = lazy(() => import('./DashboardLevel4Electric'))\n\nexport default function DashboardV4() {\n    // ========================================= GLOBAL CONTEXT =========================================  //\n    const context = useContext(AppContext)\n    const contextAccessToken = context.contextAccessToken\n    const contextShowAlertFunc = context.contextShowAlertFunc\n    const contextShowLoadingFunc = context.contextShowLoadingFunc\n    const stateShowLoading = context.stateShowLoading\n    const navigate = useNavigate()\n    const location = useLocation()\n    // ========================================= GLOBAL CONTEXT =========================================  //\n\n\n    // ========================================= STATE VIEW =========================================  //\n    const { machine, dashboard_type } = location.state || {}\n\n    const cache = (() => {\n        const cache = localStorage.getItem(\"cache\")\n        if (cache == null) {\n            return { start_date: new Date(), end_date: new Date(), isRealtime: true }\n        } else {\n            const data = JSON.parse(cache)\n            return {\n                start_date: data.start_date,\n                end_date: data.end_date,\n                isRealtime: data.isRealtime,\n            }\n        }\n    })()\n\n    interface FilterType { start_date: Date; end_date: Date; }\n    const [filterDate, setFilterDate] = useState<FilterType>({\n        start_date: cache.start_date,\n        end_date: cache.end_date\n    })\n\n    const [isRealtime, setIsRealtime] = useState(cache.isRealtime ?? true)\n    const [isPressure, setIsPressure] = useState(false)\n    const [clickRefresh, setClickRefresh] = useState(0)\n    const [handleGenerateExcel, setHandleGenerateExcel] = useState<(() => void) | null>(null)\n    // ========================================= STATE VIEW =========================================  //\n\n    const togglePressure = () => {\n        setIsPressure(prevIsPressure => !prevIsPressure)\n    }\n    const handleClickRefresh = () => {\n        setClickRefresh((prev) => prev + 1)\n    }\n\n    return (\n        <div className='container'>\n            {/* Header */}\n            <div className={styles.cardHeader}>\n                <div className={styles.leftSection}>\n                    <button className={styles.backButton} onClick={() => {\n                        startTransition(() => {\n                            navigate(-1)\n                        })\n                    }}>\n                        <FiArrowLeft size={40} style={{ color: \"var(--secondary-color)\" }} />\n                    </button>\n                    {dashboard_type === \"sensor\" && (\n                        <>\n                            <div className={styles.leftSection2}>\n                                {isPressure ? \"PRESSURE\" : \"VIBRATION\"}\n                            </div>\n                            <button\n                                className={`${styles.iconsChange} ${!isPressure ? styles.rotateIcon : ''}`}\n                                onClick={togglePressure}>\n                                <FaArrowsSpin />\n                            </button>\n                        </>\n                    )}\n                    {dashboard_type === \"follerr\" && (\n                        <>\n                            <div className={styles.leftSection2}>\n                                FOLLOWING ERROR\n                            </div>\n                        </>\n                    )}\n                    {dashboard_type === \"centerline\" && (\n                        <>\n                            <div className={styles.leftSection2}>\n                                CENTERLINE\n                            </div>\n                        </>\n                    )}\n                    {dashboard_type === \"critical_rod_break\" && (\n                        <>\n                            <div className={styles.leftSection2}>\n                                CRITICAL ROD BREAK\n                            </div>\n                        </>\n                    )}\n                    {dashboard_type === \"safety\" && (\n                        <>\n                            <div className={styles.leftSection2}>\n                                SAFETY\n                            </div>\n                        </>\n                    )}\n                    {dashboard_type === \"quality_factor\" && (\n                        <>\n                            <div className={styles.leftSection2}>\n                                QUALITY FACTOR\n                            </div>\n                        </>\n                    )}\n                    {dashboard_type === \"electric\" && (\n                        <>\n                            <div className={styles.leftSection2}>\n                                ELECTRIC\n                            </div>\n                        </>\n                    )}\n                </div>\n                {!isRealtime\n                    ? <div className={styles.midSection}>\n                        <div className={styles.inputGroup}>\n                            <label htmlFor=\"startDate\">START DATE :</label>\n                            <input\n                                type=\"date\"\n                                value={formatDate(filterDate.start_date, \"yyyy-MM-dd\")}\n                                onChange={(e) =>\n                                    setFilterDate((prev) => ({\n                                        ...prev,\n                                        start_date: new Date(e.target.value),\n                                    }))\n                                }\n                                className={styles.dateInput}\n                                disabled={isRealtime}\n                                style={{\n                                    border: \"0px solid black\",\n                                    borderRadius: \"5px\",\n                                    backgroundColor: isRealtime ? \"#eee\" : \"white\",\n                                    color: \"var(--header-color-hover)\",\n                                }}\n                            />\n                        </div>\n\n                        <div className={styles.inputGroup}>\n                            <label htmlFor=\"endDate\">END DATE :</label>\n                            <input\n                                type=\"date\"\n                                value={formatDate(filterDate.end_date, \"yyyy-MM-dd\")}\n                                onChange={(e) =>\n                                    setFilterDate((prev) => ({\n                                        ...prev,\n                                        end_date: new Date(e.target.value),\n                                    }))\n                                }\n                                className={styles.dateInput}\n                                disabled={isRealtime}\n                                style={{\n                                    border: \"0px solid black\",\n                                    borderRadius: \"5px\",\n                                    backgroundColor: isRealtime ? \"#eee\" : \"white\",\n                                    color: \"var(--header-color-hover)\",\n                                }}\n                            />\n                        </div>\n                        <button className={styles.buttonFooter} onClick={handleClickRefresh}>\n                            <TbRefreshDot />\n                        </button>\n                    </div>\n                    : <div> </div>\n                }\n\n                <div className={styles.rightSectionWrapper}>\n                    <button className={styles.buttonFooter} onClick={() => { handleGenerateExcel?.() }}>\n                        <FaFileExcel />\n                    </button>\n                    <div className={styles.rightSection}>\n                        <h2>{machine}{isRealtime ? \" REAL TIME\" : \"\"}</h2>\n                    </div>\n                </div>\n            </div>\n\n            {/* Body */}\n            <div className={styles.cardBody}>\n                <Suspense fallback={<div>Loading...</div>}>\n                    {dashboard_type === \"sensor\" && (\n                        <>\n                            {isPressure\n                                ? <PressurePage\n                                    realtime={isRealtime}\n                                    setRealtime={setIsRealtime}\n                                    refresh={clickRefresh}\n                                    start_date={filterDate.start_date}\n                                    end_date={filterDate.end_date}\n                                    setHandleGenerateExcel={setHandleGenerateExcel}\n                                />\n                                : <VibrationPage\n                                    realtime={isRealtime}\n                                    setRealtime={setIsRealtime}\n                                    refresh={clickRefresh}\n                                    start_date={filterDate.start_date}\n                                    end_date={filterDate.end_date}\n                                    setHandleGenerateExcel={setHandleGenerateExcel}\n                                />\n                            }\n                        </>\n                    )}\n                    {dashboard_type === \"follerr\" && (\n                        <>\n                            <FollowingErrorPage\n                                realtime={isRealtime}\n                                setRealtime={setIsRealtime}\n                                refresh={clickRefresh}\n                                start_date={filterDate.start_date}\n                                end_date={filterDate.end_date}\n                                setHandleGenerateExcel={setHandleGenerateExcel}\n                            />\n                        </>\n                    )}\n                    {dashboard_type === \"centerline\" && (\n                        <>\n                            <CenterlinePage\n                                realtime={isRealtime}\n                                setRealtime={setIsRealtime}\n                                refresh={clickRefresh}\n                                start_date={filterDate.start_date}\n                                end_date={filterDate.end_date}\n                                setHandleGenerateExcel={setHandleGenerateExcel}\n                            />\n                        </>\n                    )}\n                    {dashboard_type === \"critical_rod_break\" && (\n                        <>\n                            <CriticalPage\n                                realtime={isRealtime}\n                                setRealtime={setIsRealtime}\n                                refresh={clickRefresh}\n                                start_date={filterDate.start_date}\n                                end_date={filterDate.end_date}\n                                setHandleGenerateExcel={setHandleGenerateExcel}\n                            />\n                        </>\n                    )}\n                    {dashboard_type === \"safety\" && (\n                        <>\n                            <SafetyPage\n                                realtime={isRealtime}\n                                setRealtime={setIsRealtime}\n                                refresh={clickRefresh}\n                                start_date={filterDate.start_date}\n                                end_date={filterDate.end_date}\n                                setHandleGenerateExcel={setHandleGenerateExcel}\n                            />\n                        </>\n                    )}\n                    {dashboard_type === \"quality_factor\" && (\n                        <>\n                            <QualityPage\n                                realtime={isRealtime}\n                                setRealtime={setIsRealtime}\n                                refresh={clickRefresh}\n                                start_date={filterDate.start_date}\n                                end_date={filterDate.end_date}\n                                setHandleGenerateExcel={setHandleGenerateExcel}\n                            />\n                        </>\n                    )}\n                    {dashboard_type === \"electric\" && (\n                        <>\n                            <ElectricPage\n                                realtime={isRealtime}\n                                setRealtime={setIsRealtime}\n                                refresh={clickRefresh}\n                                start_date={filterDate.start_date}\n                                end_date={filterDate.end_date}\n                                setHandleGenerateExcel={setHandleGenerateExcel}\n                            />\n                        </>\n                    )}\n                </Suspense>\n            </div>\n        </div >\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"cardHeader\":\"DashboardLevel4_cardHeader__TekBr\",\"leftMidWrapper\":\"DashboardLevel4_leftMidWrapper__+ALo9\",\"leftSection\":\"DashboardLevel4_leftSection__Wj0B-\",\"rotateIcon\":\"DashboardLevel4_rotateIcon__1QKeF\",\"iconsChange\":\"DashboardLevel4_iconsChange__GLLcW\",\"leftSection2\":\"DashboardLevel4_leftSection2__fOL9n\",\"midSection\":\"DashboardLevel4_midSection__yoxTm\",\"backButton\":\"DashboardLevel4_backButton__ObBov\",\"inputGroup\":\"DashboardLevel4_inputGroup__L1EjY\",\"checkboxGroup\":\"DashboardLevel4_checkboxGroup__fHznQ\",\"rightSectionWrapper\":\"DashboardLevel4_rightSectionWrapper__zWCob\",\"rightSection\":\"DashboardLevel4_rightSection__SLf6z\",\"cardBody\":\"DashboardLevel4_cardBody__m-wlN\",\"cardBodyHeader\":\"DashboardLevel4_cardBodyHeader__yIhd1\",\"chartButtons\":\"DashboardLevel4_chartButtons__G6Mj1\",\"activeBtn\":\"DashboardLevel4_activeBtn__pS3dZ\",\"titleChart\":\"DashboardLevel4_titleChart__fJEG2\",\"headerChart\":\"DashboardLevel4_headerChart__Lil2o\",\"bodyChart\":\"DashboardLevel4_bodyChart__Y2Ast\",\"wrapperChart\":\"DashboardLevel4_wrapperChart__Cfvc6\",\"buttonChart1\":\"DashboardLevel4_buttonChart1__O+R+w\",\"buttonChart2\":\"DashboardLevel4_buttonChart2__mm9wg\",\"cardBodyFooter\":\"DashboardLevel4_cardBodyFooter__G89MD\",\"footerLeft\":\"DashboardLevel4_footerLeft__-TpiO\",\"footerMid\":\"DashboardLevel4_footerMid__8yrzr\",\"switchGroup\":\"DashboardLevel4_switchGroup__pjEn5\",\"switch\":\"DashboardLevel4_switch__Evb5B\",\"slider\":\"DashboardLevel4_slider__QxJ1D\",\"footerRight\":\"DashboardLevel4_footerRight__LAQGy\",\"buttonFooter\":\"DashboardLevel4_buttonFooter__Qfdpu\",\"tooltipText\":\"DashboardLevel4_tooltipText__GOZv+\",\"active\":\"DashboardLevel4_active__aCk+1\",\"buttonChange\":\"DashboardLevel4_buttonChange__TFBEA\",\"activeChange\":\"DashboardLevel4_activeChange__S-bDy\"};"],"names":["PressurePage","lazy","VibrationPage","FollowingErrorPage","CenterlinePage","CriticalPage","SafetyPage","QualityPage","ElectricPage","DashboardV4","_cache$isRealtime","context","useContext","AppContext","navigate","contextAccessToken","contextShowAlertFunc","contextShowLoadingFunc","stateShowLoading","useNavigate","location","useLocation","machine","dashboard_type","state","cache","localStorage","getItem","start_date","Date","end_date","isRealtime","data","JSON","parse","filterDate","setFilterDate","useState","setIsRealtime","isPressure","setIsPressure","clickRefresh","setClickRefresh","handleGenerateExcel","setHandleGenerateExcel","_jsxs","className","children","styles","cardHeader","leftSection","_jsx","backButton","onClick","startTransition","FiArrowLeft","size","style","color","_Fragment","leftSection2","iconsChange","rotateIcon","togglePressure","prevIsPressure","FaArrowsSpin","midSection","inputGroup","htmlFor","type","value","formatDate","onChange","e","prev","target","dateInput","disabled","border","borderRadius","backgroundColor","buttonFooter","handleClickRefresh","TbRefreshDot","rightSectionWrapper","FaFileExcel","rightSection","cardBody","Suspense","fallback","realtime","setRealtime","refresh"],"sourceRoot":""}